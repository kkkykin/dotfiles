#+title:      wireshark
#+date:       [2024-12-20 Fri 16:28]
#+filetags:   :network:
#+identifier: 20241220T162826

* tangle
#+begin_src elisp
(org-decrypt-entries)
(let ((zr-local-pls (plstore-open "wireshark.pls"))
      org-babel-pre-tangle-hook
      org-confirm-babel-evaluate)
  (plstore-close zr-local-pls)
  (org-babel-tangle nil nil "^lua$")
  (let ((coding-system-for-write 'cp936-dos))
    (org-babel-tangle nil nil "^bat$")))

(mkdir "_prefs/profiles/dummy" t)

(let ((lua-dir (pcase system-type
                 ('gnu/linux (expand-file-name "~/.local/lib/wireshark/plugins"))
                 ('windows-nt (expand-file-name "plugins" (getenv "WIRESHARK_DATA_DIR"))))))
  (make-symbolic-link (expand-file-name "_tangle/lua-plugins") lua-dir t))

(org-babel-remove-result-one-or-many '(4))
(save-buffer)
#+end_src

* launcher
#+name: cap-proxy
#+call: wireshark-launcher[](name="proxies", interface=(if (eq system-type 'gnu/linux) "lo" "\\Device\\NPF_Loopback"), cfilter='("proxies"), pref=proxy-pref[], args='("-SX" "lua_script:_tangle/lua-scripts/socks5.lua" "-t" "a" "-n" "--only-protocols" "frame,eth,ip,tcp,http,socks5"))[]

** arguments
*** only-protocols
双击 frame 后在弹窗的各层协议右键，移动鼠标到 "apply as filter" 查看各层协议名。

** filters

*** capture
https://wiki.wireshark.org/CaptureFilters
#+name: capture-filters
| name         | filter                                                                                                                                                                               | arg                                                             |
|--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------|
| proxies      | dst port %s && (tcp[(((tcp[12:1] & 0xf0) >> 2)) + 0:4] = 0x05010003) or (tcp[(((tcp[12:1] & 0xf0) >> 2)) + 0:4] = 0x434f4e4e && tcp[(((tcp[12:1] & 0xf0) >> 2)) + 4:4] = 0x45435420) | (plist-get (cdr (plstore-get zr-local-pls "proxy-port")) :port) |
| socks5-proxy | dst port %s && (tcp[(((tcp[12:1] & 0xf0) >> 2)) + 0:4] = 0x05010003)                                                                                                                 | (plist-get (cdr (plstore-get zr-local-pls "proxy-port")) :port) |
| http-proxy   | dst port %s && (tcp[(((tcp[12:1] & 0xf0) >> 2)) + 0:4] = 0x434f4e4e && tcp[(((tcp[12:1] & 0xf0) >> 2)) + 4:4] = 0x45435420)                                                          | (plist-get (cdr (plstore-get zr-local-pls "proxy-port")) :port) |

*** display
https://wiki.wireshark.org/DisplayFilters
https://unit42.paloaltonetworks.com/using-wireshark-display-filter-expressions/
#+name: display-filters
| name                   | filter                                                                                                      | arg |
|------------------------+-------------------------------------------------------------------------------------------------------------+-----|
| basic                  | (http.request or tls.handshake.type eq 1) and !(ssdp)                                                       |     |
| basic+                 | (http.request or tls.handshake.type eq 1 or (tcp.flags.syn eq 1 and tcp.flags.ack eq 0)) and !(ssdp)        |     |
| basic+dns              | (http.request or tls.handshake.type eq 1 or (tcp.flags.syn eq 1 and tcp.flags.ack eq 0) or dns) and !(ssdp) |     |
| ftp                    | ftp.request.command or (ftp-data and tcp.seq eq 1)                                                          |     |
| adb-exclude-keep-alive | not ((tcp.options[0:4] eq 01:01:05:0a) or (data.data eq 00:))                                               |     |

** preference
#+name: http-preferences
| key               | value                                                                                                                                                    |
|-------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------|
| gui.column.hidden | %s,%uS                                                                                                                                                   |
| gui.column.format | "Time","%t","Source","%s","Sport","%uS","Destination","%d","Dport","%uD","Host","%Cus:http.host or tls.handshake.extensions_server_name:0:R","Info","%i" |

#+name: proxy-pref
| gui.column.format       | "No.","%m","Time","%t","Source","%uS","Protocol","%p","Host","%Cus:http.host or socks5.domain_name:0:R" |
| gui.packet_list_show    | true                                                                                                    |
| gui.toolbar_main_show   | false                                                                                                   |
| gui.filter_toolbar_show | false                                                                                                   |
| gui.byte_view_show      | false                                                                                                   |
| gui.tree_view_show      | false                                                                                                   |
| gui.statusbar_show      | false                                                                                                   |

** code
https://www.wireshark.org/docs/wsug_html_chunked/ChCustCommandLine.html
#+name: wireshark-launcher
#+begin_src elisp :var name="tmp" profile="dummy" interface="any" cfilter="" dfilter="" pref='() args='()
(cl-letf (((symbol-function 'build-filter)
           (lambda (tfilter tbl)
             (if (stringp tfilter) tfilter
               (let ((filter (alist-get (car tfilter)
                                        (org-babel-ref-resolve tbl)
                                        nil nil #'string=)))
                 (apply #'format (car filter)
                        (if (> (length tfilter) 1) (cdr tfilter)
                          (mapcar (lambda (e) (or (string-empty-p e)
                                             (eval (car (read-from-string e)))))
                                  (cdr filter)))))))))
  (let ((pref (mapcan (lambda (o) (list "-o" (format "%s:%s" (car o) (cadr o)))) pref))
        (cfilter (build-filter cfilter "capture-filters[]"))
        (dfilter (build-filter dfilter "display-filters[]")))
    (apply #'start-process (concat "wireshark-" name) nil (executable-find "wireshark") "-P" "persconf:_prefs" "-C" profile "-ki" interface "-f" cfilter "-Y" dfilter (append pref args))))
#+end_src

* lua

** plugins
:PROPERTIES:
:tangle-dir: _tangle/lua-plugins
:END:
*** port query
:PROPERTIES:
:CUSTOM_ID: 0d8189e3-d090-4ea8-a252-63630fe5926a
:END:
#+begin_src lua :tangle "port-query.lua" :mkdirp t
local port_query_proto = Proto('port_query', 'Port Query Plugin')

-- 全局变量存储窗口实例
local result_window = nil

-- 追加文本到窗口
local function append_to_window(text)
    if not gui_enabled() then 
        print(text)
        return
    end

    if result_window == nil or not result_window.window then
        result_window = {
            window = TextWindow.new('Port Query Result'),
            text = ''
        }
        -- 添加关闭回调
        result_window.window:set_atclose(function()
            result_window = nil
        end)
    end
    
    result_window.text = result_window.text .. text .. '\n'
    result_window.window:set(result_window.text)
end

-- 检查 IP 是否为本地 IP
local function check_local_ips(ip1, ip2)
    local local_ips = {}
    local is_ip1_local = false
    local is_ip2_local = false

    -- 获取本地 IP
    if os.getenv('OS') == 'Windows_NT' then
        local process = io.popen('ipconfig')
        table.insert(local_ips, Address.ip('127.0.0.1'))
        for line in process:lines() do
            -- IPv4 地址
            local ipv4 = line:match('IPv4 Address.*: ([%d%.]+)')
            if ipv4 then 
                table.insert(local_ips, Address.ip(ipv4)) 
            end
            -- IPv6 地址
            local ipv6 = line:match('IPv6 Address.*: ([%x:]+)$')
            if ipv6 then
                table.insert(local_ips, Address.ipv6(ipv6))
            end
        end
        process:close()
    else
        local process = io.popen('ip --br a show up')
        for line in process:lines() do
            -- IPv4 地址
            for ip in line:gmatch('[%d%.]+/[%d]+') do
                local base_ip = ip:match('([%d%.][%d%.]+)/')
                if base_ip then table.insert(local_ips, Address.ip(base_ip)) end
            end
            -- IPv6 地址
            for ip in line:gmatch('[%a%d:]+/[%d]+') do
                local base_ip = ip:match('([%a%d:]+)/')
                if base_ip and base_ip:match(':') then
                    table.insert(local_ips, Address.ipv6(base_ip))
                end
            end
        end
        process:close()
    end

    for _, local_ip in ipairs(local_ips) do
        if ip1 == local_ip then is_ip1_local = true end
        if ip2 == local_ip then is_ip2_local = true end
    end

    return is_ip1_local, is_ip2_local
end

-- 检测IP包的起始位置
local function get_ip_offset(finfo)
    -- 检查 0x04 位置（Windows Loopback 情况）
    local version = finfo.range(0x04, 1):bitfield(0, 4)
    if finfo.range(0,4):uint() == 0x02000000 and (version == 4 or version == 6) then
        return 0x04, version
    end

    -- 检查 0x0E 位置的版本号
    version = finfo.range(0x0e, 1):bitfield(0, 4)
    if version == 4 or version == 6 then
        return 0x0e, version
    end
end

-- 获取下一个头部和其偏移量
local function get_next_header(finfo, offset, current_header)
    local next_header = finfo.range(offset, 1):uint()
    local header_len = 0
    
    if current_header == 6 then  -- IPv6
        -- IPv6 扩展头部的长度计算
        if next_header == 0 then  -- Hop-by-hop Options
            header_len = (finfo.range(offset + 1, 1):uint() + 1) * 8
        elseif next_header == 43 then  -- Routing
            header_len = (finfo.range(offset + 1, 1):uint() + 1) * 8
        elseif next_header == 44 then  -- Fragment
            header_len = 8
        elseif next_header == 50 then  -- ESP
            header_len = 8
        elseif next_header == 51 then  -- AH
            header_len = (finfo.range(offset + 1, 1):uint() + 2) * 4
        elseif next_header == 60 then  -- Destination Options
            header_len = (finfo.range(offset + 1, 1):uint() + 1) * 8
        end
    else  -- IPv4
        -- IPv4 可选字段长度计算
        header_len = (finfo.range(offset, 1):bitfield(4, 4) * 4) - 20
    end
    
    return next_header, header_len
end

local function get_packet_info(finfo)
    local base_offset, version = get_ip_offset(finfo)
    local is_ipv6 = (version == 6)
    local protocol, src_ip, dst_ip, src_port, dst_port
    local offset = base_offset
    
    if is_ipv6 then
        -- IPv6 数据包
        offset = base_offset + 6  -- 协议字段的相对偏移量
        protocol = finfo.range(offset, 1):uint()
        src_ip = finfo.range(base_offset + 8, 16):ipv6()
        dst_ip = finfo.range(base_offset + 24, 16):ipv6()
        
        -- 处理扩展头部
        local header = protocol
        local total_ext_len = 0
        while header == 0 or header == 43 or header == 44 or header == 50 or 
              header == 51 or header == 60 do
            local next_header, header_len = get_next_header(finfo, offset, 6)
            total_ext_len = total_ext_len + header_len
            offset = offset + header_len
            header = next_header
        end
        protocol = header
        
        -- 计算传输层头部的偏移量
        local transport_offset = base_offset + 40 + total_ext_len  -- 40是IPv6固定头部长度
        src_port = finfo.range(transport_offset, 2):uint()
        dst_port = finfo.range(transport_offset + 2, 2):uint()
    else
        -- IPv4 数据包
        local header_len = finfo.range(base_offset, 1):bitfield(4, 4) * 4
        protocol = finfo.range(base_offset + 9, 1):uint()  -- 协议字段的相对偏移量
        src_ip = finfo.range(base_offset + 12, 4):ipv4()
        dst_ip = finfo.range(base_offset + 16, 4):ipv4()
        
        -- 计算传输层头部的偏移量，考虑可选字段
        local transport_offset = base_offset + header_len
        src_port = finfo.range(transport_offset, 2):uint()
        dst_port = finfo.range(transport_offset + 2, 2):uint()
    end

    return {
        src_ip = src_ip,
        dst_ip = dst_ip,
        src_port = src_port,
        dst_port = dst_port,
        protocol = (protocol == 6 and 'TCP') or (protocol == 17 and 'UDP') or nil,
        is_ipv6 = is_ipv6
    }
end

-- 执行查询并处理输出
local function query_port_program_1(port, protocol, description, ip)
    local cmd
    local is_windows = os.getenv('OS') == 'Windows_NT'
    if is_windows then
        -- Windows 命令
        local resolve_ip_opt = 'nameres.network_name'
        if get_preference(resolve_ip_opt) then
            append_to_window(string.format('\nWarn: Filter port only cause `%s` enabled.', resolve_ip_opt))
            ip = ''
        end
        cmd = string.format('FOR /F "usebackq tokens=5 delims= " %%i IN (`netstat -anop %s ^|findstr "%s:%s "`) DO @tasklist /svc /fi "pid eq %%i" | find "%%i"', protocol, ip, port)
    else
        -- Linux 命令
        cmd = string.format('lsof -i %s@%s:%d', protocol, ip, port)
    end
    
    local process = io.popen(cmd)
    local result = process:read('*a')
    process:close()
    
    local header = string.format('=== Query Result for %s %s (%s port %d) ===\n', 
                               description, ip, protocol, port)
    
    append_to_window(header .. result)
end

local function query_port_program(finfo)
    local frame = get_packet_info(finfo)
    if not frame or not frame.protocol then
        append_to_window('\nError: Invalid packet selection')
        return
    end

    local is_src_local, is_dst_local = check_local_ips(frame.src_ip, frame.dst_ip)

    if is_src_local and is_dst_local then
        query_port_program_1(frame.src_port, frame.protocol, 'Source', frame.src_ip)
        query_port_program_1(frame.dst_port, frame.protocol, 'Destination', frame.dst_ip)
    elseif is_src_local then
        query_port_program_1(frame.src_port, frame.protocol, 'Source', frame.src_ip)
    elseif is_dst_local then
        query_port_program_1(frame.dst_port, frame.protocol, 'Destination', frame.dst_ip)
    else
        append_to_window('\nError: No local IP found!')
    end
end

register_packet_menu('Query Port Program', query_port_program)
#+end_src
** scripts
:PROPERTIES:
:tangle-dir: _tangle/lua-scripts
:END:
*** socks5 proxy
:PROPERTIES:
:CUSTOM_ID: dbdca4b8-733b-4c14-a9f7-ca7e403f711a
:END:
Check which domains pass through the proxy port.
#+begin_src lua :tangle "socks5.lua" :mkdirp t :var proxy_port=(plist-get (cdr (plstore-get zr-local-pls "proxy-port")) :port)
local socks5 = Proto("socks5", "SOCKS5")

local f_socks5_domain_name = ProtoField.string("socks5.domain_name", "SOCKS5 Domain Name")

socks5.fields = {f_socks5_domain_name}

function socks5.dissector(buffer, pinfo, tree)
    if buffer:len() == 0 then return end

    if buffer(0, 4):uint() == 0x05010003 then
        local domain_len = buffer(4, 1):uint()
        if buffer:len() >= 5 + domain_len then
            local domain_name = buffer(5, domain_len):string()

            local subtree = tree:add(socks5, buffer(), "SOCKS5 Proxy Protocol")
            subtree:add(f_socks5_domain_name, buffer(5, domain_len))

            pinfo.cols.protocol = "SOCKS5"
            pinfo.cols.info:set("SOCKS5 CONNECT to " .. domain_name)
        end
    else
        Dissector.get("http"):call(buffer, pinfo, tree)
    end
end

local tcp_port = DissectorTable.get("tcp.port")
tcp_port:add(proxy_port, socks5)
#+end_src
*** http full timing analyzer
:PROPERTIES:
:CUSTOM_ID: ccf22f9f-06b8-49c2-90e8-677e80445854
:END:
#+begin_src lua :tangle (zr-org-by-tangle-dir "http_full_timing.lua")
-- ** HTTP Full Timing Analyzer **
-- Measures TOTAL time for each HTTP request including TCP/SSL handshake and file upload
-- Not support multiple HTTP requests in single TCP stream
-- Usage: 
-- For specific URI: tshark -q -n -X lua_script:http_full_timing.lua -X lua_script1:'uri=/your/uri' -r capture.pcapng
-- For all URIs: tshark -q -n -X lua_script:http_full_timing.lua -r capture.pcapng

-- Default values
local DEFAULT_URI = nil
local DEFAULT_SHOW_TCP_DETAILS = false

-- Parse command line arguments
local args = {...}
local TARGET_URI = DEFAULT_URI
local SHOW_TCP_DETAILS = DEFAULT_SHOW_TCP_DETAILS

for _, arg in ipairs(args) do
  if arg:match("^uri=") then
    TARGET_URI = arg:sub(5)
    SHOW_TCP_DETAILS = true  -- Set to true if URI is provided
  end
end

-- Safe field initialization
local function get_field(field_name)
  local ok, field = pcall(Field.new, field_name)
  return ok and field or nil
end

-- Essential fields
local tcp_stream = get_field("tcp.stream") or error("Missing tcp.stream field")
local tcp_flags = get_field("tcp.flags") or error("Missing tcp.flags field")
local ip_src = get_field("ip.src") or get_field("ipv6.src")
local ip_dst = get_field("ip.dst") or get_field("ipv6.dst")

-- HTTP/SSL fields (optional)
local http_request = get_field("http.request")
local http_request_uri = get_field("http.request.uri")
local http_response = get_field("http.response")
local http_response_in = get_field("http.response_in")
local ssl_handshake = get_field("ssl.handshake")

-- Data structures
local streams = {}       -- TCP stream information
local http_requests = {} -- Individual HTTP requests tracking
local uri_stats = {}     -- Statistics grouped by URI when analyzing all URIs

-- Main tap for TCP packets
local tap_tcp = Listener.new("tcp", "tcp")

function tap_tcp.packet(pinfo, tvb)
  local stream = tcp_stream() and tcp_stream().value
  if not stream then return end
    
  -- Initialize stream info if not exists
  if not streams[stream] then
    streams[stream] = {
      stream_id = stream,
      src = ip_src and tostring(ip_src()) or tostring(pinfo.src),
      src_port = pinfo.src_port,
      dst = ip_dst and tostring(ip_dst()) or tostring(pinfo.dst),
      dst_port = pinfo.dst_port,
      syn_time = nil,
      syn_ack_time = nil,
      ssl_handshake_complete = false,
      current_http_request = nil,
      requests = {}
    }
  end
    
  local s = streams[stream]
  local flags = tcp_flags() and tcp_flags().value or 0
    
  -- Track TCP handshake
  if (flags & 0x02) ~= 0 then  -- SYN flag
    if (flags & 0x10) == 0 then  -- SYN packet
      s.syn_time = pinfo.rel_ts
    else  -- SYN-ACK packet
      s.syn_ack_time = pinfo.rel_ts
    end
  end
    
  -- Track SSL/TLS handshake
  if ssl_handshake and ssl_handshake() then
    s.ssl_handshake_complete = true
  end
    
  -- Track HTTP requests
  if http_request and http_request() and http_request().value and http_request_uri and http_request_uri() then
    local uri = http_request_uri().value
    if TARGET_URI == nil or uri == TARGET_URI then
      local req = {
        stream_id = stream,
        request_frame = pinfo.number,
        request_time = pinfo.rel_ts,
        response_frame = nil,
        response_time = nil,
        uri = uri,
        start_time = s.syn_time or pinfo.rel_ts,  -- Fallback to request time if no SYN
        end_time = nil
      }
      table.insert(s.requests, req)
      s.current_http_request = req
      table.insert(http_requests, req)
      
      -- Initialize URI stats if not exists
      if TARGET_URI == nil and uri_stats[uri] == nil then
        uri_stats[uri] = {
          count = 0,
          total_duration = 0,
          min_duration = math.huge,
          max_duration = 0,
          requests = {}
        }
      end
    end
  end
    
  -- Track HTTP responses
  if http_response and http_response() and http_response().value then
    -- Try to match response to request using http.response_in
    local response_in = http_response_in and http_response_in()
    if response_in then
      for _, req in ipairs(s.requests) do
        if req.request_frame == response_in.value then
          req.response_frame = pinfo.number
          req.response_time = pinfo.rel_ts
          break
        end
      end
    elseif s.current_http_request and not s.current_http_request.response_frame then
      s.current_http_request.response_frame = pinfo.number
      s.current_http_request.response_time = pinfo.rel_ts
    end
  end
    
  -- Update end time for all ongoing requests in this stream
  for _, req in ipairs(s.requests) do
    if not req.response_time or pinfo.rel_ts > req.response_time then
      req.end_time = pinfo.rel_ts
      
      -- Update URI stats when request is complete
      if TARGET_URI == nil and req.start_time and req.end_time then
        local duration = req.end_time - req.start_time
        local uri = req.uri
        if uri_stats[uri] then
          uri_stats[uri].count = uri_stats[uri].count + 1
          uri_stats[uri].total_duration = uri_stats[uri].total_duration + duration
          uri_stats[uri].min_duration = math.min(uri_stats[uri].min_duration, duration)
          uri_stats[uri].max_duration = math.max(uri_stats[uri].max_duration, duration)
          table.insert(uri_stats[uri].requests, req)
        end
      end
    end
  end
end

function calculate_stats()
  local stats = {
    count = 0,
    total_duration = 0,
    avg_duration = 0,
    min_duration = math.huge,
    max_duration = 0,
    requests = {}
  }
    
  for _, req in ipairs(http_requests) do
    if req.start_time and req.end_time then
      local duration = req.end_time - req.start_time
      stats.count = stats.count + 1
      stats.total_duration = stats.total_duration + duration
      stats.min_duration = math.min(stats.min_duration, duration)
      stats.max_duration = math.max(stats.max_duration, duration)
            
      local req_stats = {
        stream_id = req.stream_id,
        duration = duration,
        request_frame = req.request_frame,
        response_frame = req.response_frame,
        tcp_handshake_time = (streams[req.stream_id].syn_ack_time and 
        (streams[req.stream_id].syn_ack_time - streams[req.stream_id].syn_time)) or 0,
        ssl_handshake = streams[req.stream_id].ssl_handshake_complete and "Yes" or "No",
        uri = req.uri
      }
      table.insert(stats.requests, req_stats)
    end
  end
    
  if stats.count > 0 then
    stats.avg_duration = stats.total_duration / stats.count
  end
    
  return stats
end

function print_uri_stats()
  print("\n=== Detailed Statistics by URI ===")
  for uri, stats in pairs(uri_stats) do
    local avg_duration = stats.count > 0 and (stats.total_duration / stats.count) or 0
    print(string.format("\nURI: %s", uri))
    print(string.format("  Total requests: %d", stats.count))
    print(string.format("  Total time (all requests): %.3f sec", stats.total_duration))
    print(string.format("  Average time per request: %.3f sec", avg_duration))
    
    -- Find min and max duration requests
    local min_req, max_req
    for _, req in ipairs(stats.requests) do
      local duration = req.end_time - req.start_time
      if not min_req or duration < (min_req.end_time - min_req.start_time) then
        min_req = req
      end
      if not max_req or duration > (max_req.end_time - max_req.start_time) then
        max_req = req
      end
    end
    
    if min_req then
      print(string.format("  Minimum request time: %.3f sec (Stream %d, Req Frame %d, Resp Frame %d)",
        min_req.end_time - min_req.start_time,
        min_req.stream_id,
        min_req.request_frame,
        min_req.response_frame or 0
      ))
    end
    
    if max_req then
      print(string.format("  Maximum request time: %.3f sec (Stream %d, Req Frame %d, Resp Frame %d)",
        max_req.end_time - max_req.start_time,
        max_req.stream_id,
        max_req.request_frame,
        max_req.response_frame or 0
      ))
    end
    
    if SHOW_TCP_DETAILS then
      for i, req in ipairs(stats.requests) do
        print(string.format(
          "  Request #%d (Stream %d) | Total: %.3f sec | TCP Handshake: %.3f sec | SSL: %s",
          i, req.stream_id, (req.end_time - req.start_time), 
          (streams[req.stream_id].syn_ack_time and 
            (streams[req.stream_id].syn_ack_time - streams[req.stream_id].syn_time)) or 0,
          streams[req.stream_id].ssl_handshake_complete and "Yes" or "No"
        ))
        print(string.format(
          "    Request frame: %d | Response frame: %d",
        req.request_frame, req.response_frame or 0
        ))
      end
    end
  end
end

function tap_tcp.draw()
  print("\n=== HTTP File Upload Timing Report (Multi-Request Support) ===")
  
  if TARGET_URI then
    -- Single URI analysis
    local stats = calculate_stats()
    print(string.format("Target URI: %s", TARGET_URI))
    print(string.format("Total requests: %d", stats.count))
    print(string.format("Total time (all requests): %.3f sec", stats.total_duration))
    if stats.count > 0 then
      print(string.format("Average time per request: %.3f sec", stats.avg_duration))
      
      -- Find min and max duration requests
      local min_req, max_req
      for _, req in ipairs(stats.requests) do
        if not min_req or req.duration < min_req.duration then
          min_req = req
        end
        if not max_req or req.duration > max_req.duration then
          max_req = req
        end
      end
      
      if min_req then
        print(string.format("Minimum request time: %.3f sec (Stream %d, Req Frame %d, Resp Frame %d)",
          min_req.duration,
          min_req.stream_id,
          min_req.request_frame,
          min_req.response_frame or 0
        ))
      end
      
      if max_req then
        print(string.format("Maximum request time: %.3f sec (Stream %d, Req Frame %d, Resp Frame %d)",
          max_req.duration,
          max_req.stream_id,
          max_req.request_frame,
          max_req.response_frame or 0
        ))
      end
    end
    
    if SHOW_TCP_DETAILS and stats.count > 0 then
      print("\n=== Detailed Request Times ===")
      for i, req in ipairs(stats.requests) do
        print(string.format(
          "\nRequest #%d (Stream %d) | Total: %.3f sec | TCP Handshake: %.3f sec | SSL: %s",
          i, req.stream_id, req.duration, req.tcp_handshake_time, req.ssl_handshake
        ))
        print(string.format(
          "  Request frame: %d | Response frame: %d",
        req.request_frame, req.response_frame or 0
        ))
      end
    end
  else
    -- All URIs analysis
    print("Target URI: ALL URIs (no filter)")
    print_uri_stats()
  end
end
#+end_src
* bat
:PROPERTIES:
:tangle-dir: _tangle/bat
:CUSTOM_ID: db3364bf-7b63-47de-86b9-18b1354153ae
:END:

** env
:PROPERTIES:
:CUSTOM_ID: 3967b0e5-dcce-4ad8-aa68-45b64ef002a8
:END:
#+begin_src bat :mkdirp t :tangle (zr-org-by-tangle-dir "env.bat") :prologue :epilogue
set BASE_DIR=%~dp0
set "CONFIG_FILE=%BASE_DIR%\config.bat"

if exist "%CONFIG_FILE%" (
  call "%CONFIG_FILE%"
)

:: 设置抓包过滤器（基于IP和端口）
if not defined filter (
  set filter=host %ip% and tcp port %port%
)

:: 设置抓包持续时间（10分钟=600秒）
if not defined duration (
  set /a duration=60 * 10
)

:: 设置每个抓包文件大小（900 MB）
if not defined filesize (
  set /a filesize=1024 * 900
)

rem 设置抓包网卡
rem 可以通过 netsh interface show interface 查看
if not defined interface (
  set interface=VPN - VPN Client
)

if not defined hostname (
  set hostname=%COMPUTERNAME%
)

rem 可在下面添加合适的路径
where dumpcap >nul 2>&1 && set dumpcap_path=dumpcap || (
    for %%d in (
        "C:\Program Files\Wireshark\dumpcap.exe"
        "D:\wireshark\dumpcap.exe"
        "D:\app\WiresharkPortable64\App\Wireshark\dumpcap.exe"
        "D:\app\wireshark\dumpcap.exe"
        "%ProgramFiles%\Wireshark\dumpcap.exe"
    ) do if exist %%d set "dumpcap_path=%%~d" && goto found
)
:found

echo %dumpcap_path% | findstr /C:"\\" >nul
if %errorlevel% equ 0 (
  for %%F in ("%dumpcap_path%") do set wireshark_dir=%%~dpF
) else (
  set wireshark_dir=
)
set "tshark_path=%wireshark_dir%tshark.exe"
set "wireshark_path=%wireshark_dir%wireshark.exe"
set "mergecap_path=%wireshark_dir%mergecap.exe"
#+end_src

#+name: parse-bat-env
#+begin_src bat :prologue :epilogue
set "ENV_FILE=%~dp0\env.bat"

if exist "%ENV_FILE%" (
  call "%ENV_FILE%"
) else (
  echo 没找到 env.bat 文件
  goto :eof
)
#+end_src

** cap
:PROPERTIES:
:CUSTOM_ID: b249be79-7d0f-4b50-9397-1c17175eb00e
:END:
#+begin_src bat :mkdirp t :tangle (zr-org-by-tangle-dir "cap.bat")
@echo off
setlocal

<<parse-bat-env>>

:: 检查IP和端口是否已设置
if not defined ip (
    echo 错误: 未指定IP地址
    goto :eof
)
if not defined port (
    echo 错误: 未指定端口
    goto :eof
)

if not defined dumpcap_path (
    echo 错误: 找不到 dumpcap.exe
    echo 请确保 Wireshark 已安装，或手动指定 dumpcap.exe 路径
    goto :eof
)

:: 获取当前时间
for /f "tokens=1-3 delims=:." %%a in ("%time%") do (
    set /a hour=%%a
    set /a minute=%%b
    set /a second=%%c
)

set pcap_name=%hostname%-%time::=-%.pcap

:: 计算总秒数并转换为小时、分钟、秒
set /a total_seconds=hour*3600 + minute*60 + second + duration

:: 计算新的小时、分钟、秒
set /a hour=total_seconds/3600 %% 24
set /a minute=(total_seconds %% 3600)/60
set /a second=total_seconds %% 60

:: 格式化时间（确保两位数显示）
if %hour% lss 10 set hour=0%hour%
if %minute% lss 10 set minute=0%minute%
if %second% lss 10 set second=0%second%

set end_time=%hour%:%minute%:%second%

echo 正在抓包: %ip%:%port%，持续 %duration% 秒...
echo 预计结束时间: %end_time%
echo 结束前可以做任何事，但暂时不要关闭该窗口
"%dumpcap_path%" -i "%interface%" -f "%filter%" -a duration:%duration% -w "%BASE_DIR%\%pcap_name%"

set CAPS_DIR=%BASE_DIR%caps
if not exist %CAPS_DIR% (
  md %CAPS_DIR%
)
set final_pcap_path=%CAPS_DIR%\%pcap_name%

move "%BASE_DIR%\%pcap_name%" "%final_pcap_path%"

powershell -command "Add-Type -AssemblyName System.Windows.Forms; $global:balloon = New-Object System.Windows.Forms.NotifyIcon; $balloon.Icon = [System.Drawing.SystemIcons]::Information; $balloon.BalloonTipIcon = [System.Windows.Forms.ToolTipIcon]::Info; $balloon.BalloonTipText = '抓包已完成，结果保存在 %final_pcap_path%'; $balloon.BalloonTipTitle = '抓包完成'; $balloon.Visible = $true; $balloon.ShowBalloonTip(5000); Start-Sleep -Seconds 5; $balloon.Dispose()"

echo 抓包完成，结果保存在 %final_pcap_path%
echo 有时间可以把该文件发给我，按任意键用资源管理器找到该文件
pause
explorer /select,%final_pcap_path%

echo 可以随时关闭该窗口
pause
endlocal
#+end_src

** ring
:PROPERTIES:
:CUSTOM_ID: 022803ac-a59b-4a28-8216-1177a91df368
:END:
#+begin_src bat :tangle (zr-org-by-tangle-dir "ring.bat")
@echo off
<<parse-bat-env>>

set dir=ring
if not exist %dir% (
  md %dir%
)
"%dumpcap_path%" -i "%interface%" -f "%filter%" -b filesize:%filesize% -w "%dir%\%hostname%.pcap"
pause
#+end_src

** parse
:PROPERTIES:
:CUSTOM_ID: 16cba8ab-2fba-477b-ad4e-f30b37a497fb
:END:
#+begin_src bat :tangle (zr-org-by-tangle-dir "parse.bat")
@echo off
<<parse-bat-env>>

setlocal enabledelayedexpansion

set "file_list="
set "file_count=0"
set "uri="

:: 处理所有参数
:process_args
if "%~1"=="" goto :args_done

:: 检查参数是否以/开头
set "arg=%~1"
if "!arg:~0,1!"=="/" (
    set "uri=!arg!"
) else (
    if %file_count%==0 (
        set file_list="!arg!"
    ) else (
        set "file_list=!file_list! "!arg!""
    )
    set /a file_count=%file_count% + 1
)

shift
goto :process_args

:args_done

:: 检查是否找到文件参数
if not defined file_list (
    echo 错误：未提供任何输入文件
    pause
    exit /b 1
)

if %file_count% gtr 1 (
  set readfile=merged.pcap
  echo merge files: !file_list!
  %mergecap_path% -w "!readfile!" !file_list!
) else (
  set readfile=!file_list!
)

set args="%readfile%"
if not "!uri!"=="" (
  set args=%args% -X "lua_script1:uri=%uri%"
)

"%tshark_path%" -qnX "lua_script:%BASE_DIR%\http_full_timing.lua" -r %args%

:examine-stream
set /p "input=stream no (input 'q' to exit): "

REM 检查用户是否输入 q 退出
if "%input%"=="q" (
    goto exit
)

REM 检查输入是否为数字（简单验证）
echo %input%| findstr /r "^[0-9][0-9]*$" >nul
if errorlevel 1 (
    echo not a valid number, input again please.
    goto examine-stream
)

"%wireshark_path%" -r "%readfile%" -Y "tcp.stream eq %input%"

REM 继续循环
goto examine-stream

:exit
pause

endlocal
#+end_src

* local variables

# Local Variables:
# buffer-auto-save-file-name: nil
# End:
