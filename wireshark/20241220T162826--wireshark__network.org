#+title:      wireshark
#+date:       [2024-12-20 Fri 16:28]
#+filetags:   :network:
#+identifier: 20241220T162826

* tangle
#+begin_src elisp
(org-decrypt-entries)
(let ((zr-local-pls (plstore-open "wireshark.pls"))
      org-babel-pre-tangle-hook
      org-confirm-babel-evaluate)
  (plstore-close zr-local-pls)
  (org-babel-tangle nil nil "^lua$")
  (let ((coding-system-for-write 'cp936-dos))
    (org-babel-tangle nil nil "^bat$")))

(mkdir "_prefs/profiles/dummy" t)

(let ((lua-dir (pcase system-type
                 ('gnu/linux (expand-file-name "~/.local/lib/wireshark/plugins"))
                 ('windows-nt (expand-file-name "plugins" (getenv "WIRESHARK_DATA_DIR"))))))
  (make-symbolic-link (expand-file-name "_tangle/lua-plugins") lua-dir t))

(org-babel-remove-result-one-or-many '(4))
(save-buffer)
#+end_src

* launcher
#+name: cap-proxy
#+call: wireshark-launcher[](name="proxies", interface=(if (eq system-type 'gnu/linux) "lo" "\\Device\\NPF_Loopback"), cfilter='("proxies"), pref=proxy-pref[], args='("-SX" "lua_script:_tangle/lua-scripts/socks5.lua" "-t" "a" "-n" "--only-protocols" "frame,eth,ip,tcp,http,socks5"))[]

** arguments
*** only-protocols
双击 frame 后在弹窗的各层协议右键，移动鼠标到 "apply as filter" 查看各层协议名。

** filters

*** capture
https://wiki.wireshark.org/CaptureFilters
#+name: capture-filters
| name         | filter                                                                                                                                                                               | arg                                                             |
|--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------|
| proxies      | dst port %s && (tcp[(((tcp[12:1] & 0xf0) >> 2)) + 0:4] = 0x05010003) or (tcp[(((tcp[12:1] & 0xf0) >> 2)) + 0:4] = 0x434f4e4e && tcp[(((tcp[12:1] & 0xf0) >> 2)) + 4:4] = 0x45435420) | (plist-get (cdr (plstore-get zr-local-pls "proxy-port")) :port) |
| socks5-proxy | dst port %s && (tcp[(((tcp[12:1] & 0xf0) >> 2)) + 0:4] = 0x05010003)                                                                                                                 | (plist-get (cdr (plstore-get zr-local-pls "proxy-port")) :port) |
| http-proxy   | dst port %s && (tcp[(((tcp[12:1] & 0xf0) >> 2)) + 0:4] = 0x434f4e4e && tcp[(((tcp[12:1] & 0xf0) >> 2)) + 4:4] = 0x45435420)                                                          | (plist-get (cdr (plstore-get zr-local-pls "proxy-port")) :port) |

*** display
https://wiki.wireshark.org/DisplayFilters
https://unit42.paloaltonetworks.com/using-wireshark-display-filter-expressions/
#+name: display-filters
| name                   | filter                                                                                                      | arg |
|------------------------+-------------------------------------------------------------------------------------------------------------+-----|
| basic                  | (http.request or tls.handshake.type eq 1) and !(ssdp)                                                       |     |
| basic+                 | (http.request or tls.handshake.type eq 1 or (tcp.flags.syn eq 1 and tcp.flags.ack eq 0)) and !(ssdp)        |     |
| basic+dns              | (http.request or tls.handshake.type eq 1 or (tcp.flags.syn eq 1 and tcp.flags.ack eq 0) or dns) and !(ssdp) |     |
| ftp                    | ftp.request.command or (ftp-data and tcp.seq eq 1)                                                          |     |
| adb-exclude-keep-alive | not ((tcp.options[0:4] eq 01:01:05:0a) or (data.data eq 00:))                                               |     |

** preference
#+name: http-preferences
| key               | value                                                                                                                                                    |
|-------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------|
| gui.column.hidden | %s,%uS                                                                                                                                                   |
| gui.column.format | "Time","%t","Source","%s","Sport","%uS","Destination","%d","Dport","%uD","Host","%Cus:http.host or tls.handshake.extensions_server_name:0:R","Info","%i" |

#+name: proxy-pref
| gui.column.format       | "No.","%m","Time","%t","Source","%uS","Protocol","%p","Host","%Cus:http.host or socks5.domain_name:0:R" |
| gui.packet_list_show    | true                                                                                                    |
| gui.toolbar_main_show   | false                                                                                                   |
| gui.filter_toolbar_show | false                                                                                                   |
| gui.byte_view_show      | false                                                                                                   |
| gui.tree_view_show      | false                                                                                                   |
| gui.statusbar_show      | false                                                                                                   |

** code
https://www.wireshark.org/docs/wsug_html_chunked/ChCustCommandLine.html
#+name: wireshark-launcher
#+begin_src elisp :var name="tmp" profile="dummy" interface="any" cfilter="" dfilter="" pref='() args='()
(cl-letf (((symbol-function 'build-filter)
           (lambda (tfilter tbl)
             (if (stringp tfilter) tfilter
               (let ((filter (alist-get (car tfilter)
                                        (org-babel-ref-resolve tbl)
                                        nil nil #'string=)))
                 (apply #'format (car filter)
                        (if (> (length tfilter) 1) (cdr tfilter)
                          (mapcar (lambda (e) (or (string-empty-p e)
                                             (eval (car (read-from-string e)))))
                                  (cdr filter)))))))))
  (let ((pref (mapcan (lambda (o) (list "-o" (format "%s:%s" (car o) (cadr o)))) pref))
        (cfilter (build-filter cfilter "capture-filters[]"))
        (dfilter (build-filter dfilter "display-filters[]")))
    (apply #'start-process (concat "wireshark-" name) nil (executable-find "wireshark") "-P" "persconf:_prefs" "-C" profile "-ki" interface "-f" cfilter "-Y" dfilter (append pref args))))
#+end_src

* lua

** plugins
:PROPERTIES:
:tangle-dir: _tangle/lua-plugins
:END:
*** port query
:PROPERTIES:
:CUSTOM_ID: 0d8189e3-d090-4ea8-a252-63630fe5926a
:END:
#+begin_src lua :tangle "port-query.lua" :mkdirp t
local port_query_proto = Proto('port_query', 'Port Query Plugin')

-- 全局变量存储窗口实例
local result_window = nil

-- 追加文本到窗口
local function append_to_window(text)
    if not gui_enabled() then 
        print(text)
        return
    end

    if result_window == nil or not result_window.window then
        result_window = {
            window = TextWindow.new('Port Query Result'),
            text = ''
        }
        -- 添加关闭回调
        result_window.window:set_atclose(function()
            result_window = nil
        end)
    end
    
    result_window.text = result_window.text .. text .. '\n'
    result_window.window:set(result_window.text)
end

-- 检查 IP 是否为本地 IP
local function check_local_ips(ip1, ip2)
    local local_ips = {}
    local is_ip1_local = false
    local is_ip2_local = false

    -- 获取本地 IP
    if os.getenv('OS') == 'Windows_NT' then
        local process = io.popen('ipconfig')
        table.insert(local_ips, Address.ip('127.0.0.1'))
        for line in process:lines() do
            -- IPv4 地址
            local ipv4 = line:match('IPv4 Address.*: ([%d%.]+)')
            if ipv4 then 
                table.insert(local_ips, Address.ip(ipv4)) 
            end
            -- IPv6 地址
            local ipv6 = line:match('IPv6 Address.*: ([%x:]+)$')
            if ipv6 then
                table.insert(local_ips, Address.ipv6(ipv6))
            end
        end
        process:close()
    else
        local process = io.popen('ip --br a show up')
        for line in process:lines() do
            -- IPv4 地址
            for ip in line:gmatch('[%d%.]+/[%d]+') do
                local base_ip = ip:match('([%d%.][%d%.]+)/')
                if base_ip then table.insert(local_ips, Address.ip(base_ip)) end
            end
            -- IPv6 地址
            for ip in line:gmatch('[%a%d:]+/[%d]+') do
                local base_ip = ip:match('([%a%d:]+)/')
                if base_ip and base_ip:match(':') then
                    table.insert(local_ips, Address.ipv6(base_ip))
                end
            end
        end
        process:close()
    end

    for _, local_ip in ipairs(local_ips) do
        if ip1 == local_ip then is_ip1_local = true end
        if ip2 == local_ip then is_ip2_local = true end
    end

    return is_ip1_local, is_ip2_local
end

-- 检测IP包的起始位置
local function get_ip_offset(finfo)
    -- 检查 0x04 位置（Windows Loopback 情况）
    local version = finfo.range(0x04, 1):bitfield(0, 4)
    if finfo.range(0,4):uint() == 0x02000000 and (version == 4 or version == 6) then
        return 0x04, version
    end

    -- 检查 0x0E 位置的版本号
    version = finfo.range(0x0e, 1):bitfield(0, 4)
    if version == 4 or version == 6 then
        return 0x0e, version
    end
end

-- 获取下一个头部和其偏移量
local function get_next_header(finfo, offset, current_header)
    local next_header = finfo.range(offset, 1):uint()
    local header_len = 0
    
    if current_header == 6 then  -- IPv6
        -- IPv6 扩展头部的长度计算
        if next_header == 0 then  -- Hop-by-hop Options
            header_len = (finfo.range(offset + 1, 1):uint() + 1) * 8
        elseif next_header == 43 then  -- Routing
            header_len = (finfo.range(offset + 1, 1):uint() + 1) * 8
        elseif next_header == 44 then  -- Fragment
            header_len = 8
        elseif next_header == 50 then  -- ESP
            header_len = 8
        elseif next_header == 51 then  -- AH
            header_len = (finfo.range(offset + 1, 1):uint() + 2) * 4
        elseif next_header == 60 then  -- Destination Options
            header_len = (finfo.range(offset + 1, 1):uint() + 1) * 8
        end
    else  -- IPv4
        -- IPv4 可选字段长度计算
        header_len = (finfo.range(offset, 1):bitfield(4, 4) * 4) - 20
    end
    
    return next_header, header_len
end

local function get_packet_info(finfo)
    local base_offset, version = get_ip_offset(finfo)
    local is_ipv6 = (version == 6)
    local protocol, src_ip, dst_ip, src_port, dst_port
    local offset = base_offset
    
    if is_ipv6 then
        -- IPv6 数据包
        offset = base_offset + 6  -- 协议字段的相对偏移量
        protocol = finfo.range(offset, 1):uint()
        src_ip = finfo.range(base_offset + 8, 16):ipv6()
        dst_ip = finfo.range(base_offset + 24, 16):ipv6()
        
        -- 处理扩展头部
        local header = protocol
        local total_ext_len = 0
        while header == 0 or header == 43 or header == 44 or header == 50 or 
              header == 51 or header == 60 do
            local next_header, header_len = get_next_header(finfo, offset, 6)
            total_ext_len = total_ext_len + header_len
            offset = offset + header_len
            header = next_header
        end
        protocol = header
        
        -- 计算传输层头部的偏移量
        local transport_offset = base_offset + 40 + total_ext_len  -- 40是IPv6固定头部长度
        src_port = finfo.range(transport_offset, 2):uint()
        dst_port = finfo.range(transport_offset + 2, 2):uint()
    else
        -- IPv4 数据包
        local header_len = finfo.range(base_offset, 1):bitfield(4, 4) * 4
        protocol = finfo.range(base_offset + 9, 1):uint()  -- 协议字段的相对偏移量
        src_ip = finfo.range(base_offset + 12, 4):ipv4()
        dst_ip = finfo.range(base_offset + 16, 4):ipv4()
        
        -- 计算传输层头部的偏移量，考虑可选字段
        local transport_offset = base_offset + header_len
        src_port = finfo.range(transport_offset, 2):uint()
        dst_port = finfo.range(transport_offset + 2, 2):uint()
    end

    return {
        src_ip = src_ip,
        dst_ip = dst_ip,
        src_port = src_port,
        dst_port = dst_port,
        protocol = (protocol == 6 and 'TCP') or (protocol == 17 and 'UDP') or nil,
        is_ipv6 = is_ipv6
    }
end

-- 执行查询并处理输出
local function query_port_program_1(port, protocol, description, ip)
    local cmd
    local is_windows = os.getenv('OS') == 'Windows_NT'
    if is_windows then
        -- Windows 命令
        local resolve_ip_opt = 'nameres.network_name'
        if get_preference(resolve_ip_opt) then
            append_to_window(string.format('\nWarn: Filter port only cause `%s` enabled.', resolve_ip_opt))
            ip = ''
        end
        cmd = string.format('FOR /F "usebackq tokens=5 delims= " %%i IN (`netstat -anop %s ^|findstr "%s:%s "`) DO @tasklist /svc /fi "pid eq %%i" | find "%%i"', protocol, ip, port)
    else
        -- Linux 命令
        cmd = string.format('lsof -i %s@%s:%d', protocol, ip, port)
    end
    
    local process = io.popen(cmd)
    local result = process:read('*a')
    process:close()
    
    local header = string.format('=== Query Result for %s %s (%s port %d) ===\n', 
                               description, ip, protocol, port)
    
    append_to_window(header .. result)
end

local function query_port_program(finfo)
    local frame = get_packet_info(finfo)
    if not frame or not frame.protocol then
        append_to_window('\nError: Invalid packet selection')
        return
    end

    local is_src_local, is_dst_local = check_local_ips(frame.src_ip, frame.dst_ip)

    if is_src_local and is_dst_local then
        query_port_program_1(frame.src_port, frame.protocol, 'Source', frame.src_ip)
        query_port_program_1(frame.dst_port, frame.protocol, 'Destination', frame.dst_ip)
    elseif is_src_local then
        query_port_program_1(frame.src_port, frame.protocol, 'Source', frame.src_ip)
    elseif is_dst_local then
        query_port_program_1(frame.dst_port, frame.protocol, 'Destination', frame.dst_ip)
    else
        append_to_window('\nError: No local IP found!')
    end
end

register_packet_menu('Query Port Program', query_port_program)
#+end_src
** scripts
:PROPERTIES:
:tangle-dir: _tangle/lua-scripts
:END:
*** socks5 proxy
:PROPERTIES:
:CUSTOM_ID: dbdca4b8-733b-4c14-a9f7-ca7e403f711a
:END:
Check which domains pass through the proxy port.
#+begin_src lua :tangle "socks5.lua" :mkdirp t :var proxy_port=(plist-get (cdr (plstore-get zr-local-pls "proxy-port")) :port)
local socks5 = Proto("socks5", "SOCKS5")

local f_socks5_domain_name = ProtoField.string("socks5.domain_name", "SOCKS5 Domain Name")

socks5.fields = {f_socks5_domain_name}

function socks5.dissector(buffer, pinfo, tree)
    if buffer:len() == 0 then return end

    if buffer(0, 4):uint() == 0x05010003 then
        local domain_len = buffer(4, 1):uint()
        if buffer:len() >= 5 + domain_len then
            local domain_name = buffer(5, domain_len):string()

            local subtree = tree:add(socks5, buffer(), "SOCKS5 Proxy Protocol")
            subtree:add(f_socks5_domain_name, buffer(5, domain_len))

            pinfo.cols.protocol = "SOCKS5"
            pinfo.cols.info:set("SOCKS5 CONNECT to " .. domain_name)
        end
    else
        Dissector.get("http"):call(buffer, pinfo, tree)
    end
end

local tcp_port = DissectorTable.get("tcp.port")
tcp_port:add(proxy_port, socks5)
#+end_src

* bat
:PROPERTIES:
:tangle-dir: _tangle/bat
:CUSTOM_ID: db3364bf-7b63-47de-86b9-18b1354153ae
:END:

** env
:PROPERTIES:
:CUSTOM_ID: 3967b0e5-dcce-4ad8-aa68-45b64ef002a8
:END:
#+begin_src bat :mkdirp t :tangle (zr-org-by-tangle-dir "env.bat") :prologue :epilogue
set BASE_DIR=%~dp0
set "CONFIG_FILE=%BASE_DIR%\config.bat"

if exist "%CONFIG_FILE%" (
  call "%CONFIG_FILE%"
)

:: 设置抓包过滤器（基于IP和端口）
if not defined filter (
  set filter=host %ip% and tcp port %port%
)

:: 设置抓包持续时间（10分钟=600秒）
if not defined duration (
  set /a duration=60 * 10
)

:: 设置每个抓包文件大小（900 MB）
if not defined filesize (
  set /a filesize=1024 * 900
)

rem 设置抓包网卡
rem 可以通过 netsh interface show interface 查看
if not defined interface (
  set interface=VPN - VPN Client
)

if not defined hostname (
  set hostname=%COMPUTERNAME%
)

rem 可在下面添加合适的路径
where dumpcap >nul 2>&1 && set dumpcap_path=dumpcap || (
    for %%d in (
        "C:\Program Files\Wireshark\dumpcap.exe"
        "D:\wireshark\dumpcap.exe"
        "D:\app\WiresharkPortable64\App\Wireshark\dumpcap.exe"
        "D:\app\wireshark\dumpcap.exe"
        "%ProgramFiles%\Wireshark\dumpcap.exe"
    ) do if exist %%d set "dumpcap_path=%%~d" && goto found
)
:found
#+end_src

#+name: parse-bat-env
#+begin_src bat :prologue :epilogue
set "ENV_FILE=%~dp0\env.bat"

if exist "%ENV_FILE%" (
  call "%ENV_FILE%"
) else (
  echo 没找到 env.bat 文件
  goto :eof
)
#+end_src

** cap
:PROPERTIES:
:CUSTOM_ID: b249be79-7d0f-4b50-9397-1c17175eb00e
:END:
#+begin_src bat :mkdirp t :tangle (zr-org-by-tangle-dir "cap.bat")
@echo off
setlocal

<<parse-bat-env>>

:: 检查IP和端口是否已设置
if not defined ip (
    echo 错误: 未指定IP地址
    goto :eof
)
if not defined port (
    echo 错误: 未指定端口
    goto :eof
)

if not defined dumpcap_path (
    echo 错误: 找不到 dumpcap.exe
    echo 请确保 Wireshark 已安装，或手动指定 dumpcap.exe 路径
    goto :eof
)

:: 获取当前时间
for /f "tokens=1-3 delims=:." %%a in ("%time%") do (
    set /a hour=%%a
    set /a minute=%%b
    set /a second=%%c
)

set pcap_name=%hostname%-%time::=-%.pcap

:: 计算总秒数并转换为小时、分钟、秒
set /a total_seconds=hour*3600 + minute*60 + second + duration

:: 计算新的小时、分钟、秒
set /a hour=total_seconds/3600 %% 24
set /a minute=(total_seconds %% 3600)/60
set /a second=total_seconds %% 60

:: 格式化时间（确保两位数显示）
if %hour% lss 10 set hour=0%hour%
if %minute% lss 10 set minute=0%minute%
if %second% lss 10 set second=0%second%

set end_time=%hour%:%minute%:%second%

echo 正在抓包: %ip%:%port%，持续 %duration% 秒...
echo 预计结束时间: %end_time%
echo 结束前可以做任何事，但暂时不要关闭该窗口
"%dumpcap_path%" -i "%interface%" -f "%filter%" -a duration:%duration% -w "%BASE_DIR%\%pcap_name%"

set CAPS_DIR=%BASE_DIR%caps
if not exist %CAPS_DIR% (
  md %CAPS_DIR%
)
set final_pcap_path=%CAPS_DIR%\%pcap_name%

move "%BASE_DIR%\%pcap_name%" "%final_pcap_path%"

powershell -command "Add-Type -AssemblyName System.Windows.Forms; $global:balloon = New-Object System.Windows.Forms.NotifyIcon; $balloon.Icon = [System.Drawing.SystemIcons]::Information; $balloon.BalloonTipIcon = [System.Windows.Forms.ToolTipIcon]::Info; $balloon.BalloonTipText = '抓包已完成，结果保存在 %final_pcap_path%'; $balloon.BalloonTipTitle = '抓包完成'; $balloon.Visible = $true; $balloon.ShowBalloonTip(5000); Start-Sleep -Seconds 5; $balloon.Dispose()"

echo 抓包完成，结果保存在 %final_pcap_path%
echo 有时间可以把该文件发给我，按任意键用资源管理器找到该文件
pause
explorer /select,%final_pcap_path%

echo 可以随时关闭该窗口
pause
endlocal
#+end_src

** ring
:PROPERTIES:
:CUSTOM_ID: 022803ac-a59b-4a28-8216-1177a91df368
:END:
#+begin_src bat :tangle (zr-org-by-tangle-dir "ring.bat")
<<parse-bat-env>>

set dir=ring
if not exist %dir% (
  md %dir%
)
"%dumpcap_path%" -i "%interface%" -f "%filter%" -b filesize:%filesize% -w "%dir%\%hostname%.pcap"
pause
#+end_src

* local variables

# Local Variables:
# buffer-auto-save-file-name: nil
# End:
