#+title:      caddy
#+date:       [2025-10-01 Wed 00:49]
#+filetags:   :server:
#+identifier: 20251001T004952

* tangle
#+header: :var curl-args='("-xsocks5h://127.0.0.1:10807")
#+begin_src elisp tangle
(let* ((name (pcase system-type
               ('windows-nt "windows-amd64")
               ('android "linux-arm64")
               ('gnu/linux "linux-amd64")))
       (zr-local-pls (plstore-open "caddy.pls"))
       (local-conf-dir (expand-file-name "_local"))
       (tangle-dir (expand-file-name "_tangle/"))
       (bin-dir (pcase system-type
                  ('windows-nt (substitute-in-file-name "$userprofile/.local/bin/"))
                  ('android (expand-file-name "usr/bin/" zr-termux-root-directory))
                  ('gnu/linux tangle-dir)))
       (url (format "https://github.com/kkkykin/custom-caddy/releases/latest/download/caddy-%s.tar.gz" name)))
  (mkdir tangle-dir t)
  (mkdir bin-dir t)
  (call-process-shell-command
   (format "curl -sSL --etag-compare _etag.txt --etag-save _etag.txt %s %s | tar -xzf - -C %s"
           (mapconcat #'shell-quote-argument curl-args " ")
           (shell-quote-argument url)
           (shell-quote-argument tangle-dir))
   nil 0)
  (when-let* (((not (string= tangle-dir bin-dir)))
              (exec-path (list tangle-dir))
              (caddy-path (executable-find "caddy")))
    (make-symbolic-link caddy-path bin-dir t))
  (dolist (sub '("subpath" "global" "l4" "snippets"))
    (let ((sub-dir (expand-file-name sub local-conf-dir)))
      (mkdir sub-dir t)
      (write-region "# placeholder" nil
                    (expand-file-name "_placeholder.Caddyfile" sub-dir))))
  (org-babel-tangle))
#+end_src

* env
:PROPERTIES:
:CUSTOM_ID: 799e1881-69a9-45e3-ab2d-05b6a0ea8d80
:END:
#+header: :var localpath=(concat local-conf-dir)
#+header: :var mainpath=(expand-file-name "main" tangle-dir)
#+header: :var listen=(if (eq 'android system-type) "6680" "80")
#+begin_src org :tangle (zr-org-by-tangle-dir "env")
LISTEN=$listen
LOCALPATH=$localpath
MAINPATH=$mainpath
#+end_src
* config
:PROPERTIES:
:header-args:caddy: :mkdirp t
:CUSTOM_ID: 54b08ed4-dcf7-4fe4-86e4-742d9bdc42d4
:END:

#+begin_src caddy :tangle (zr-org-by-tangle-dir "Caddyfile")
{
    import {$LOCALPATH}/global/*
    import {$MAINPATH}/global/*
}

import {$LOCALPATH}/snippets/*
import {$MAINPATH}/snippets/*

:{$LISTEN} {
    import {$MAINPATH}/subpath/*
    import {$LOCALPATH}/subpath/*
}
#+end_src
** main
:PROPERTIES:
:CUSTOM_ID: 5297ab0f-3f8b-4b59-b5af-c29366d57a64
:END:
*** global
:PROPERTIES:
:tangle-dir: _tangle/main/global
:CUSTOM_ID: 87e8d3b9-696c-4dc0-b041-6ab479876b29
:END:
#+begin_src caddy :tangle (zr-org-by-tangle-dir "misc.Caddyfile")
order aria2_middleware before reverse_proxy
auto_https disable_redirects
#+end_src

#+begin_src caddy :tangle (zr-org-by-tangle-dir "l4.Caddyfile")
layer4 {
    :1{$LISTEN} {
        import {$LOCALPATH}/l4/*
    }
}
#+end_src

*** snippets
:PROPERTIES:
:tangle-dir: _tangle/main/snippets
:END:
**** load balance
:PROPERTIES:
:CUSTOM_ID: 072fe3c4-fc1a-44e0-8ccc-64a9630ca915
:END:
#+begin_src caddy :tangle (zr-org-by-tangle-dir "lb.Caddyfile")
(common_lb) {
    {block}
    # 1) 负载均衡：首选 least_conn（资源最闲节点），
    #    如果所有节点都满了就退回 random，保证一定能选出节点。
    lb_policy least_conn {
        fallback random
    }

    # 2) Passive Health-Check —— 关键三行
    fail_duration          30s     # 30 秒内出现失败记录都视为“污点”
    max_fails              3       # 连续 3 次失败才踢掉（避免偶发抖动）
    unhealthy_latency      2s      # 响应超过 2s 也算一次失败

    # 3) 重试（配合健康检测才有意义）
    lb_retries             2       # 最多重试 2 次
    lb_try_duration        5s      # 整体等待上限 5s
    lb_try_interval        200ms   # 每次重试间隔
}

(slow_lb) {
    {blocks.main}
    # 1. 负载均衡：轮询，简单公平
    lb_policy round_robin

    # 2. 被动健康检查 —— 放大版
    fail_duration          120s
    max_fails              2
    unhealthy_latency      18s
    unhealthy_status       3xx 4xx 5xx

    # 3. 重试
    lb_try_duration        {args[0]}
    lb_retry_match         method GET HEAD

    # 4. 传输超时放大
    transport http {
        {blocks.transport}
        dial_timeout                3s
        response_header_timeout     15s
        read_timeout                20s
        write_timeout               20s
    }
}
#+end_src

**** cors
:PROPERTIES:
:CUSTOM_ID: b90c38da-1fce-4fef-8f9f-6414994fd6ea
:END:
#+begin_src caddy :tangle (zr-org-by-tangle-dir "cors.Caddyfile")
(cors) {
    map {header.Origin} {cors_ok} {
        {blocks.map}
        default                     0
    }
    @corsPreflight {
        method OPTIONS
        expression `{cors_ok} == "1"`
    }
    @allowed {
        expression `{cors_ok} == "1"`
        {blocks.allow}
    }

    handle @corsPreflight {
        header {
            Access-Control-Allow-Origin "{header.Origin}"
            Access-Control-Allow-Methods "{args[0]}"
            Access-Control-Allow-Headers "{args[1]}"
            Access-Control-Allow-Credentials "true"
            Vary "Origin"
        }
        respond "" 204
    }

    handle @allowed {
        header {
            Access-Control-Allow-Origin "{header.Origin}"
            Access-Control-Allow-Credentials "true"
            Vary "Origin"
        }
    }
}
#+end_src

** subpath
:PROPERTIES:
:tangle-dir: _tangle/main/subpath
:END:

*** mpv
:PROPERTIES:
:CUSTOM_ID: 54913f3d-72e8-45ba-b9fe-8b9bb6599582
:END:
#+begin_src caddy :mkdirp t :tangle (zr-org-by-tangle-dir "mpv.Caddyfile")
basic_auth /mpv/ {
    mpv $2a$14$ZCw3mfpECp3awIyQNk33.eTTs/DTr3Hkle8dXzGQ7IT.sE48UA/3S
}
route /mpv/ {
    import cors "POST, OPTIONS" "Content-Type, Authorization, Origin" {
        map {
            <<cors-map()>>
        }
        allow {
            client_ip 127.0.0.1/32
            method POST
            header Content-Type application/json
        }
    }
    exec @allowed {
        command mpv
        args --playlist=- --terminal=no --input-ipc-server=\\.\pipe\mpv-caddy
    }
}
#+end_src

*** browse-url
:PROPERTIES:
:CUSTOM_ID: 96e9671c-2992-4c32-94e9-435f82f60950
:END:
#+begin_src caddy :mkdirp t :tangle (zr-org-by-tangle-dir "browse-url.Caddyfile")
basic_auth /browse-url/ {
    browse $2a$14$fDztUDUJKeJtmvWWYlD2Vuvtsdn.9/HsF/V.YkdYMItdnepA31JZC
}
route /browse-url/ {
    import cors "GET, OPTIONS" "Authorization, Origin, url" {
        map {
            <<cors-map(cors="browse-url-cors")>>
        }
        allow {
            client_ip 127.0.0.1/32
            header url http*
            method GET
        }
    }
    exec @allowed {
        command explorer
        args "{header.url}"
    }
}
#+end_src

*** rsshub
:PROPERTIES:
:CUSTOM_ID: cc962bac-3d8f-428e-b0ce-b31541933960
:END:
#+begin_src caddy :mkdirp t :tangle (zr-org-by-tangle-dir "rsshub.Caddyfile")
handle_path /rsshub/* {
    reverse_proxy <<rsshub-upstreams()>> https://rsshub-vercel-rss3.vercel.app https://rsshub-vercel-wine.vercel.app {
        header_up Host {upstream_hostport}
        header_up -X-Forwarded-*
        header_up -via

        import slow_lb 120s {
            main {
                health_uri      /healthz
                health_interval 5m
                health_body     ok
            }
            transport {
                network_proxy url http://127.0.0.1:10807
            }
        }
    }
}
#+end_src

*** aria2
:PROPERTIES:
:CUSTOM_ID: c88e06a5-88ea-4ebf-934a-9a9b5be4e002
:END:
#+begin_src caddy :mkdirp t :tangle (zr-org-by-tangle-dir "aria2.Caddyfile")
handle_path /aria2-jsonrpc {
    aria2_middleware {
        upstream http://127.0.0.1:6800/jsonrpc
        transform_uri ^https://pixeldrain\.com/(.*) "$0" "https://habitica-assets.kkky.eu.org/$0"
        add_server_option ^https?://[^/]+\.baidu(?:pcs)?\.com/file/ max-connection-per-server 2
        add_server_option ^https://[^/]+\.mypikpak\.com/ max-connection-per-server 2
        add_server_option ^https://pixeldrain\.com/ max-connection-per-server 1
    }
}
#+end_src

* helper
** rsshub
#+name: rsshub-public-instance
#+begin_src elisp
(require 'dom)
(let* ((url-proxy-locator (lambda (&rest _) "PROXY 127.0.0.1:10807"))
       (page (org-file-contents "https://docs.rsshub.app/guide/instances")))
  (with-temp-buffer
    (insert page)
    (let* ((html  (libxml-parse-html-region (point-min) (point-max)))
           ;; 拿到页面里全部 tbody
           (tbodies (dom-by-tag html 'tbody))
           urls)
      (dolist (tbody tbodies)
        (dolist (tr (dom-by-tag tbody 'tr))
          ;; 每行第一个 <td>
          (when-let* ((first-td (car (dom-by-tag tr 'td)))
                      (a        (car (dom-by-tag first-td 'a)))
                      (href     (dom-attr a 'href)))
            (when (string-match-p "^https?://[^/]+/?$" href)
              (push href urls)))))
      urls)))
#+end_src

#+name: rsshub-upstreams
#+begin_src elisp :var urls=rsshub-public-instance()
(mapconcat (lambda (s) (replace-regexp-in-string "^\\(https?://[^/]+\\).*" "\\1" s)) urls " ")
#+end_src

#+name: rsshub-map
#+begin_src elisp :var urls=rsshub-public-instance()
(mapconcat
 (lambda (s)
   (let* ((url (url-generic-parse-url s))
          (filename (url-filename url))
          (host (url-host url))
          (port (url-port url)))
     (unless (member filename '("/" ""))
       (format "%s %s \"\""
               (if (member (cons (url-type url) port)
                           '(("https" . 443)
                             ("http" . 80)))
                   host
                 (format "%s:%s" host port))
               filename))))
 urls "\n")
#+end_src
** cors
#+name: cors-map
#+begin_src elisp :var cors="mpv-cors"
(mapconcat (lambda (s) (format "%s 1" s)) (plist-get (cdr (plstore-get zr-local-pls cors)) :cors) "\n")
#+end_src
