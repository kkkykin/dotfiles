#+title:      bash
#+date:       [2024-12-30 Mon 15:30]
#+filetags:   :linux:
#+identifier: 20241230T153038
#+property: header-args :mkdirp t

* tangle
#+begin_src elisp
(org-babel-tangle)

(let ((rc (expand-file-name "home/.bashrc" zr-termux-root-directory)))
  (unless (file-symlink-p rc)
    (rename-file rc (concat rc ".bak")))
  (make-symbolic-link (expand-file-name "_tangle/rc/general") rc t))
#+end_src

* rc
:PROPERTIES:
:tangle-dir: _tangle/rc
:END:
** general
:PROPERTIES:
:header-args:sh: :tangle (zr-org-by-tangle-dir "general")
:END:

*** non-interactive

**** gpg
#+begin_src sh
SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
export SSH_AUTH_SOCK
#+end_src

**** smb
#+begin_src sh
check_smb_connection() {
  local uri=$1
  curl "$uri" -m1 >/dev/null 2>&1
  [ $? -eq 67 ]
}
#+end_src

**** rclone
#+begin_src sh
rclone_sync_dir() {
  local parent=$1
  local file=$2
  local remote=$3
  env -C "$parent" rclone bisync \
    --remove-empty-dirs \
    --conflict-resolve newer \
    "$file" "$remote"
}
#+end_src

**** by-device
#+begin_src sh :var device_rc_file=(expand-file-name (pcase system-type ('android "termux") (_ "/dev/null")) "_tangle/rc")
. "$device_rc_file"
#+end_src

*** interactive

#+begin_src sh
[[ $- == *i* ]] || return
#+end_src

**** gpg
#+begin_src sh
GPG_TTY="$(tty)"
export GPG_TTY
gpg-connect-agent updatestartuptty /bye > /dev/null
#+end_src

**** by-device
#+begin_src sh
. "${device_rc_file}_i"
#+end_src

** termux

*** splash-screen
#+begin_src sh :tangle (zr-org-by-tangle-dir "termux_i")
ifconfig 2>/dev/null | grep 255.255.255.0
#+end_src

*** emacs
#+begin_src sh :tangle (zr-org-by-tangle-dir "termux") :var EMACS_SOCKET_NAME=(format "/data/data/org.gnu.emacs/cache/emacs10%s/server" (substring user-login-name -3))
export EMACS_SOCKET_NAME
#+end_src

*** network
#+begin_src sh :tangle (zr-org-by-tangle-dir "termux") 
check_home_network() {
  termux-wifi-connectioninfo  | grep -q '\(pppoppt\|ppptppo\)'
}
#+end_src

*** retroarch
#+begin_src sh :tangle (zr-org-by-tangle-dir "termux")
retroarch_sync_pc() {
  if check_home_network && check_smb_connection 'smb://192.168.0.110/retroarch-sync/1.txt'; then
    for dir in saves states; do
      local remote="retroarch-sync:retroarch-sync/${dir}"
      rclone_sync_dir "/storage/emulated/0/RetroArch" "$dir" "$remote"
    done
  fi
}
#+end_src

#+begin_src sh :tangle (zr-org-by-tangle-dir "termux_i")
retroarch_sync_pc
#+end_src

