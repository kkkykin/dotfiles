#+title:      openresty
#+date:       [2024-12-12 Thu 20:09]
#+filetags:   :server:
#+identifier: 20241212T200954

* tangle
:PROPERTIES:
:header-args: :var prefix=(expand-file-name "scoop/apps/openresty/current" (getenv "USERPROFILE"))
:END:
#+begin_src elisp
(let ((zr-local-pls (plstore-open "openresty.pls"))
      org-confirm-babel-evaluate
      org-babel-pre-tangle-hook
      (exe (executable-find "openresty")))
  (zr-org-babel-execute-named-src-block
   "expand-serve-files" '((:noweb . "no") (:results . "value replace raw")))
  (dolist (f (org-babel-tangle))
    (let* ((r (file-relative-name f "_tangle"))
           (l (expand-file-name r prefix)))
      (unless (file-symlink-p l)
        (make-directory (file-name-directory l) t)
        (make-symbolic-link f l t))))
  (org-babel-remove-result-one-or-many '(4))
  (save-buffer)
  (when (zerop (call-process exe nil nil nil "-p" prefix "-t"))
    (call-process exe nil nil nil "-p" prefix "-s" "reload")))
#+end_src

#+name: expand-serve-files
#+begin_src elisp :noweb no :results value replace raw
(format
 "#+begin_src conf-space :tangle \"_tangle/conf/sites-enabled/serve-files.conf.3\" :comments no :mkdirp t\n%s\n#+end_src"
 (mapconcat
  (lambda (s)
    (when-let* ((serve (cdr s))
                (d (expand-file-name (plist-get serve :alias)))
                (file-exists-p d))
      (format "<<serve-files(location=\"%s\",alias=\"%s\")>>"
              (plist-get serve :path) d)))
  (plstore-find zr-local-pls '(:type ("serve-file"))) "\n"))
#+end_src

* conf
** main
:PROPERTIES:
:CUSTOM_ID: 5fad775c-17e9-40c2-97ce-09ea75e1d313
:END:
#+header: :var listen=(let ((http (cdr (plstore-get zr-local-pls "http listen")))) (format "%s:%s" (plist-get http :host) (plist-get http :listen)))
#+begin_src conf-space :tangle "_tangle/conf/nginx.conf" :mkdirp yes
worker_processes  1;

events {
    worker_connections  1024;
}

stream {
    include sites-enabled/*.conf.1;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    tcp_nopush     on;

    keepalive_timeout  65;

    include sites-enabled/*.conf.2;
    lua_package_path "$prefix/lua-scripts/?.lua;;";

    map $http_upgrade $connection_upgrade {
      default upgrade;
      ''      close;
    }

    server {
        listen $listen;
        # listen       80;
        # server_name  localhost;

        include sites-enabled/*.conf.3;

        location / {
            root   html;
            index  index.html index.htm;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
#+end_src

** server

*** pac file
:PROPERTIES:
:CUSTOM_ID: 3879a2c6-647b-4be8-b399-135093b6b33a
:END:
#+header: :var location=(plist-get (cdr (plstore-get zr-local-pls "pac file")) :path) alias=(expand-file-name (plist-get (cdr (plstore-get zr-local-pls "pac file")) :alias))
#+begin_src conf-space :tangle "_tangle/conf/sites-enabled/pac.conf.3" :mkdirp t
location $location {
    alias $alias;

    sub_filter ' 127.0.0.1:' " ${host}:";
    sub_filter_once off;
    sub_filter_last_modified on;
    sub_filter_types *;

    default_type application/x-ns-proxy-autoconfig;
}
#+end_src

*** lua
:PROPERTIES:
:CUSTOM_ID: a5df7913-663e-4cd4-a582-2ee3f7795cd9
:END:
#+begin_src conf-space :tangle "_tangle/conf/sites-enabled/lua.conf.3"
location ~ /lua/(.+) {
  # client_max_body_size 100m;
  client_body_buffer_size 1m;
  allow 127.0.0.1;
  deny all;
  content_by_lua_file lua-scripts/$1.lua;
}
#+end_src

#+name: expand-lua-table
#+begin_src elisp
(mapconcat (lambda (s) (format "'%s'" s))
           (cl-remove-if #'string-empty-p value) ", ")
#+end_src

#+begin_src lua :tangle "_tangle/lua-scripts/libs/utils.lua" :mkdirp t
module(..., package.seeall)

function find_in_array(array, item)
    for index, value in ipairs(array) do
        if value == item then
            return index
        end
    end
    return false
end

function is_valid_url(url)
    if url and url:match("^https?://[%w%-%%_.?:/@#+=&]+$") then
        return true
    end
    ngx.status = ngx.HTTP_BAD_REQUEST
    ngx.say("Invalid URL format")
    return false
end

function is_valid_args(s)
    if s and string.find(s, '["^&;|]') == nil then
        return true
    end
    ngx.status = ngx.HTTP_BAD_REQUEST
    ngx.say("Invalid ARGS format")
    return false
end

function shell_command_and_say(cmd)
  local handle = io.popen(cmd)
  if handle then
      handle:close()
      ngx.status = ngx.HTTP_OK
      ngx.say('Successfully!')
  else
      ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
      ngx.say('Failed.')
  end
end
#+end_src

#+begin_src lua :tangle "_tangle/lua-scripts/libs/cors.lua"
module(..., package.seeall)

local utils = require('libs.utils')

function check_auth(right_key)
    local api_key = ngx.req.get_headers()['Authorization']
    if api_key and api_key == right_key then
        return true
    end

    ngx.status = ngx.HTTP_FORBIDDEN
    ngx.say('Forbidden: Invalid API Key')
    return false
end

function set_cors(allowd, headers)

    local origin = ngx.req.get_headers()['Origin']

    if origin and utils.find_in_array(allowd, origin) then
        ngx.header['Access-Control-Allow-Origin'] = origin
        ngx.header['Access-Control-Allow-Methods'] = 'POST, OPTIONS'
        ngx.header['Access-Control-Allow-Headers'] = headers
        ngx.header['Access-Control-Allow-Private-Network'] = 'true'
        return true
    end

    ngx.status = ngx.HTTP_FORBIDDEN
    ngx.say('Forbidden: Invalid Origin')
    return false
    
end
#+end_src

#+name: check-auth-and-origin
#+begin_src lua
local cors = require('libs.cors')

if not cors.set_cors(allowd_origin, allowd_headers) then
    return
end

if ngx.req.get_method() == 'OPTIONS' then
    ngx.status = 204
    ngx.header['Content-Length'] = 0
    return
end

if not cors.check_auth(auth_key) then
    return
end
#+end_src

**** mpv
:PROPERTIES:
:header-args:lua: :tangle "_tangle/lua-scripts/mpv.lua" :mkdirp t
:CUSTOM_ID: 3e5ddb96-3ebf-4af7-aa99-85b2fe03abac
:END:

#+header: :var auth_key=(auth-source-pick-first-password :host "mpv.nginx.localhost") allowd_headers="content-type, args, authorization"
#+begin_src lua
local content_type = ngx.req.get_headers()['Content-Type']
local args = ngx.req.get_headers()['args']
local method = ngx.req.get_method()
local allowd_origin = {<<expand-lua-table(value=(plist-get (cdr (plstore-get zr-local-pls "mpv-cors")) :cors))>>}
<<check-auth-and-origin>>

if method ~= 'POST'
  or content_type ~= 'application/vnd.apple.mpegurl' then
  ngx.log(ngx.ERR, 'Wrong request header')
  ngx.exit(ngx.HTTP_BAD_REQUEST)
end

ngx.req.read_body()
local body = ngx.req.get_body_data()

if not body then
  ngx.log(ngx.ERR, 'Empty request body')
  ngx.exit(ngx.HTTP_BAD_REQUEST)
end

local function run_mpv(premature, body, args)
  if premature then return end  -- 防止定时器提前触发

  local utils = require('libs.utils')

  local cmd = 'mpv --playlist=- --terminal=no --input-ipc-server=\\\\.\\pipe\\mpv-nginx'
  if args ~= nil and utils.is_valid_args(args) then
    cmd = cmd .. ' ' .. args
  end

  local handle = io.popen(cmd, 'w')
  if not handle then
    ngx.log(ngx.ERR, 'Failed to open pipe to mpv')
    return
  end

  local ok, err = handle:write(body)
  if not ok then
    ngx.log(ngx.ERR, 'Failed to write to mpv: ', err)
    handle:close()
    return
  end

  handle:close()
end

-- 在 HTTP 请求结束后异步执行 mpv
local ok, err = ngx.timer.at(0, run_mpv, body, args)
if not ok then
  ngx.log(ngx.ERR, 'Failed to create timer: ', err)
end

ngx.say('Success.')
ngx.exit(ngx.HTTP_OK)
#+end_src

**** browse-url
:PROPERTIES:
:header-args:lua: :tangle "_tangle/lua-scripts/browse-url.lua" :mkdirp t
:CUSTOM_ID: ff377d1b-e71c-4971-9200-884e6d1f3290
:END:
#+header: :var auth_key=(auth-source-pick-first-password :host "browse-url.nginx.localhost") allowd_headers="url, authorization"
#+begin_src lua
local allowd_origin = {<<expand-lua-table(value=(plist-get (cdr (plstore-get zr-local-pls "browse-url-cors")) :cors))>>}
<<check-auth-and-origin>>

local url = ngx.req.get_headers()['url']

local utils = require('libs.utils')

if not utils.is_valid_url(url) then
    return
end

local command = 'explorer "' .. url .. '"'

utils.shell_command_and_say(command)
#+end_src

**** aria2
:PROPERTIES:
:CUSTOM_ID: 621f4833-8664-42fc-bb62-c8ff4ef8072a
:END:
#+begin_src lua :tangle "_tangle/lua-scripts/libs/aria2_proxy.lua"
local cjson = require "cjson"
local re = require "ngx.re"

local _M = {}

-- 定义不同 URL 模式对应的 options
local server_options = {
    {
        pattern = "^https://d\\.pcs\\.baidu\\.com/",
        options = {
            ["max-connection-per-server"] = "2",
            ["user-agent"] = "pan.baidu.com"
        }
    },
    {
        pattern = "^https://[^/]+\\.mypikpak\\.com/",
        options = {
            ["max-connection-per-server"] = "2"
        }
    },
    {
        pattern = "^https://pixeldrain\\.com/",
        options = {
            ["max-connection-per-server"] = "1"
        }
    },
    {
        pattern = "^https://[a-zA-Z0-9]+\\.workupload\\.com/",
        options = {
            ["max-connection-per-server"] = "1"
        }
    },
    {
        pattern = "^https://download[0-9]+\\.uploadhaven\\.com/",
        options = {
            ["max-connection-per-server"] = "2"
        }
    }
}

-- 合并两个表
local function merge_options(base, new)
    local result = {}
    for k, v in pairs(base or {}) do result[k] = v end
    for k, v in pairs(new or {}) do result[k] = v end
    return result
end

-- 根据 URI 查找匹配的 options
local function get_options_for_uri(uri)
    for _, rule in ipairs(server_options) do
        if ngx.re.match(uri, rule.pattern, "jo") then
            return rule.options
        end
    end
    return nil
end

function _M.process_request()
    -- 只处理 POST 请求
    if ngx.req.get_method() ~= "POST" then
        return
    end
    
    -- 读取请求体
    ngx.req.read_body()
    local body = ngx.req.get_body_data()
    if not body then
        return
    end
    
    -- 解析 JSON
    local ok, json_data = pcall(cjson.decode, body)
    if not ok or not json_data then
        ngx.log(ngx.ERR, "Failed to decode JSON: ", json_data)
        return
    end
    
    -- 只处理 aria2.addUri 方法
    if json_data.method ~= "aria2.addUri" then
        return
    end
    
    -- 获取参数
    local params = json_data.params or {}
    local uris = {}
    local options = {}
    local position
    
    -- 解析参数 (处理可能的 secret token 情况)
    if #params >= 1 and type(params[1]) == "string" then
        -- 有 secret token 的情况: [secret, uris, options, position]
        if #params >= 2 then uris = params[2] or {} end
        if #params >= 3 then options = params[3] or {} end
        if #params >= 4 then position = params[4] end
    else
        -- 无 secret token 的情况: [uris, options, position]
        if #params >= 1 then uris = params[1] or {} end
        if #params >= 2 then options = params[2] or {} end
        if #params >= 3 then position = params[3] end
    end
    
    -- 检查每个 URI 并收集 options
    local final_options = {}
    local has_custom_options = false
    
    for _, uri in ipairs(uris) do
        local uri_options = get_options_for_uri(uri)
        if uri_options then
            final_options = merge_options(final_options, uri_options)
            has_custom_options = true
        end
    end
    
    -- 如果有自定义 options，则合并到原始 options 中
    if has_custom_options then
        options = merge_options(options, final_options)
        
        -- 重新构建参数
        local new_params = {}
        if #params >= 1 and type(params[1]) == "string" then
            -- 有 secret token 的情况
            new_params = {params[1], uris, options}
            if position then new_params[4] = position end
        else
            -- 无 secret token 的情况
            new_params = {uris, options}
            if position then new_params[3] = position end
        end
        
        -- 更新 JSON 数据
        json_data.params = new_params
        
        -- 重新编码 JSON
        local new_body = cjson.encode(json_data)
        
        -- 更新请求体
        ngx.req.set_body_data(new_body)
        ngx.req.set_header("Content-Length", #new_body)
        
        -- 记录日志
        ngx.log(ngx.INFO, "Modified options for URIs: ", cjson.encode(uris), 
               " with options: ", cjson.encode(final_options))
    end
end

return _M
#+end_src

#+begin_src conf-space :tangle "_tangle/conf/sites-enabled/aria2-jsonrpc.conf.3"
location /aria2-jsonrpc {
  access_log off;
  access_by_lua_block {
    local aria2_proxy = require "libs/aria2_proxy"
    aria2_proxy.process_request()
  }
  
  proxy_pass http://127.0.0.1:6800/jsonrpc;
  proxy_http_version 1.1;
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header Connection $connection_upgrade;

  proxy_set_header Host $host;
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  
  proxy_pass_request_headers on;
  proxy_pass_request_body on;
  
  # 增加超时设置
  proxy_connect_timeout 60s;
  proxy_read_timeout 60s;
  proxy_send_timeout 60s;
}
#+end_src

*** serve files
#+name: serve-files
#+begin_src conf-space
location $location {
  alias $alias;
  autoindex on;
  tcp_nopush on;
  tcp_nodelay on;
}
#+end_src

* local-variables
# Local Variables:
# buffer-auto-save-file-name: nil
# devdocs-current-docs: ("nginx" "nginx_lua_module")
# End:
