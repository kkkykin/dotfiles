#+title:      tampermonkey
#+date:       [2025-01-20 Mon 23:07]
#+filetags:   :browser:
#+identifier: 20250120T230702
#+property: header-args:org :comments no

* scripts

** cookies-dumper
:PROPERTIES:
:header-args: :tangle (zr-org-by-tangle-dir "cookies-dumper.js") :mkdirp t
:CUSTOM_ID: 6fc870b6-bae2-4b60-8858-5e2af52b8cfa
:END:

#+begin_src org :var path=(zr-org-by-tangle-dir "cookies-dumper.js")
// ==UserScript==
// @name         Cookies-dumper
// @namespace    http://tampermonkey.net/
// @version      2024-10-27
// @description  Push cookies to emacs.
// @author       kkky
// @icon         https://www.google.com/s2/favicons?sz=64&domain=bilibili.com
// @grant        GM_cookie
// @require      file:///$path
// ==/UserScript==
#+end_src

#+begin_src js
function dumpCookiesInNetscapeFormat(cookies) {
  let netscapeCookies = [
    '# Netscape HTTP Cookie File'
    // '# This file was generated by Tampermonkey! Edit at your own risk.',
    // '',
    // '# Domain    True    Path    False    Expiration    Name    Value'
  ];

  let neededCookies;

  let hostname = location.hostname;
  if (hostname.endsWith('.bilibili.com'))
    neededCookies = ['SESSDATA'];
  else if (hostname.endsWith('.youtube.com'))
    neededCookies = ['__Secure-1PAPISID', '__Secure-3PAPISID', '__Secure-1PSID', '__Secure-1PSIDTS'];
  else
    neededCookies = '_any';

  cookies.forEach(({ domain, hostOnly, path, secure, expirationDate, name, value }) => {

    if (neededCookies === '_any' ||  neededCookies.includes(name)){
      // Format the line
      const netscapeCookie = `${domain}\t${ hostOnly ? "FALSE" : "TRUE" }\t${path}\t${secure ? "TRUE" : "FALSE"}\t${expirationDate >> 0}\t${name}\t${value}`;
      netscapeCookies.push(netscapeCookie);
    }
  });

  return netscapeCookies.join('\n');
}

function pushToEmacs(text){
  const domainParts = location.hostname.split('.');
  let domains;
  if (domainParts.at(-2) === 'com')
    domains = domainParts.slice(-3);
  else
    domains = domainParts.slice(-2);

  // Construct the custom org-protocol URL
  const orgProtocolURL = 'org-protocol://cookies-dumper?' + 
        new URLSearchParams({
          host: domains.join('.'),
          cookies: text
        });

  // Create a temporary link element
  const link = document.createElement('a');
  link.href = orgProtocolURL;

  // Trigger the link to open
  link.click();

  link.remove();
  
}

GM_cookie.list({}, function(cookies, error) {
  if (!error) {
    pushToEmacs(dumpCookiesInNetscapeFormat(cookies));
  } else {
    console.error(error);
  }
});
#+end_src
