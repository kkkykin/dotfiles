#+title:      sing-box
#+date:       [2025-08-22 Fri 16:25]
#+filetags:   :network:
#+identifier: 20250822T162554

* tangle
#+begin_src elisp
(dolist (c '("client-config"
             "server-config"
             "android-tun"))
  (zr-org-babel-json-format c))
(let* ((zr-local-pls (plstore-open "sing-box.pls"))
       (client-tmp-dir "_tangle/tmp/")
       (client-dir "_tangle/client/")
       (hosts-dir "_tangle/hosts/")
       (hosts-uris '(;; ("github" . "https://gitlab.com/ineo6/hosts/-/raw/master/hosts")
                     ))
       hosts-files

       (clash-pls (cdr (plstore-get zr-local-pls "clash")))
       (clash-subscribes (plist-get clash-pls :sub))
       (sublink-domain (or (plist-get clash-pls :sublink)
                           "linuxdo.icmpmiao.cc"))
       (sub-dir "_tangle/sub/")
       sub-outbounds
       us-outbounds
       ja-outbounds

       (tun-dir (expand-file-name "tun/" client-dir))
       (merge-file (expand-file-name "500-merge.json" client-dir))
       (rule-sets-dir (expand-file-name "rule-sets/" "_tangle/"))
       (delete-by-moving-to-trash))
  (delete-directory client-tmp-dir t)
  (mkdir hosts-dir t)
  (dolist (h hosts-uris)
    (let ((f (expand-file-name (car h) hosts-dir)))
      (push f hosts-files)
      (call-process "curl" nil 0 nil "-Lo" f (cdr h))))
  
  (mkdir client-tmp-dir t)
  (mkdir sub-dir t)

  (dolist (sub clash-subscribes)
    (let ((name (car sub)))
      (condition-case nil
          (let* ((uri (cdr sub))
                 (content
                  (org-file-contents
                   (cond
                    ((string-prefix-p "sb://" uri)
                     (substring uri 5))
                    ((or (string-prefix-p "file://" uri)
                         (file-exists-p uri))
                     uri)
                    (t (format "https://%s/singbox?config=%s&ua=&selectedRules=%%5B%%5D&customRules=%%5B%%5D"
                               ;; https only: "https://clash2sfa.xmdhs.com/sub?disableUrlTest=true&sub=%s"
                               sublink-domain
                               (url-hexify-string uri))))
                   t))
                 (obj (json-parse-string content :object-type 'alist))
                 (outbounds (alist-get "outbounds" obj nil nil #'string=))
                 (name (car sub))
                 (selector (format "s[%s]" name))
                 (urltest (format "u[%s]" name))
                 tags
                 obds)
            (write-region content nil
                          (expand-file-name
                           (file-name-with-extension name "json")
                           sub-dir))
            (mapc
             (lambda (obd)
               (when-let* (((not (member (alist-get "type" obd nil nil #'string=)
                                         '("direct" "selector" "urltest"
                                           "block" "dns"))))
                           (tag (format "%s[%s]" (alist-get "tag" obd nil nil #'string=) name)))
                 ;; (cond
                 ;;  ((string-match-p "美国" tag)
                 ;;   (push tag us-outbounds))
                 ;;  ((string-match-p "日本" tag)
                 ;;   (push tag ja-outbounds)))
                 (push tag tags)
                 (push (push `(tag . ,tag) obd) obds)))
             outbounds)
            (if tags
                (let* ((extra `(((type . "selector")
                                 (tag . ,selector)
                                 (outbounds . ,(vconcat (cons urltest tags)))
                                 (default . ,urltest)
                                 (interrupt_exist_connections . :false))
                                ((type . "urltest")
                                 (tag . ,urltest)
                                 (outbounds . ,(vconcat tags)))))
                       (merged (vconcat extra obds))
                       (json `((outbounds . ,merged))))
                  (push (format "s[%s]" name) sub-outbounds)
                  (write-region (json-serialize json) nil
                                (expand-file-name (format "_600-%s.json" name)
                                                  client-tmp-dir)))
              (message "Sub: %s not work." name)))
        (wrong-type-argument (message "Sub: %s not work." name))
        (json-end-of-file (message "Sub: %s json not valid." name)))))

  (let ((coding-system-for-write 'utf-8))
    (org-babel-tangle))

  (dolist (f (directory-files "." t "^_.+\\.json$" t))
    (make-symbolic-link f client-tmp-dir t))
  (mkdir tun-dir t)
  (call-process "sing-box" nil nil nil "merge"
                merge-file "-C" client-tmp-dir)
  (make-symbolic-link merge-file tun-dir t)

  (when-let* (((eq 'android system-type))
              (android-dir "/storage/emulated/0/io.nekohasekai.sfa/")
              (android-target-dir "/storage/emulated/0/Android/media/io.nekohasekai.sfa/"))
    (mkdir android-dir t)
    (copy-file merge-file (expand-file-name "main.json" android-dir) t)
    (copy-directory rule-sets-dir android-dir)
    (copy-directory hosts-dir android-dir)
    (dolist (c `(("tun.json" . ,tun-dir)))
      (call-process "sing-box" nil nil nil "merge"
                    (expand-file-name (car c) android-dir)
                    "-C" (cdr c)))
    (zr-android-call-rish
     (string-join
      (list (format "rm -rf %s" (shell-quote-argument android-target-dir))
            (format "sed -i 's,%s,%s,g' %s/*.json"
                    (expand-file-name "_tangle/")
                    android-target-dir
                    android-dir)
            (format "mv %s %s"
                    (shell-quote-argument android-dir)
                    (shell-quote-argument android-target-dir)))
      " && ")))
  (plstore-close zr-local-pls))
#+end_src

* config
:PROPERTIES:
:CUSTOM_ID: 3aeea361-850d-4cc8-b292-065568c194d3
:header-args:json: :var hy_obfs_pass=(substring (json-serialize (plist-get (cdr (plstore-get zr-local-pls "hy")) :obfs-pass)) 1 -1)
:header-args:json+: :var hy_user_pass=(substring (json-serialize (plist-get (cdr (plstore-get zr-local-pls "hy")) :user-pass)) 1 -1)
:header-args:json+: :var hy_host=(substring (json-serialize (plist-get (cdr (plstore-get zr-local-pls "hy")) :host)) 1 -1)
:header-args:json+: :var vl_host=(substring (json-serialize (plist-get (cdr (plstore-get zr-local-pls "vl")) :host)) 1 -1)
:header-args:json+: :var vl_short_id=(substring (json-serialize (plist-get (cdr (plstore-get zr-local-pls "vl")) :short-id)) 1 -1)
:header-args:json+: :var vl_user_uuid=(substring (json-serialize (plist-get (cdr (plstore-get zr-local-pls "vl")) :user-uuid)) 1 -1)
:header-args:json+: :var any_host=(substring (json-serialize (plist-get (cdr (plstore-get zr-local-pls "any")) :host)) 1 -1)
:header-args:json+: :var any_pass=(substring (json-serialize (plist-get (cdr (plstore-get zr-local-pls "any")) :pass)) 1 -1)
:END:

** client
:PROPERTIES:
:tangle-dir: _tangle/tmp
:CUSTOM_ID: 4acfcf10-2bef-4815-af7a-fd5f0271c77f
:END:

*** main
:PROPERTIES:
:CUSTOM_ID: fed30130-cdf9-42cb-805c-50dbb7b4c5bf
:END:
#+header: :var hy_ip=(plist-get (cdr (plstore-get zr-local-pls "hy")) (if (zr-net-has-public-ipv6-addr-p) :ipv6 :ip))
#+header: :var vl_ip=(plist-get (cdr (plstore-get zr-local-pls "vl")) (if (zr-net-has-public-ipv6-addr-p) :ipv6 :ip))
#+header: :var vl_pub_key=(substring (json-serialize (plist-get (cdr (plstore-get zr-local-pls "vl")) :pub-key)) 1 -1)
#+header: :var any_ip=(plist-get (cdr (plstore-get zr-local-pls "any")) (if (zr-net-has-public-ipv6-addr-p) :ipv6 :ip))
#+header: :var rule_sets_dir=(expand-file-name rule-sets-dir)
#+header: :var jsdelivr="https://fastly.jsdelivr.net"
#+header: :var dns_strategy=(if (zr-net-has-public-ipv6-addr-p) "prefer_ipv6" "ipv4_only")
#+header: :var clash_secret=(substring (json-serialize (plist-get (cdr (plstore-get zr-local-pls "clash")) :secret)) 1 -1)
#+name: client-config
#+begin_src json :tangle (zr-org-by-tangle-dir "_500-main.json") :mkdirp t
{
  "dns": {
    "final": "ali-quic",
    "rules": [
      {
        "ip_accept_any": true,
        "server": "hosts-in"
      },
      {
        "action": "reject",
        "rule_set": "geosite-adblockplus"
      },
      {
        "rule_set": "geosite-geolocation-cn",
        "server": "ali-doh"
      },
      {
        "client_subnet": "114.114.114.114/24",
        "mode": "and",
        "rules": [
          {
            "invert": true,
            "rule_set": "geosite-geolocation-!cn"
          },
          {
            "rule_set": "geoip-cn"
          }
        ],
        "server": "cf-dot",
        "type": "logical"
      },
      {
        "rule_set": "geosite-geolocation-!cn",
        "server": "cf-dot"
      }
    ],
    "servers": [
      {
        "detour": "s[this-way]",
        "server": "1.1.1.1",
        "tag": "cf-dot",
        "type": "tls"
      },
      {
        "detour": "s[this-way]",
        "server": "8.8.8.8",
        "tag": "google-doh",
        "type": "https"
      },
      {
        "server": "223.5.5.5",
        "tag": "ali-doh",
        "type": "https"
      },
      {
        "server": "223.5.5.5",
        "tag": "ali-quic",
        "type": "quic"
      }
    ],
    "strategy": "$dns_strategy"
  },
  "experimental": {
    "cache_file": {
      "enabled": true,
      "store_rdrc": true
    },
    "clash_api": {
      "access_control_allow_origin": [
        "https://board.zash.run.place",
        "http://127.0.0.1"
      ],
      "access_control_allow_private_network": true,
      "external_controller": "127.0.0.1:9090",
      "secret": "$clash_secret"
    }
  },
  "inbounds": [
    {
      "listen_port": 10807,
      "set_system_proxy": false,
      "tag": "mixed-in",
      "type": "mixed"
    }
  ],
  "log": {
    "level": "info"
  },
  "outbounds": [
    {
      "tag": "direct",
      "type": "direct"
    },
    {
      "default": "u[self]",
      "interrupt_exist_connections": false,
      "outbounds": [
        "s[self0]",
        "u[self]"
      ],
      "tag": "s[self]",
      "type": "selector"
    },
    {
      "interrupt_exist_connections": false,
      "outbounds": [
        "s[self0]"
      ],
      "tag": "u[self]",
      "type": "urltest"
    },
    {
      "default": "u[self0]",
      "interrupt_exist_connections": false,
      "outbounds": [
        "u[self0]",
        "any",
        "vl",
        "hy",
        "nv"
      ],
      "tag": "s[self0]",
      "type": "selector"
    },
    {
      "interrupt_exist_connections": false,
      "outbounds": [
        "any",
        "vl",
        "hy",
        "nv"
      ],
      "tag": "u[self0]",
      "type": "urltest"
    },
    {
      "flow": "xtls-rprx-vision",
      "server": "$vl_ip",
      "server_port": 38199,
      "tag": "vl",
      "tls": {
        "enabled": true,
        "reality": {
          "enabled": true,
          "public_key": "$vl_pub_key",
          "short_id": "$vl_short_id"
        },
        "server_name": "$vl_host",
        "utls": {
          "enabled": true
        }
      },
      "type": "vless",
      "uuid": "$vl_user_uuid"
    },
    {
      "password": "$any_pass",
      "server": "$any_ip",
      "server_port": 39833,
      "tag": "any",
      "tls": {
        "enabled": true,
        "server_name": "$any_host"
      },
      "type": "anytls"
    },
    {
      "obfs": {
        "password": "$hy_obfs_pass",
        "type": "salamander"
      },
      "password": "$hy_user_pass",
      "server": "$hy_ip",
      "server_port": 30104,
      "tag": "hy",
      "tls": {
        "alpn": [
          "h3"
        ],
        "enabled": true,
        "server_name": "$hy_host"
      },
      "type": "hysteria2"
    },
    {
      "server": "127.0.0.1",
      "server_port": 10808,
      "tag": "nv",
      "type": "http"
    },
    {
      "server": "127.0.0.1",
      "server_port": 8080,
      "tag": "mitm",
      "type": "http"
    }
  ],
  "route": {
    "auto_detect_interface": true,
    "default_domain_resolver": {
      "server": "ali-quic"
    },
    "final": "direct",
    "rule_set": [
      {
        "format": "source",
        "path": "$rule_sets_dir/proxy.json",
        "tag": "proxy-rules",
        "type": "local"
      },
      {
        "format": "source",
        "path": "$rule_sets_dir/direct.json",
        "tag": "direct-rules",
        "type": "local"
      },
      {
        "format": "source",
        "path": "$rule_sets_dir/mitm.json",
        "tag": "mitm-rules",
        "type": "local"
      },
      {
        "format": "binary",
        "tag": "geoip-cloudflare",
        "type": "remote",
        "url": "$jsdelivr/gh/chocolate4u/Iran-sing-box-rules@rule-set/geoip-cloudflare.srs"
      },
      {
        "format": "binary",
        "tag": "geoip-cn",
        "type": "remote",
        "url": "$jsdelivr/gh/SagerNet/sing-geoip@rule-set/geoip-cn.srs"
      },
      {
        "format": "binary",
        "tag": "geosite-geolocation-cn",
        "type": "remote",
        "url": "$jsdelivr/gh/SagerNet/sing-geosite@rule-set/geosite-geolocation-cn.srs"
      },
      {
        "format": "binary",
        "tag": "geosite-geolocation-!cn",
        "type": "remote",
        "url": "$jsdelivr/gh/SagerNet/sing-geosite@rule-set/geosite-geolocation-!cn.srs"
      },
      {
        "format": "binary",
        "tag": "geosite-category-porn",
        "type": "remote",
        "url": "$jsdelivr/gh/SagerNet/sing-geosite@rule-set/geosite-category-porn.srs"
      },
      {
        "format": "binary",
        "tag": "geosite-category-ai-!cn",
        "type": "remote",
        "url": "$jsdelivr/gh/SagerNet/sing-geosite@rule-set/geosite-category-ai-!cn.srs"
      },
      {
        "format": "binary",
        "tag": "geosite-google@!cn",
        "type": "remote",
        "url": "$jsdelivr/gh/SagerNet/sing-geosite@rule-set/geosite-google@!cn.srs"
      },
      {
        "format": "binary",
        "tag": "geosite-microsoft",
        "type": "remote",
        "url": "$jsdelivr/gh/SagerNet/sing-geosite@rule-set/geosite-microsoft.srs"
      },
      {
        "format": "binary",
        "tag": "geosite-adblockplus",
        "type": "remote",
        "url": "$jsdelivr/gh/SagerNet/sing-geosite@rule-set/geosite-adblockplus.srs"
      }
    ],
    "rules": [
      {
        "outbound": "mitm",
        "rule_set": "mitm-rules"
      },
      {
        "outbound": "direct",
        "rule_set": "direct-rules"
      },
      {
        "outbound": "s[self]",
        "rule_set": [
          "geosite-category-ai-!cn",
          "geosite-google@!cn",
          "geosite-microsoft"
        ]
      },
      {
        "outbound": "s[this-way]",
        "rule_set": [
          "geosite-category-porn",
          "proxy-rules"
        ]
      },
      {
        "action": "resolve"
      },
      {
        "ip_is_private": true,
        "outbound": "direct",
        "rule_set": [
          "geosite-geolocation-cn",
          "geoip-cn"
        ]
      },
      {
        "outbound": "direct",
        "override_address": "<<find-ip()>>",
        "rule_set": "geoip-cloudflare"
      },
      {
        "mode": "and",
        "outbound": "direct",
        "rules": [
          {
            "rule_set": "geoip-cn"
          },
          {
            "invert": true,
            "rule_set": "geosite-geolocation-!cn"
          }
        ],
        "type": "logical"
      },
      {
        "outbound": "s[this-way]",
        "rule_set": "geosite-geolocation-!cn"
      }
    ]
  }
}
#+end_src

*** select
:PROPERTIES:
:CUSTOM_ID: aaba4108-33b4-4d2f-aba4-1bbd1dca6aad
:END:
#+begin_src json :tangle (zr-org-by-tangle-dir "_400-selector.json")
<<gen-this-way()>>
#+end_src

#+name: gen-this-way
#+begin_src elisp
(let* ((u-this-way "u[this-way]")
       (s-this-way '("s[self]"))
       (u-sub "u[sub]")
       (s-sub (cons u-sub sub-outbounds))
       (u-us "u{us}")
       (s-us (cons u-us us-outbounds))
       pre-obds
       s-region
       region-obds)
  (when sub-outbounds
    (push "s[sub]" s-this-way)
    (push `(((type . "selector")
             (tag . "s[sub]")
             (outbounds . ,(vconcat s-sub))
             (default . ,u-sub))
            ((type . "urltest")
             (tag . ,u-sub)
             (outbounds . ,(vconcat (cdr s-sub)))))
          pre-obds))
  (when-let* ((region-outbounds (cl-remove nil `(("us" . ,us-outbounds)
                                                 ("ja" . ,ja-outbounds))
                                           :key #'cdr))
              (region-tag "s[region]"))
    (push region-tag s-this-way)
    (dolist (region region-outbounds)
      (let ((tag (format "u{%s}" (car region))))
        (push tag s-region)
        (push `((type . "urltest")
                (tag . ,tag)
                (outbounds . ,(vconcat (cdr region))))
              region-obds)))
    (push `((type . "selector")
            (tag . ,region-tag)
            (outbounds . ,(vconcat s-region)))
          region-obds)
    (write-region (json-serialize `((outbounds . ,(vconcat region-obds))))
                  nil (expand-file-name "_900-region.json" client-tmp-dir)))
  (push `(((type . "selector")
           (tag . "s[this-way]")
           (outbounds . ,(vconcat (cons u-this-way s-this-way)))
           (default . ,u-this-way))
          ((type . "urltest")
           (tag . ,u-this-way)
           (outbounds . ,(vconcat s-this-way))))
        pre-obds)
  (json-serialize `((outbounds . ,(apply #'vconcat pre-obds)))))
#+end_src

*** hosts
:PROPERTIES:
:CUSTOM_ID: b8b405ea-5649-4bb3-9abd-ab60a0332b85
:END:
#+begin_src json :tangle (zr-org-by-tangle-dir "_500-hosts.json")
<<gen-hosts()>>
#+end_src

#+name: gen-hosts
#+begin_src elisp
(let* ((default '((localhost . ["127.0.0.1" "::1"])))
       (hosts (vconcat hosts-files))
       (local-file "_hosts.eld")
       (local (and (file-exists-p local-file)
                   (with-temp-buffer
                     (insert-file-contents local-file)
                     (read (current-buffer))))))
  (json-serialize
   `((dns . (servers [((tag . "hosts-in")
                       (type . "hosts")
                       (path . ,hosts)
                       (predefined . ,(append local default)))])))))
#+end_src

*** platform

**** pc
:PROPERTIES:
:CUSTOM_ID: cf7be985-bfaa-4ed0-8240-190e588c1fd2
:END:
#+begin_src json :tangle (if (eq system-type 'android) "no" (zr-org-by-tangle-dir "_400-dns.json"))
{
  "inbounds": [
    {
      "listen": "::",
      "listen_port": 53,
      "network": "udp",
      "sniff_override_destination": true,
      "tag": "dns-in",
      "type": "direct"
    }
  ],
  "route": {
    "rules": [
      {
        "action": "sniff",
        "inbound": "dns-in",
        "sniffer": "dns"
      },
      {
        "action": "hijack-dns",
        "port": 53,
        "protocol": "dns"
      }
    ]
  }
}
#+end_src

*** tun
:PROPERTIES:
:tangle-dir: _tangle/client/tun
:END:

**** android
:PROPERTIES:
:CUSTOM_ID: 2970e9bb-61e8-4eb3-bc19-233858560385
:END:
#+name: android-tun
#+begin_src json :tangle (if (eq system-type 'android) (zr-org-by-tangle-dir "500-android.json") "no") :mkdirp t
{
  "inbounds": [
    {
      "address": [
        "172.19.0.1/30",
        "fdfe:dcba:9876::1/126"
      ],
      "auto_route": true,
      "endpoint_independent_nat": true,
      "include_package": [
        "com.arlosoft.macrodroid",
        "com.fooview.android.fooview",
        "InfinityLoop1309.NewPipeEnhanced"
      ],
      "mtu": 9000,
      "platform": {
        "http_proxy": {
          "enabled": true,
          "server": "127.0.0.1",
          "server_port": 10807
        }
      },
      "stack": "system",
      "strict_route": true,
      "type": "tun"
    }
  ]
}
#+end_src

*** log timestamp
:PROPERTIES:
:CUSTOM_ID: cf1faa67-36f3-4e44-bec2-312bac3dd217
:END:
#+begin_src json :tangle (if (eq system-type 'gnu/linux) "no" (zr-org-by-tangle-dir "_500-log.json"))
{
  "log": {
    "timestamp": true
  }
}
#+end_src

** server
:PROPERTIES:
:tangle-dir: _tangle/server
:CUSTOM_ID: b85ab91b-1175-4b51-9f3c-f37a0b589979
:header-args+: :var nv_user_name=(substring (json-serialize (plist-get (cdr (plstore-get zr-local-pls "nv")) :user-name)) 1 -1)
:header-args+: :var nv_user_pass=(substring (json-serialize (plist-get (cdr (plstore-get zr-local-pls "nv")) :user-pass)) 1 -1)
:header-args+: :var nv_host=(substring (json-serialize (plist-get (cdr (plstore-get zr-local-pls "nv")) :host)) 1 -1)
:header-args+: :var nv_email=(substring (json-serialize (plist-get (cdr (plstore-get zr-local-pls "nv")) :email)) 1 -1)
:END:

#+header: :var cf_token=(substring (json-serialize (plist-get (cdr (plstore-get zr-local-pls "cf")) :api-token)) 1 -1)
#+header: :var hy_masq=(substring (json-serialize (plist-get (cdr (plstore-get zr-local-pls "hy")) :masq)) 1 -1)
#+header: :var hy_email=(substring (json-serialize (plist-get (cdr (plstore-get zr-local-pls "hy")) :email)) 1 -1)
#+header: :var hy_user_name=(substring (json-serialize (plist-get (cdr (plstore-get zr-local-pls "hy")) :user-name)) 1 -1)
#+header: :var vl_priv_key=(substring (json-serialize (plist-get (cdr (plstore-get zr-local-pls "vl")) :priv-key)) 1 -1)
#+header: :var vl_user_name=(substring (json-serialize (plist-get (cdr (plstore-get zr-local-pls "vl")) :user-name)) 1 -1)
#+header: :var any_email=(substring (json-serialize (plist-get (cdr (plstore-get zr-local-pls "any")) :email)) 1 -1)
#+name: server-config
#+begin_src json :tangle (zr-org-by-tangle-dir "500-main.json") :mkdirp t
{
  "inbounds": [
    {
      "listen": "::",
      "listen_port": 443,
      "tls": {
        "acme": {
          "dns01_challenge": {
            "api_token": "$cf_token",
            "provider": "cloudflare"
          },
          "domain": "$nv_host",
          "email": "$nv_email"
        },
        "enabled": true
      },
      "type": "naive",
      "users": [
        {
          "password": "$nv_user_pass",
          "username": "$nv_user_name"
        }
      ]
    },
    {
      "down_mbps": 500,
      "listen": "::",
      "listen_port": 30104,
      "masquerade": "$hy_masq",
      "obfs": {
        "password": "$hy_obfs_pass",
        "type": "salamander"
      },
      "tls": {
        "acme": {
          "dns01_challenge": {
            "api_token": "$cf_token",
            "provider": "cloudflare"
          },
          "domain": "$hy_host",
          "email": "$hy_email"
        },
        "alpn": [
          "h3"
        ],
        "enabled": true,
        "server_name": "$hy_host"
      },
      "type": "hysteria2",
      "up_mbps": 500,
      "users": [
        {
          "name": "$hy_user_name",
          "password": "$hy_user_pass"
        }
      ]
    },
    {
      "listen": "::",
      "listen_port": 38199,
      "tag": "vless-vision-reality",
      "tls": {
        "enabled": true,
        "reality": {
          "enabled": true,
          "handshake": {
            "server": "$vl_host",
            "server_port": 443
          },
          "private_key": "$vl_priv_key",
          "short_id": [
            "$vl_short_id"
          ]
        },
        "server_name": "$vl_host"
      },
      "type": "vless",
      "users": [
        {
          "flow": "xtls-rprx-vision",
          "name": "$vl_user_name",
          "uuid": "$vl_user_uuid"
        }
      ]
    },
    {
      "listen": "::",
      "listen_port": 39833,
      "tls": {
        "acme": {
          "dns01_challenge": {
            "api_token": "$cf_token",
            "provider": "cloudflare"
          },
          "domain": "$any_host",
          "email": "$any_email"
        },
        "enabled": true,
        "server_name": "$any_host"
      },
      "type": "anytls",
      "users": [
        {
          "password": "$any_pass"
        }
      ]
    }
  ],
  "log": {
    "level": "info"
  },
  "outbounds": [
    {
      "type": "direct"
    }
  ]
}
#+end_src

#+header: :var nv_ip=(plist-get (cdr (plstore-get zr-local-pls "nv")) (if (zr-net-has-public-ipv6-addr-p) :ipv6 :ip))
#+begin_src json :tangle (expand-file-name "config.json" "_tangle/naive") :mkdirp t
{
  "listen": "http://127.0.0.1:10808",
  "proxy": "quic://$nv_user_name:$nv_user_pass@$nv_host",
  "host-resolver-rules": "MAP $nv_host $nv_ip"
}
#+end_src

* rule-sets
:PROPERTIES:
:tangle-dir: (expand-file-name rule-sets-dir)
:END:
https://sing-box.sagernet.org/zh/configuration/rule-set/headless-rule/

** proxy
:PROPERTIES:
:CUSTOM_ID: 86dd13c4-1322-4298-a426-d3bbed2b8a44
:END:
#+begin_src json :tangle (zr-org-by-tangle-dir "proxy.json") :mkdirp t
<<gen-proxy-rule-set()>>
#+end_src

#+name: gen-proxy-rule-set
#+begin_src elisp
(let* ((rules (zr-net-read-proxy-rules))
       (proxy (gethash "proxy" rules))
       (hosts (gethash "autoproxy_hosts" rules))
       (local-file "_proxy.eld")
       (local (and (file-exists-p local-file)
                   (with-temp-buffer
                     (insert-file-contents local-file)
                     (read (current-buffer)))))
       suffix)
  (cl-mapc
   (lambda (p h)
     (when (string= "HTTP 127.0.0.1:10808" p)
       (push h suffix)))
   proxy hosts)
  (json-serialize
   `((version . 3)
     (rules . ,(vconcat local (vector `((domain_suffix . ,(apply #'vconcat suffix)))))))))
#+end_src

** direct
:PROPERTIES:
:CUSTOM_ID: f436f071-b706-45c3-a131-db6e6e84d786
:END:
#+begin_src json :tangle (zr-org-by-tangle-dir "direct.json") :mkdirp t
<<gen-direct-rule-set()>>
#+end_src

#+name: gen-direct-rule-set
#+begin_src elisp
(let* ((default [((domain_suffix . []))])
       (local-file "_direct.eld")
       (local (and (file-exists-p local-file)
                   (with-temp-buffer
                     (insert-file-contents local-file)
                     (read (current-buffer))))))
  (json-serialize
   `((version . 3)
     (rules . ,(vconcat local default)))))
#+end_src

** mitm
:PROPERTIES:
:CUSTOM_ID: 6e15e6bb-74d3-4b61-8cc5-a6a733cc9eec
:END:
#+begin_src json :tangle (zr-org-by-tangle-dir "mitm.json") :mkdirp t
<<gen-mitm-rule-set()>>
#+end_src

#+name: gen-mitm-rule-set
#+begin_src elisp
(let* ((place-holder [((domain_suffix . [".it-just-a-placeholder"]))])
       (local-file "_mitm.eld")
       (local (and (file-exists-p local-file)
                   (with-temp-buffer
                     (insert-file-contents local-file)
                     (read (current-buffer))))))
  (json-serialize
   `((version . 3)
     (rules . [((type . "logical")
                (mode . "and")
                (rules
                 . ,(vconcat [((process_path_regex
                                . ["[\\\\/]mitmproxy(\\.exe)?$"])
                               (invert . t))]
                             (or local place-holder))))]))))
#+end_src

* helper
#+name: find-ip
#+begin_src elisp :var cdn="cf" type=(if (zr-net-has-public-ipv6-addr-p) 6 4)
(let* ((result-dir (format "../cloudflarest/_results/%s-%d/" cdn type))
       (results (directory-files result-dir t "^[^.]+\\.csv$"))
       (result "104.17.133.211"))
  (when results
    (let ((latest (car (last results))))
      (with-temp-buffer
        (insert-file-contents latest)
        (goto-char (point-min))
        (forward-line)
        (let ((pos (point)))
          (search-forward "," (pos-eol))
          (setq result (buffer-substring pos (1- (point))))))))
  result)
#+end_src
