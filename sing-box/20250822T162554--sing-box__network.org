#+title:      sing-box
#+date:       [2025-08-22 Fri 16:25]
#+filetags:   :network:
#+identifier: 20250822T162554

* tangle
#+begin_src elisp
(dolist (c '("client-config"
             "server-config"
             "android-tun"))
  (zr-org-babel-json-format c))
(let* ((zr-local-pls (plstore-open "sing-box.pls"))
       (client-tmp-dir "_tangle/tmp/")
       (tun-dir (expand-file-name "tun/" client-tmp-dir))
       (client-dir "_tangle/client/")
       (hosts-dir "_tangle/hosts/")
       (hosts-uris `(;; ("github" . "https://gitlab.com/ineo6/hosts/-/raw/master/hosts")
                     ("local" . ,(expand-file-name "_hosts"))))
       hosts-files

       (clash-pls (cdr (plstore-get zr-local-pls "clash")))
       (clash-subscribes (plist-get clash-pls :sub))
       (sublink-domain (or (plist-get clash-pls :sublink)
                           "linuxdo.icmpmiao.cc"))
       (sub-dir "_tangle/sub/")
       sub-outbounds
       us-outbounds
       ja-outbounds

       (main-file (expand-file-name "500-main.json" client-dir))
       (tun-file (expand-file-name "500-tun.json" client-dir))
       (rule-sets-dir (expand-file-name "rule-sets/" "_tangle/"))
       (delete-by-moving-to-trash))
  (delete-directory client-tmp-dir t)
  (mkdir hosts-dir t)
  (when-let* ((sys-hosts (pcase system-type
                           ('windows-nt "C:/Windows/System32/Drivers/etc/hosts")
                           (_ "/etc/hosts")))
              ((file-readable-p sys-hosts)))
    (push sys-hosts hosts-files))
  (dolist (h hosts-uris)
    (let ((f (expand-file-name (car h) hosts-dir))
          (uri (cdr h)))
      (if (file-remote-p uri)
          (call-process "curl" nil 0 nil "-Lo" f (cdr h))
        (when (file-readable-p uri)
          (make-symbolic-link uri f t)))
      (push f hosts-files)))

  (mkdir client-tmp-dir t)
  (mkdir sub-dir t)

  (dolist (sub clash-subscribes)
    (when-let* ((name (car sub))
                ((not (string-prefix-p "disable-" name))))
      (condition-case nil
          (let* ((uri (cdr sub))
                 (content
                  (org-file-contents
                   (cond
                    ((string-prefix-p "store://" uri)
                     (with-temp-buffer
                       (insert (org-file-contents (substring uri 8) t))
                       (goto-char (point-min))
                       (re-search-forward "^ \\{4\\}url: \"" nil t)
                       (if-let* ((begin (point))
                                 ((replace-regexp-in-region
                                   "\\([?&]target=\\)[^&\"]+" "\\1singbox"
                                   begin (pos-eol))))
                           (buffer-substring (point) (1- (pos-eol)))
                         (signal 'wrong-type-argument (list 'stringp nil)))))
                    ((string-prefix-p "sb://" uri)
                     (substring uri 5))
                    ((or (string-prefix-p "file://" uri)
                         (file-exists-p uri))
                     uri)
                    (t (format "https://%s/singbox?config=%s&ua=&selectedRules=%%5B%%5D&customRules=%%5B%%5D"
                               ;; https only: "https://clash2sfa.xmdhs.com/sub?disableUrlTest=true&sub=%s"
                               sublink-domain
                               (url-hexify-string uri))))
                   t))
                 (obj (json-parse-string content :object-type 'alist))
                 (outbounds (alist-get "outbounds" obj nil nil #'string=))
                 (name (car sub))
                 (selector (format "s[%s]" name))
                 (urltest (format "u[%s]" name))
                 tags
                 obds)
            (write-region content nil
                          (expand-file-name
                           (file-name-with-extension name "json")
                           sub-dir))
            (mapc
             (lambda (obd)
               (when-let* (((not (or (member (alist-get 'type obd)
                                             '("direct" "selector" "urltest"
                                               "block" "dns"))
                                     (member (alist-get 'method obd)
                                             '("chacha20-poly1305"))
                                     (member (alist-get 'type (alist-get 'transport obd))
                                             '("xhttp"))
                                     (assoc 'plugin obd))))
                           (tag (format "%s[%s]" (alist-get 'tag obd) name)))
                 ;; (cond
                 ;;  ((string-match-p "美国" tag)
                 ;;   (push tag us-outbounds))
                 ;;  ((string-match-p "日本" tag)
                 ;;   (push tag ja-outbounds)))
                 (push tag tags)
                 (push (push `(tag . ,tag) obd) obds)))
             outbounds)
            (if tags
                (let* ((extra `(((type . "selector")
                                 (tag . ,selector)
                                 (outbounds . ,(vconcat (cons urltest tags)))
                                 (default . ,urltest)
                                 (interrupt_exist_connections . :false))
                                ((type . "urltest")
                                 (tag . ,urltest)
                                 (outbounds . ,(vconcat tags)))))
                       (merged (vconcat extra obds))
                       (json `((outbounds . ,merged))))
                  (push (format "s[%s]" name) sub-outbounds)
                  (write-region (json-serialize json) nil
                                (expand-file-name (format "_600-%s.json" name)
                                                  client-tmp-dir)))
              (message "Sub: %s not work." name)))
        (wrong-type-argument (message "Sub: %s not work." name))
        (json-parse-error (message "Sub: %s json not valid." name))
        (json-end-of-file (message "Sub: %s json not valid." name)))))

  (let ((coding-system-for-write 'utf-8))
    (org-babel-tangle))

  (dolist (f (directory-files "." t "^_.+\\.json$" t))
    (make-symbolic-link f client-tmp-dir t))

  (call-process "sing-box" nil nil nil "merge"
                main-file "-C" client-tmp-dir)
  (when (file-directory-p tun-dir)
    (make-symbolic-link main-file tun-dir t)
    (call-process "sing-box" nil nil nil "merge" tun-file "-C" tun-dir))

  (when-let* (((eq 'android system-type))
              (android-dir "/storage/emulated/0/io.nekohasekai.sfa/")
              (version (shell-command-to-string "curl -sxsocks5h://127.0.0.1:10807 --etag-compare _etag.txt --etag-save _etag.txt https://api.github.com/repos/SagerNet/sing-box/releases/latest  | jq -j '.name'"))
              (media-dir "/storage/emulated/0/Android/media")
              (termux-bin-dir (expand-file-name "com.termux/bin" media-dir))
              (android-target-dir (expand-file-name "io.nekohasekai.sfa/" media-dir)))
    (unless (string-empty-p version)
      (mkdir termux-bin-dir t)
      (call-process-shell-command (format "curl -Lxsocks5h://127.0.0.1:10807 -o- 'https://github.com/SagerNet/sing-box/releases/download/v%s/sing-box-%s-android-arm64.tar.gz' | tar -xzvf - -C '%s' --wildcards --no-anchored --transform='s|^.*/||' '*/sing-box'" version version termux-bin-dir)))
    (mkdir android-dir t)
    (dolist (f (file-directory client-dir))
      (copy-file f android-dir t))
    (copy-directory rule-sets-dir android-dir)
    (copy-directory hosts-dir android-dir)
    (zr-android-call-rish
     (string-join
      (list (format "sed -i 's,%s,%s,g' %s/*.json"
                    (expand-file-name "_tangle/")
                    android-target-dir
                    android-dir)
            (format "mv -f %s/* %s"
                    (shell-quote-argument android-dir)
                    (shell-quote-argument android-target-dir)))
      " && ")))
  (plstore-close zr-local-pls))
#+end_src

* config
:PROPERTIES:
:CUSTOM_ID: 3aeea361-850d-4cc8-b292-065568c194d3
:END:

** client
:PROPERTIES:
:tangle-dir: _tangle/tmp
:CUSTOM_ID: 4acfcf10-2bef-4815-af7a-fd5f0271c77f
:END:

*** main
:PROPERTIES:
:CUSTOM_ID: fed30130-cdf9-42cb-805c-50dbb7b4c5bf
:END:
#+header: :var rule_sets_dir=(expand-file-name rule-sets-dir)
#+header: :var cache_path=(expand-file-name "cache.db" "_tangle")
#+header: :var jsdelivr="https://fastly.jsdelivr.net"
#+header: :var dns_strategy=(if (zr-net-has-public-ipv6-addr-p) "prefer_ipv6" "ipv4_only")
#+header: :var dns_default="ld-tuso-us1"
#+header: :var clash_secret=(substring (json-serialize (plist-get (cdr (plstore-get zr-local-pls "clash")) :secret)) 1 -1)
#+name: client-config
#+begin_src json :tangle (zr-org-by-tangle-dir "_500-main.json") :mkdirp t
{
  "dns": {
    "final": "$dns_default",
    "rules": [
      {
        "ip_accept_any": true,
        "rule_set": "tailscale-rules",
        "server": "tailscale-dns"
      },
      {
        "action": "reject",
        "rule_set": "geosite-adblockplus"
      },
      {
        "rule_set": "geosite-geolocation-cn",
        "server": "ali-doh"
      },
      {
        "client_subnet": "114.114.114.114/24",
        "mode": "and",
        "rules": [
          {
            "invert": true,
            "rule_set": "geosite-geolocation-!cn"
          },
          {
            "rule_set": "geoip-cn"
          }
        ],
        "server": "$dns_default",
        "type": "logical"
      },
      {
        "rule_set": "geosite-geolocation-!cn",
        "server": "$dns_default"
      }
    ],
    "servers": [
      {
        "domain_resolver": "ali-quic",
        "path": "/dohgo",
        "server": "hk.alpha.abrdns.com",
        "tag": "ld-tuso-hk",
        "type": "https"
      },
      {
        "domain_resolver": "ali-quic",
        "path": "/dnsgo",
        "server": "runtime.webn.cc",
        "server_port": 2083,
        "tag": "ld-tuso-us1",
        "type": "https"
      },
      {
        "domain_resolver": "ali-quic",
        "path": "/dohgo",
        "server": "us.alpha.abrdns.com",
        "tag": "ld-tuso-us2",
        "type": "https"
      },
      {
        "accept_default_resolvers": false,
        "endpoint": "ts-ep",
        "tag": "tailscale-dns",
        "type": "tailscale"
      },
      {
        "detour": "s[dns]",
        "server": "1.1.1.1",
        "tag": "cf-dot",
        "type": "tls"
      },
      {
        "detour": "s[dns]",
        "server": "8.8.8.8",
        "tag": "google-doh",
        "type": "https"
      },
      {
        "server": "223.5.5.5",
        "tag": "ali-doh",
        "type": "https"
      },
      {
        "server": "223.5.5.5",
        "tag": "ali-quic",
        "type": "quic"
      }
    ],
    "strategy": "$dns_strategy"
  },
  "experimental": {
    "cache_file": {
      "enabled": true,
      "path": "$cache_path",
      "store_rdrc": true
    },
    "clash_api": {
      "access_control_allow_origin": [
        "https://board.zash.run.place",
        "http://127.0.0.1"
      ],
      "access_control_allow_private_network": true,
      "external_controller": "127.0.0.1:9090",
      "secret": "$clash_secret"
    }
  },
  "inbounds": [
    {
      "listen_port": 10807,
      "set_system_proxy": false,
      "tag": "mixed-in",
      "type": "mixed"
    }
  ],
  "log": {
    "level": "info"
  },
  "route": {
    "default_domain_resolver": {
      "server": "ali-quic"
    },
    "final": "direct",
    "rule_set": [
      {
        "format": "source",
        "path": "$rule_sets_dir/proxy.json",
        "tag": "proxy-rules",
        "type": "local"
      },
      {
        "format": "source",
        "path": "$rule_sets_dir/direct.json",
        "tag": "direct-rules",
        "type": "local"
      },
      {
        "format": "source",
        "path": "$rule_sets_dir/tailscale.json",
        "tag": "tailscale-rules",
        "type": "local"
      },
      {
        "format": "source",
        "path": "$rule_sets_dir/mitm.json",
        "tag": "mitm-rules",
        "type": "local"
      },
      {
        "format": "binary",
        "tag": "geoip-cloudflare",
        "type": "remote",
        "url": "$jsdelivr/gh/chocolate4u/Iran-sing-box-rules@rule-set/geoip-cloudflare.srs"
      },
      {
        "format": "binary",
        "tag": "geoip-cn",
        "type": "remote",
        "url": "$jsdelivr/gh/SagerNet/sing-geoip@rule-set/geoip-cn.srs"
      },
      {
        "format": "binary",
        "tag": "geosite-geolocation-cn",
        "type": "remote",
        "url": "$jsdelivr/gh/SagerNet/sing-geosite@rule-set/geosite-geolocation-cn.srs"
      },
      {
        "format": "binary",
        "tag": "geosite-geolocation-!cn",
        "type": "remote",
        "url": "$jsdelivr/gh/SagerNet/sing-geosite@rule-set/geosite-geolocation-!cn.srs"
      },
      {
        "format": "binary",
        "tag": "geosite-category-porn",
        "type": "remote",
        "url": "$jsdelivr/gh/SagerNet/sing-geosite@rule-set/geosite-category-porn.srs"
      },
      {
        "format": "binary",
        "tag": "geosite-category-ai-!cn",
        "type": "remote",
        "url": "$jsdelivr/gh/SagerNet/sing-geosite@rule-set/geosite-category-ai-!cn.srs"
      },
      {
        "format": "binary",
        "tag": "geosite-google@!cn",
        "type": "remote",
        "url": "$jsdelivr/gh/SagerNet/sing-geosite@rule-set/geosite-google@!cn.srs"
      },
      {
        "format": "binary",
        "tag": "geosite-microsoft",
        "type": "remote",
        "url": "$jsdelivr/gh/SagerNet/sing-geosite@rule-set/geosite-microsoft.srs"
      },
      {
        "format": "binary",
        "tag": "geosite-adblockplus",
        "type": "remote",
        "url": "$jsdelivr/gh/SagerNet/sing-geosite@rule-set/geosite-adblockplus.srs"
      }
    ],
    "rules": [
      {
        "outbound": "mitm",
        "rule_set": "mitm-rules"
      },
      {
        "outbound": "ts-ep",
        "rule_set": "tailscale-rules"
      },
      {
        "outbound": "direct",
        "rule_set": "direct-rules"
      },
      {
        "outbound": "s[self]",
        "rule_set": [
          "geosite-category-ai-!cn",
          "geosite-google@!cn",
          "geosite-microsoft"
        ]
      },
      {
        "outbound": "s[this-way]",
        "rule_set": [
          "geosite-category-porn",
          "proxy-rules"
        ]
      },
      {
        "action": "resolve"
      },
      {
        "ip_is_private": true,
        "outbound": "direct",
        "rule_set": [
          "geosite-geolocation-cn",
          "geoip-cn"
        ]
      },
      {
        "outbound": "direct",
        "override_address": "<<find-ip()>>",
        "rule_set": "geoip-cloudflare"
      },
      {
        "mode": "and",
        "outbound": "direct",
        "rules": [
          {
            "rule_set": "geoip-cn"
          },
          {
            "invert": true,
            "rule_set": "geosite-geolocation-!cn"
          }
        ],
        "type": "logical"
      },
      {
        "outbound": "s[this-way]",
        "rule_set": "geosite-geolocation-!cn"
      }
    ]
  }
}
#+end_src

*** bounds
:PROPERTIES:
:CUSTOM_ID: c772b10e-46cb-40e1-96e2-70361ae1c337
:END:
#+begin_src json :tangle (zr-org-by-tangle-dir "_500-bounds.json")
<<gen-client-bounds()>>
#+end_src

*** hosts
:PROPERTIES:
:CUSTOM_ID: b8b405ea-5649-4bb3-9abd-ab60a0332b85
:END:
#+begin_src json :tangle (zr-org-by-tangle-dir "_400-hosts.json")
<<gen-hosts()>>
#+end_src

#+name: gen-hosts
#+begin_src elisp
(let* ((default '((localhost . ["127.0.0.1" "::1"])))
       (tag "local-hosts")
       (hosts (vconcat hosts-files))
       (local-file "_hosts.eld")
       (local (and (file-exists-p local-file)
                   (with-temp-buffer
                     (insert-file-contents local-file)
                     (read (current-buffer))))))
  (json-serialize
   `((dns . ((servers . [((tag . ,tag)
                          (type . "hosts")
                          (path . ,hosts)
                          (predefined . ,(append local default)))])
             (rules . [((ip_accept_any . t)
                        (server . ,tag))]))))))
#+end_src

*** platform

**** pc
:PROPERTIES:
:CUSTOM_ID: cf7be985-bfaa-4ed0-8240-190e588c1fd2
:END:
#+begin_src json :tangle (if (eq system-type 'android) "no" (zr-org-by-tangle-dir "_400-dns.json"))
{
  "inbounds": [
    {
      "listen": "127.0.0.1",
      "listen_port": 53,
      "network": "udp",
      "sniff_override_destination": true,
      "tag": "dns-in",
      "type": "direct"
    }
  ],
  "route": {
    "rules": [
      {
        "action": "sniff",
        "sniffer": "dns"
      },
      {
        "type": "logical",
        "mode": "or",
        "rules": [
          {
            "protocol": "dns"
          },
          {
            "port": 53
          }
        ],
        "action": "hijack-dns"
      }
    ]
  }
}
#+end_src

*** tun
:PROPERTIES:
:tangle-dir: (concat tun-dir)
:END:

**** android
:PROPERTIES:
:CUSTOM_ID: 2970e9bb-61e8-4eb3-bc19-233858560385
:END:
#+name: android-tun
#+begin_src json :tangle (if (eq system-type 'android) (zr-org-by-tangle-dir "500-android.json") "no") :mkdirp t
{
  "inbounds": [
    {
      "address": [
        "172.19.0.1/30",
        "fdfe:dcba:9876::1/126"
      ],
      "auto_route": true,
      "include_package": [
        "com.arlosoft.macrodroid",
        "com.fooview.android.fooview",
        "InfinityLoop1309.NewPipeEnhanced"
      ],
      "mtu": 9000,
      "platform": {
        "http_proxy": {
          "enabled": true,
          "server": "127.0.0.1",
          "server_port": 10807
        }
      },
      "stack": "system",
      "strict_route": true,
      "type": "tun"
    }
  ],
  "route": {
    "auto_detect_interface": true
  }
}
#+end_src

**** linux
:PROPERTIES:
:CUSTOM_ID: 17b75a2d-d55b-4d9d-b248-50ddbb61fdd9
:END:
#+name: linux-tun
#+begin_src json :tangle (if (eq system-type 'gnu/linux) (zr-org-by-tangle-dir "400-linux.json") "no") :mkdirp t
{
  "inbounds": [
    {
      "address": [
        "172.19.0.1/30",
        "fdfe:dcba:9876::1/126"
      ],
      "auto_route": true,
      "auto_redirect": true,
      "mtu": 9000,
      "route_exclude_address_set": ["geoip-cn"],
      "route_exclude_address": [
        "192.168.0.0/16",
        "172.16.0.0/12",
        "10.0.0.0/8",
        "127.0.0.1/8",
        "fd00::/8",
        "::1/128"
      ],
      "stack": "system",
      "strict_route": true,
      "tag": "tun-in",
      "type": "tun"
    }
  ],
  "route": {
    "final": "s[this-way]",
    "rules": [
      {
        "inbound": "tun-in",
        "outbound": "direct",
        "process_name": [ "sing-box" ]
      }
    ],
    "auto_detect_interface": true
  }
}
#+end_src

*** log timestamp
:PROPERTIES:
:CUSTOM_ID: cf1faa67-36f3-4e44-bec2-312bac3dd217
:END:
#+begin_src json :tangle (if (eq system-type 'gnu/linux) "no" (zr-org-by-tangle-dir "_500-log.json"))
{
  "log": {
    "timestamp": true
  }
}
#+end_src

** server
:PROPERTIES:
:tangle-dir: _tangle/server
:END:

*** main
:PROPERTIES:
:CUSTOM_ID: b85ab91b-1175-4b51-9f3c-f37a0b589979
:END:

#+name: server-config
#+begin_src json :tangle (zr-org-by-tangle-dir "500-main.json") :mkdirp t
{
  "dns": {
    "final": "cf-dot",
    "servers": [
      {
        "accept_default_resolvers": false,
        "endpoint": "ts-ep",
        "tag": "tailscale-dns",
        "type": "tailscale"
      },
      {
        "server": "1.1.1.1",
        "tag": "cf-dot",
        "type": "tls"
      }
    ],
    "strategy": "prefer_ipv6"
  },
  "log": {
    "level": "info"
  },
  "route": {
    "auto_detect_interface": true,
    "default_domain_resolver": {
      "server": "cf-dot"
    },
    "rules": [
      {
        "domain": [
          "e-hentai.org"
        ],
        "outbound": "direct"
      }
    ]
  }
}
#+end_src

*** server0
:PROPERTIES:
:CUSTOM_ID: bc0f24ed-8894-45b6-9008-4a5f1879b0f1
:END:
#+begin_src json :tangle (zr-org-by-tangle-dir "500-s0.json")
<<gen-server-bounds(name="vps0")>>
#+end_src

*** server1
:PROPERTIES:
:CUSTOM_ID: 24c5c785-b594-4987-b947-a22e63c24f3e
:END:

#+begin_src json :tangle (zr-org-by-tangle-dir "500-s1.json")
<<gen-server-bounds(name="vps1")>>
#+end_src

*** warp
:PROPERTIES:
:CUSTOM_ID: fd28429a-721b-4fef-80fb-c4cb8848bfd1
:END:
#+begin_src json :tangle (zr-org-by-tangle-dir "400-warp.json")
{
  "outbounds": [
    {
      "type": "socks",
      "tag": "warp",
      "server": "127.0.0.1",
      "server_port": 40000,
      "version": "5"
      }
  ]
}
#+end_src

* bounds
:PROPERTIES:
:header-args:elisp: :var ts-ep='((tag . "ts-ep") (type . "tailscale")) obds='(((tag . "direct") (type . "direct"))) ibds='() ep='() conf='()
:END:
** client
#+name: gen-client-bounds
#+begin_src elisp
(let ((tailscale-state-dir (expand-file-name "tailscale_state" "_tangle"))
      (vps (plstore-find zr-local-pls '(:user-name ("kkky"))))
      s-tags)
  (push `(state_directory . ,tailscale-state-dir) ts-ep)

  ;; misc outbounds
  (push '((server . "127.0.0.1")
          (server_port . 8080)
          (tag . "mitm")
          (type . "http"))
        obds)

  ;; vps outbounds
  (dolist (info vps)
    (let* ((name (car info))
           (attr (cdr info))
           (user-name (plist-get attr :user-name))
           (user-pass (plist-get attr :user-pass))
           (ip-type (if (and (zr-net-has-public-ipv6-addr-p)
                             (plist-get attr :ipv6))
                        :ipv6
                      :ip))
           (ip (plist-get attr ip-type))
           (u-tag (format "u[%s]" name))
           (s-tag (format "s[%s]" name))
           vps-tags)

      (when-let* ((port (plist-get attr :nv-port))
                  (host (plist-get attr :nv-host))
                  (local-port (plist-get attr :nv-local-port))
                  (tag (format "nv[%s]" name))
                  (listen (format "http://127.0.0.1:%d" local-port))
                  (proxy (format "quic://%s:%s@%s" user-name user-pass host))
                  (naive-dir "_tangle/naive/")
                  (host-resolver-rules (format "MAP %s %s" host
                                               (if (eq ip-type :ipv6)
                                                   (format "[%s]" ip)
                                                 ip))))
        (push tag vps-tags)
        (mkdir naive-dir t)
        (write-region (json-serialize `((listen . ,listen)
                                        (proxy . ,proxy)
                                        (host-resolver-rules . ,host-resolver-rules)))
                      nil (expand-file-name name naive-dir))
        (push `((server . "127.0.0.1")
                (server_port . ,local-port)
                (tag . ,tag)
                (type . "http"))
              obds))

      (when-let* ((port (plist-get attr :vl-port))
                  (tag (format "vl[%s]" name)))
        (push tag vps-tags)
        (push `((flow . "xtls-rprx-vision")
                (server . ,ip)
                (server_port . ,port)
                (tag . ,tag)
                (tls . ((enabled . t)
                        (reality . ((enabled . t)
                                    (public_key . ,(plist-get attr :pub-key))
                                    (short_id . ,(plist-get attr :short-id))))
                        (server_name . ,(plist-get attr :vl-host))
                        (utls . ((enabled . t)))))
                (uuid . ,(plist-get attr :user-uuid))
                (type . "vless"))
              obds))

      (when-let* ((port (plist-get attr :any-port))
                  (tag (format "any[%s]" name)))
        (push tag vps-tags)
        (push `((password . ,user-pass)
                (server . ,ip)
                (server_port . ,port)
                (tag . ,tag)
                (tls . ((enabled . t)
                        (server_name . ,(plist-get attr :any-host))))
                (type . "anytls"))
              obds))

      (when-let* ((port (plist-get attr :hy-port))
                  (tag (format "hy[%s]" name)))
        (push tag vps-tags)
        (push `((obfs . ((password . ,(plist-get attr :obfs-pass))
                         (type . "salamander")))
                (password . ,user-pass)
                (server . ,ip)
                (server_port . ,port)
                (tag . ,tag)
                (tls . ((alpn . ["h3"])
                        (enabled . t)
                        (server_name . ,(plist-get attr :hy-host))))
                (type . "hysteria2"))
              obds))

      (when vps-tags
        (push `((interrupt_exist_connections . :false)
                (outbounds . ,(vconcat vps-tags))
                (tag . ,u-tag)
                (type . "urltest"))
              obds)
        (push `((default . ,u-tag)
                (interrupt_exist_connections . :false)
                (outbounds . ,(vconcat (cons u-tag vps-tags)))
                (tag . ,s-tag)
                (type . "selector"))
              obds)
        (push s-tag s-tags))))

  ;; selector
  (let* ((u-self-tag "u[self]")
         (s-self-tag "s[self]")
         (u-this-way "u[this-way]")
         (s-this-way (list s-self-tag))
         (u-sub "u[sub]")
         (s-sub (cons u-sub sub-outbounds))
         (u-us "u{us}")
         (s-us (cons u-us us-outbounds))
         (u-dns "u[dns]")
         (s-dns (cons u-dns '("s[this-way]" "s[self]" "direct")))
         pre-obds
         s-region
         region-obds)

    (when s-tags
      (push `((interrupt_exist_connections . :false)
              (outbounds . ,(vconcat s-tags))
              (tag . ,u-self-tag)
              (type . "urltest"))
            obds)
      (push `((default . ,u-self-tag)
              (interrupt_exist_connections . :false)
              (outbounds . ,(vconcat (cons u-self-tag s-tags)))
              (tag . ,s-self-tag)
              (type . "selector"))
            obds))

    (when sub-outbounds
      (push "s[sub]" s-this-way)
      (push "s[sub]" s-dns)
      (push `(((type . "selector")
               (tag . "s[sub]")
               (outbounds . ,(vconcat s-sub))
               (default . ,u-sub))
              ((type . "urltest")
               (tag . ,u-sub)
               (outbounds . ,(vconcat (cdr s-sub)))))
            pre-obds))
    (when-let* ((region-outbounds (cl-remove nil `(("us" . ,us-outbounds)
                                                   ("ja" . ,ja-outbounds))
                                             :key #'cdr))
                (region-tag "s[region]"))
      (push region-tag s-this-way)
      (dolist (region region-outbounds)
        (let ((tag (format "u{%s}" (car region))))
          (push tag s-region)
          (push `((type . "urltest")
                  (tag . ,tag)
                  (outbounds . ,(vconcat (cdr region))))
                region-obds)))
      (push `((type . "selector")
              (tag . ,region-tag)
              (outbounds . ,(vconcat s-region)))
            region-obds)
      (write-region (json-serialize `((outbounds . ,(vconcat region-obds))))
                    nil (expand-file-name "_900-region.json" client-tmp-dir)))
    (push `(((type . "selector")
             (tag . "s[this-way]")
             (outbounds . ,(vconcat (cons u-this-way s-this-way)))
             (default . ,u-this-way))
            ((type . "urltest")
             (tag . ,u-this-way)
             (outbounds . ,(vconcat s-this-way))))
          pre-obds)
    (push `(((type . "selector")
             (tag . "s[dns]")
             (outbounds . ,(vconcat s-dns))
             (default . ,u-dns))
            ((type . "urltest")
             (tag . ,u-dns)
             (outbounds . ,(vconcat (seq-difference s-dns `(,u-dns "direct"))))))
          pre-obds)
    (setq obds (append (apply #'append pre-obds) obds)))

  ;; bind-interface
  (when-let* ((default-interface-file (expand-file-name "_default-interface"))
              (default-interface (and (file-readable-p default-interface-file)
                                      (string-trim (org-file-contents default-interface-file t t)))))
    (push (cons 'bind_interface default-interface) ts-ep)
    (setq obds
          (mapcar (lambda (obd)
                    (if (or (assoc 'bind_interface obd)
                            (string= (alist-get 'server obd) "127.0.0.1")
                            (member (alist-get 'type obd) '("urltest" "selector")))
                        obd
                      (cons (cons 'bind_interface default-interface) obd)))
                  obds))))
<<return-bounds>>
#+end_src

** server
#+name: gen-server-bounds
#+begin_src elisp
(push '(advertise_exit_node . t) ts-ep)
(let* ((info (plstore-get zr-local-pls name))
       (attr (cdr info))
       (user-name (plist-get attr :user-name))
       (user-pass (plist-get attr :user-pass))
       (cf0-token (plist-get (cdr (plstore-get zr-local-pls "cf0")) :api-token)))

  (when-let* ((port (plist-get attr :vl-port))
              (host (plist-get attr :vl-host))
              (tag (format "vl[%s]" name)))
    (push `((listen . "::")
            (listen_port . ,port)
            (tag . ,tag)
            (tls . ((enabled . t)
                    (reality . ((enabled . t)
                                (handshake . ((server . ,host)
                                              (server_port . 443)))
                                (private_key . ,(plist-get attr :priv-key))
                                (short_id . [,(plist-get attr :short-id)])))
                    (server_name . ,host)))
            (type . "vless")
            (users . [((flow . "xtls-rprx-vision")
                       (name . ,user-name)
                       (uuid . ,(plist-get attr :user-uuid)))]))
          ibds))

  (when-let* ((port (plist-get attr :any-port))
              (host (plist-get attr :any-host))
              (tag (format "any[%s]" name)))
    (push `((listen . "::")
            (listen_port . ,port)
            (tls . ((acme . ((dns01_challenge . ((api_token . ,cf0-token)
                                                 (provider . "cloudflare")))
                             (domain . ,host)
                             (email . ,(plist-get attr :email))))
                    (alpn . ["h3"])
                    (enabled . t)
                    (server_name . ,host)))
            (tag . ,tag)
            (type . "anytls")
            (users . [((password . ,user-pass))]))
          ibds))

  (when-let* ((port (plist-get attr :hy-port))
              (host (plist-get attr :hy-host))
              (tag (format "hy[%s]" name)))
    (push `((down_mbps . 500)
            (listen . "::")
            (listen_port . ,port)
            (masquerade . ,(plist-get attr :masq))
            (obfs . ((password . ,(plist-get attr :obfs-pass))
                     (type . "salamander")))
            (tls . ((acme . ((dns01_challenge . ((api_token . ,cf0-token)
                                                 (provider . "cloudflare")))
                             (domain . ,host)
                             (email . ,(plist-get attr :email))))
                    (alpn . ["h3"])
                    (enabled . t)
                    (server_name . ,host)))
            (tag . ,tag)
            (type . "hysteria2")
            (up_mbps . 500)
            (users . [((password . ,user-pass)
                       (name . ,user-name))]))
          ibds))

  (when-let* ((port (plist-get attr :nv-port))
              (tag (format "nv[%s]" name)))
    (push `((listen . "::")
            (listen_port . ,port)
            (tls . ((acme . ((dns01_challenge . ((api_token . ,cf0-token)
                                                 (provider . "cloudflare")))
                             (domain . ,(plist-get attr :nv-host))
                             (email . ,(plist-get attr :email))))
                    (enabled . t)))
            (tag . ,tag)
            (type . "naive")
            (users . [((password . ,user-pass)
                       (username . ,user-name))]))
          ibds)))
<<return-bounds>>
#+end_src

** return
#+name: return-bounds
#+begin_src elisp
(push ts-ep ep)
(when ep (push `(endpoints . ,(vconcat ep)) conf))
(when obds (push `(outbounds . ,(vconcat obds)) conf))
(when ibds (push `(inbounds . ,(vconcat ibds)) conf))
(json-serialize conf)
#+end_src
* rule-sets
:PROPERTIES:
:tangle-dir: (expand-file-name rule-sets-dir)
:END:
https://sing-box.sagernet.org/zh/configuration/rule-set/headless-rule/

** proxy
:PROPERTIES:
:CUSTOM_ID: 86dd13c4-1322-4298-a426-d3bbed2b8a44
:END:
#+begin_src json :tangle (zr-org-by-tangle-dir "proxy.json") :mkdirp t
<<gen-proxy-rule-set()>>
#+end_src

#+name: gen-proxy-rule-set
#+begin_src elisp
(let* ((rules (zr-net-read-proxy-rules))
       (proxy (gethash "proxy" rules))
       (hosts (gethash "autoproxy_hosts" rules))
       (local-file "_proxy.eld")
       (local (and (file-exists-p local-file)
                   (with-temp-buffer
                     (insert-file-contents local-file)
                     (read (current-buffer)))))
       suffix)
  (cl-mapc
   (lambda (p h)
     (when (string= "HTTP 127.0.0.1:10808" p)
       (push h suffix)))
   proxy hosts)
  (json-serialize
   `((version . 3)
     (rules . ,(vconcat local (vector `((domain_suffix . ,(apply #'vconcat suffix)))))))))
#+end_src

** direct
:PROPERTIES:
:CUSTOM_ID: f436f071-b706-45c3-a131-db6e6e84d786
:END:
#+begin_src json :tangle (zr-org-by-tangle-dir "direct.json") :mkdirp t
<<gen-direct-rule-set()>>
#+end_src

#+name: gen-direct-rule-set
#+begin_src elisp
(let* ((default [((domain_suffix . []))])
       (local-file "_direct.eld")
       (local (and (file-exists-p local-file)
                   (with-temp-buffer
                     (insert-file-contents local-file)
                     (read (current-buffer))))))
  (json-serialize
   `((version . 3)
     (rules . ,(vconcat local default)))))
#+end_src

** mitm
:PROPERTIES:
:CUSTOM_ID: 6e15e6bb-74d3-4b61-8cc5-a6a733cc9eec
:END:
#+begin_src json :tangle (zr-org-by-tangle-dir "mitm.json") :mkdirp t
<<gen-mitm-rule-set()>>
#+end_src

#+name: gen-mitm-rule-set
#+begin_src elisp
(let* ((place-holder [((domain_suffix . [".it-just-a-placeholder"]))])
       (local-file "_mitm.eld")
       (local (and (file-exists-p local-file)
                   (with-temp-buffer
                     (insert-file-contents local-file)
                     (read (current-buffer))))))
  (json-serialize
   `((version . 3)
     (rules . [((type . "logical")
                (mode . "and")
                (rules
                 . ,(vconcat [((process_path_regex
                                . ["[\\\\/]mitmproxy(\\.exe)?$"])
                               (invert . t))]
                             (or local place-holder))))]))))
#+end_src

** tailscale
:PROPERTIES:
:CUSTOM_ID: 614dce44-209a-4405-9eff-47a6edc61ed8
:END:
#+begin_src json :tangle (zr-org-by-tangle-dir "tailscale.json") :mkdirp t
<<gen-tailscale-rule-set()>>
#+end_src

#+name: gen-tailscale-rule-set
#+begin_src elisp
(let* ((place-holder [((domain_suffix . [".ts.net"])
                       (ip_cidr . "100.64.0.0/10"))])
       (local-file "_tailscale.eld")
       (local (and (file-exists-p local-file)
                   (with-temp-buffer
                     (insert-file-contents local-file)
                     (read (current-buffer))))))
  (json-serialize
   `((version . 3)
     (rules . ,(or local place-holder)))))
#+end_src

* helper
#+name: find-ip
#+begin_src elisp :var cdn="cf" type=(if (zr-net-has-public-ipv6-addr-p) 6 4)
(let* ((result-dir (format "../cloudflarest/_results/%s-%d/" cdn type))
       (results (directory-files result-dir t "^[^.]+\\.csv$"))
       (result "104.17.133.211"))
  (when results
    (let ((latest (car (last results))))
      (with-temp-buffer
        (insert-file-contents latest)
        (goto-char (point-min))
        (forward-line)
        (let ((pos (point)))
          (search-forward "," (pos-eol))
          (setq result (buffer-substring pos (1- (point))))))))
  result)
#+end_src
