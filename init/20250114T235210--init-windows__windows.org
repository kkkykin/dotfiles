#+title:      init-windows
#+date:       [2025-01-14 Tue 23:52]
#+filetags:   :windows:
#+identifier: 20250114T235210

* tangle
:PROPERTIES:
:CUSTOM_ID: f821084b-cde6-4f20-b2c6-653052a03c34
:END:
#+begin_src elisp
(make-directory "_tangle" t)
(let (org-confirm-babel-evaluate
      (zr-local-pls (plstore-open "init.pls")))
  (org-babel-tangle nil "^bat$")
  (let ((coding-system-for-write 'utf-8-with-signature))
    (org-babel-tangle nil "^powershell$")))
#+end_src

* profile
:PROPERTIES:
:header-args:bat: :tangle (zr-org-by-tangle-dir "profile.cmd")
:CUSTOM_ID: d961cb32-f35a-4e8e-99f0-bcd5edf4267b
:END:

#+begin_src bat :prologue :epilogue
@echo off
SETLOCAL

call :profile_main %1
#+end_src

** sub

*** misc
:PROPERTIES:
:header-args:bat+: :prologue (format ":%s" (org-element-property :name (org-element-at-point-no-context))) :epilogue "goto :eof"
:CUSTOM_ID: 66e3faf0-2247-4c25-b9ee-1d68a0b24f54
:END:
#+name: wait_seconds
#+begin_src bat 
timeout /t %1 /nobreak >nul 2>&1
#+end_src

#+name: set_rclone_env
#+begin_src bat :var rclone-user=(plist-get (cdr (plstore-get zr-local-pls "rclone")) :user) rclone-pass=(plist-get (cdr (plstore-get zr-local-pls "rclone")) :pass) rclone-addr=(plist-get (cdr (plstore-get zr-local-pls "rclone")) :addr)
#+end_src

#+name: kill_rclone
#+begin_src bat
call :set_rclone_env
curl "-u%rclone-user%:%rclone-pass%" -XPOST "http://%rclone-addr%/core/quit"
#+end_src

#+name: kill_process
#+begin_src bat
taskkill /f /im %1 >nul 2>&1
#+end_src

#+name: run_git_pull
#+begin_src bat
start /b git -C %1 pull --no-edit
#+end_src

#+name: check-prog
#+begin_src org :var program="emacs"
where $program >nul 2>&1
if errorlevel 1 (
  echo "$program not found"
  ENDLOCAL
  goto :eof
)
#+end_src

*** proc
:PROPERTIES:
:header-args:bat+: :prologue (format ":%s\nSETLOCAL" (org-element-property :name (org-element-at-point-no-context))) :epilogue "ENDLOCAL\ngoto :eof"
:CUSTOM_ID: c0ee49e0-fc37-4a12-9412-d54686aaca83
:END:
#+name: run_emacs
#+begin_src bat :var initd=(expand-file-name "../../.emacs.d") profileel=(zr-org-by-tangle-dir "profile.el")
cd %USERPROFILE%
del "%APPDATA%\.emacs.d\server\server"
start /b emacs.exe --daemon "--init-directory=%initd%" -l "%profileel%" -l "org-protocol"
#+end_src

#+name: run_rclone
#+begin_src bat
<<check-prog(program="rclone")>>
call :set_rclone_env
start /b rclone rcd "--rc-serve" "--rc-serve-no-modtime" "--rc-user=%rclone-user%" "--rc-pass=%rclone-pass%" "--rc-addr=%rclone-addr%" --no-console
#+end_src

#+name: run_ahk
#+begin_src bat :var ahk-script=(expand-file-name "../ahk/_tangle/default.ahk")
<<check-prog(program="autohotkey")>>
start /b autohotkey /script "%ahk-script%"
#+end_src

#+name: run_gpg_agent
#+begin_src bat
<<check-prog(program="gpgconf")>>
start /b gpgconf.exe --launch gpg-agent
#+end_src

#+name: run_aria2c
#+begin_src bat :var dir=(expand-file-name "../aria2/_tangle") all_proxy=(plist-get (cdr (plstore-get zr-local-pls "proxy")) :proxy)
<<check-prog(program="aria2c")>>
start /b /d "%dir%" /abovenormal aria2c.exe --conf-path aria2.conf
#+end_src

#+name: run_onedrive
#+begin_src bat
start /d "%USERPROFILE%\AppData\Local\Microsoft\OneDrive" OneDrive.exe /background
#+end_src

#+name: run_openresty
#+begin_src bat
<<check-prog(program="openresty")>>
start /b openresty -p %USERPROFILE%\scoop\apps\openresty\current
#+end_src

#+name: run_alist
#+begin_src bat :var no_proxy=(concat (getenv "no_proxy") ",.alipan.com,.aliyundrive.net")
<<check-prog(program="alist")>>
start /b alist server
#+end_src

#+name: run_mpd
#+begin_src bat
<<check-prog(program="mpd")>>
start /b mpd "%USERPROFILE%\scoop\persist\mpd\mpd.conf"
#+end_src

#+name: run_sing_box
#+begin_src bat :var config-dir=(expand-file-name "../sing-box/_tangle/client/")
start /b sing-box run -C "%config-dir%"
#+end_src

#+name: run_naive
#+begin_src bat :var config=(expand-file-name "../sing-box/_tangle/naive/config.json")
start /b naive "%config%"
#+end_src

**** trojan
:PROPERTIES:
:header-args+: :var trojan-dir=(concat (getenv "USERPROFILE") "\\scoop\\app\\trojan-go")
:CUSTOM_ID: 2374627e-d10d-46d4-8ff7-6f1d9d9a7b63
:END:

#+begin_src elisp :tangle (zr-org-by-tangle-dir "profile.el") :mkdirp t
(ignore-errors
  (delete-file (expand-file-name "trojan.log" trojan-dir) t)
  (dolist (f (directory-files-recursively
              (substitute-in-file-name "$USERPROFILE/AppData/Roaming/Tencent/QQ/AuTemp/")
              (rx bos "cfg.db" eos)))
    (rename-file f (file-name-with-extension f "bak") t))
  (delete-file (substitute-in-file-name "$USERPROFILE/ansel/tmp")))
#+end_src

#+name: run_trojan
#+begin_src bat :var config=(expand-file-name "../trojan-go/_tangle/config.json")
start /b /abovenormal /d "%trojan-dir%" trojan-go.exe -config "%config%"
#+end_src

** main
:PROPERTIES:
:CUSTOM_ID: 9376588a-03e6-48d7-b125-fe4025b5d1f5
:END:
#+name: profile_main
#+begin_src bat :prologue (format ":%s\nSETLOCAL" (org-element-property :name (org-element-at-point-no-context))) :epilogue :var git_pull_dir_1=(expand-file-name "../../.emacs.d") git_pull_dir_2=(expand-file-name "../../.config")
set "arg=%1"

if /i "%arg%"=="emacs" (
    call :kill_process emacs.exe
    call :wait_seconds 1
    call :run_emacs
) else if /i "%arg%"=="ahk" (
    call :kill_process autohotkeyux.exe
    call :wait_seconds 1
    call :run_ahk
) else if /i "%arg%"=="trojan-go" (
    call :kill_process trojan-go.exe
    call :wait_seconds 1
    call :run_trojan
) else if /i "%arg%"=="sing-box" (
    call :kill_process sing-box.exe
    call :wait_seconds 1
    call :run_sing_box
) else if /i "%arg%"=="naive" (
    call :kill_process naive.exe
    call :wait_seconds 1
    call :run_naive
) else if /i "%arg%"=="alist" (
    call :kill_process alist.exe
    call :wait_seconds 1
    call :run_alist
) else if /i "%arg%"=="rclone" (
    call :kill_rclone
    call :wait_seconds 3
    call :run_rclone
) else if /i "%arg%"=="aria2" (
    call :kill_process aria2c.exe
    call :wait_seconds 1
    call :run_aria2c
) else if /i "%arg%"=="init" (
    call :run_emacs
    call :wait_seconds 1
    call :run_rclone
    call :wait_seconds 1
    call :run_ahk
    call :wait_seconds 2
    rem call :run_trojan
    call :run_sing_box
    call :wait_seconds 3
    call :run_gpg_agent
    call :wait_seconds 3
    call :run_aria2c
    call :wait_seconds 3
    call :run_git_pull %git_pull_dir_1%
    call :wait_seconds 3
    call :run_onedrive
    call :wait_seconds 3
    call :run_openresty
    call :wait_seconds 3
    call :run_alist
    call :wait_seconds 3
    call :run_mpd
    call :wait_seconds 3
    call :run_git_pull %git_pull_dir_2%
    call :wait_seconds 3
    call :run_naive
) else (
  echo "Please give an valid argument."
)

ENDLOCAL
#+end_src

* Scripts
:PROPERTIES:
:CUSTOM_ID: e56356f4-7700-435b-b354-55e246a3b53b
:END:

** Toggle-WindowsUpdate
:PROPERTIES:
:CUSTOM_ID: eaa546a8-f4e2-4173-9e95-ee60389fcfaa
:END:
#+begin_src powershell :comments no :tangle (zr-org-by-tangle-dir "toggle-windows-update.ps1")
#Requires -RunAsAdministrator

param (
    [ValidateSet("Suspend", "Resume")]
    [string]$Action,
    [int]$Weeks
)

# 注册表路径
$regPath = "HKLM:\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings"

# 显示通知函数
function Show-Notification {
    param(
        [string]$Title,
        [string]$Message,
        [string]$ActionText = "打开更新设置"
    )
    
    try {
        Add-Type -AssemblyName System.Windows.Forms
        
        # 创建NotifyIcon
        $balloon = New-Object System.Windows.Forms.NotifyIcon
        $balloon.Icon = [System.Drawing.SystemIcons]::Information
        $balloon.BalloonTipTitle = $Title
        $balloon.BalloonTipText = $Message
        $balloon.BalloonTipIcon = "Info"
        $balloon.Visible = $true
        
        # 显示通知
        $balloon.ShowBalloonTip(10000) # 显示10秒
        
        # 点击事件
        $balloon.Add_BalloonTipClicked({
            Start-Process "ms-settings:windowsupdate"
        })
        
        # 10秒后自动关闭
        $job = Start-Job -ScriptBlock {
            param($balloonPath)
            Start-Sleep -Seconds 10
            if (Test-Path $balloonPath) {
                $balloon = Get-Item $balloonPath | Import-Clixml
                if ($balloon -and $balloon.Visible) {
                    $balloon.Dispose()
                }
            }
        } -ArgumentList "$env:TEMP\balloon.xml"
        
        # 保存NotifyIcon对象以便后台作业访问
        $balloon | Export-Clixml -Path "$env:TEMP\balloon.xml"
        
        return
    }
    catch {
        Write-Warning "通知显示失败: $_"
    }
}

# 检查当前更新状态
function Check-UpdateStatus {
    $pauseUpdates = Get-ItemProperty -Path $regPath -Name "PauseUpdatesExpiryTime" -ErrorAction SilentlyContinue
    
    if ($pauseUpdates) {
        $expiryTime = [DateTime]::Parse($pauseUpdates.PauseUpdatesExpiryTime)
        $currentTime = Get-Date
        
        if ($expiryTime -gt $currentTime) {
            $daysRemaining = ($expiryTime - $currentTime).Days
            Write-Host "Windows更新已暂停，将在 $daysRemaining 天后恢复。" -ForegroundColor Yellow
            return $true
        } else {
            Write-Host "Windows更新暂停已过期。" -ForegroundColor Red
            return $false
        }
    } else {
        Write-Host "Windows更新当前处于活动状态。" -ForegroundColor Green
        return $false
    }
}

# 暂停更新
function Suspend-Updates {
    param(
        [int]$weeks = 1000
    )
    
    $startTime = Get-Date
    $endTime = $startTime.AddDays($weeks * 7)
    
    # 格式化为ISO 8601格式
    $startTimeStr = $startTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
    $endTimeStr = $endTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
    
    # 设置注册表值
    Set-ItemProperty -Path $regPath -Name "PauseFeatureUpdatesStartTime" -Value $startTimeStr -Type String -Force
    Set-ItemProperty -Path $regPath -Name "PauseFeatureUpdatesEndTime" -Value $endTimeStr -Type String -Force
    Set-ItemProperty -Path $regPath -Name "PauseQualityUpdatesStartTime" -Value $startTimeStr -Type String -Force
    Set-ItemProperty -Path $regPath -Name "PauseQualityUpdatesEndTime" -Value $endTimeStr -Type String -Force
    Set-ItemProperty -Path $regPath -Name "PauseUpdatesStartTime" -Value $startTimeStr -Type String -Force
    Set-ItemProperty -Path $regPath -Name "PauseUpdatesExpiryTime" -Value $endTimeStr -Type String -Force
    
    Write-Host "Windows更新已暂停 $weeks 周，将于 $endTime 恢复。" -ForegroundColor Yellow
    
    # 显示通知
    Show-Notification -Title "Windows更新已暂停" -Message "更新已暂停 $weeks 周，将于 $endTime 恢复。"
}

# 恢复更新
function Resume-Updates {
    # 删除暂停相关的注册表项
    $pauseKeys = @(
        "PauseFeatureUpdatesStartTime",
        "PauseFeatureUpdatesEndTime",
        "PauseQualityUpdatesStartTime",
        "PauseQualityUpdatesEndTime",
        "PauseUpdatesStartTime",
        "PauseUpdatesExpiryTime"
    )
    
    foreach ($key in $pauseKeys) {
        Remove-ItemProperty -Path $regPath -Name $key -ErrorAction SilentlyContinue -Force
    }
    
    Write-Host "Windows更新已恢复。" -ForegroundColor Green
    
    # 显示通知
    Show-Notification -Title "Windows更新已恢复" -Message "Windows更新已恢复。"
}

# 主程序逻辑
$isPaused = Check-UpdateStatus

# 处理命令行参数
if ($Action -eq "Resume") {
    # 明确要求恢复更新
    Resume-Updates
}
elseif ($Weeks -gt 0) {
    # 指定了暂停周数，无论当前状态如何都重新设置暂停时间
    Suspend-Updates -weeks $Weeks
}
elseif ($Action -eq "Suspend") {
    # 明确要求暂停但未指定周数，使用默认
    Suspend-Updates
}
else {
    # 没有指定参数，根据当前状态自动决定
    if ($isPaused) {
        Resume-Updates
    } else {
        Suspend-Updates
    }
}

# 清理临时文件
if (Test-Path "$env:TEMP\balloon.xml") {
    Remove-Item "$env:TEMP\balloon.xml" -Force
}
#+end_src

** save-with-sudo
:PROPERTIES:
:CUSTOM_ID: b55d374f-2bac-42ad-8da5-55dc220d4ecf
:END:
#+begin_src powershell :tangle (zr-org-by-tangle-dir "save-with-sudo.ps1")
param(
    [string]$FilePath
)

# 处理管道输入或直接输入
if (Test-Path $FilePath) {
    $content = $input | Out-String
} else {
    Write-Error "No file path specified."
    exit 1
}

# 创建临时文件（在用户临时目录中）
$tempFile = [System.IO.Path]::GetTempFileName()

try {
    # 将内容写入临时文件
    Out-File -Encoding utf8 -FilePath "$tempFile" -InputObject "$content"

    # 备份权限
    $acl = Get-Acl $FilePath
    
    $cw = (Get-Location).Path
    sudo -D "$cw" mv -f "$tempFile" "$FilePath"
    
    # 检查执行结果
    if ($LASTEXITCODE -ne 0) {
        # 恢复权限
        Set-Acl $FilePath $acl

        Write-Error "Failed to save file with sudo. Exit code: $LASTEXITCODE"
        exit $LASTEXITCODE
    }
}
catch {
    Write-Error "Error occurred: $_"
    # 如果出错，保留临时文件以便恢复
    Write-Warning "Temporary file preserved at: $tempFile"
    exit 1
}
#+end_src

** skip-online-account
:PROPERTIES:
:CUSTOM_ID: 369095a1-aa9d-4009-9d67-87cb9480e60a
:END:
#+begin_src bat
reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\OOBE /v BypassNRO /t REG_DWORD /d 1 /f shutdown /r /t 0
#+end_src

* Custom

** Explorer Network Driver
:PROPERTIES:
:CUSTOM_ID: dfb6afbf-dc39-4afd-a5be-d9e935311654
:END:
#+begin_src bat :eval no
reg add HKLM\SYSTEM\CurrentControlSet\Services\WebClient\Parameters /v BasicAuthLevel /t reg_dword /d 2 /f
reg add HKLM\SYSTEM\CurrentControlSet\Services\WebClient\Parameters /v FileSizeLimitInBytes /t reg_dword /d 0xffffffff /f

net stop WebClient
net start WebClient

#+end_src

* Service
:PROPERTIES:
:CUSTOM_ID: 6645c844-7504-45d0-86b4-11de2bdd07ba
:END:
#+name: services
| name    | prog   | args                                                                                     | task-args |
|---------+--------+------------------------------------------------------------------------------------------+-----------|
| profile | wt.exe | (format "'-w' '_quake' '-p' 'Command Prompt' '%s'" (zr-org-by-tangle-dir "profile.cmd")) |           |

#+name: services-bak
| name  | prog           | args                                                                            | task-args |
|-------+----------------+---------------------------------------------------------------------------------+-----------|
| emacs | runemacs.exe   | (format "'--daemon' '--init-directory=%s'" (expand-file-name "../../.emacs.d")) |           |
| ahk   | autohotkey.exe | (format "'/script' '%s'" (expand-file-name "../ahk/default.ahk"))               |           |

#+begin_src elisp :var cmd=create-serv-cmd()
(let ((cmd-file (expand-file-name "_output/create-service.cmd")))
  (make-directory (file-name-directory cmd-file) t)
  (write-region cmd nil cmd-file)
  (kill-new cmd-file)
  (message "%s" "Please run the copied script."))
#+end_src

#+name: create-serv-cmd
#+begin_src elisp :var services=services[]
(mapconcat
 (lambda (s)
   (pcase-let ((`(,name ,prog ,args ,task-args) s))
     (unless (file-name-absolute-p prog)
       (setq prog (subst-char-in-string ?/ ?\\ (executable-find prog))))
     (when (string-match-p (rx bos ?( (+ anychar) ?) eos) args)
       (setq args (eval (car (read-from-string args)))))
     ;; <<env-call>>
     (format "C:\\Windows\\System32\\schtasks.exe /create /ru %s /it /sc onlogon /tn \"%s\" /tr \"'%s' %s\" %s"
             user-login-name name prog args task-args)))
 services "\n")
#+end_src

#+name: env-call
#+begin_src elisp :eval no
(when-let* ((env (executable-find "env")))
  (setq args (format "'-C' '%s' '%s' %s" (getenv "USERPROFILE") prog args)
        prog (subst-char-in-string ?/ ?\\ env)))
#+end_src
