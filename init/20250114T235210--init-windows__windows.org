#+title:      init-windows
#+date:       [2025-01-14 Tue 23:52]
#+filetags:   :windows:
#+identifier: 20250114T235210

* tangle
#+begin_src elisp
(make-directory "_tangle" t)
(setq-local zr-local-rclone-secrets
            (car (auth-source-search
                  :max 1 :host "127.0.0.1" :port 5572)))
(let (org-confirm-babel-evaluate)
  (org-babel-tangle))
#+end_src

* profile
:PROPERTIES:
:header-args:bat: :tangle (zr-org-by-tangle-dir "profile.cmd")
:CUSTOM_ID: d961cb32-f35a-4e8e-99f0-bcd5edf4267b
:END:

#+begin_src bat :prologue :epilogue
@echo off
SETLOCAL

call :profile_main %1
#+end_src

** sub

*** misc
:PROPERTIES:
:header-args:bat+: :prologue (format ":%s" (org-element-property :name (org-element-at-point-no-context))) :epilogue "goto :eof"
:CUSTOM_ID: 66e3faf0-2247-4c25-b9ee-1d68a0b24f54
:END:
#+name: wait_seconds
#+begin_src bat 
timeout /t %1 /nobreak >nul 2>&1
#+end_src

#+name: kill_process
#+begin_src bat
taskkill /f /im %1 >nul 2>&1
#+end_src

#+name: run_git_pull
#+begin_src bat
start /b git -C %1 pull --no-edit
#+end_src

#+name: check-prog
#+begin_src org :var program="emacs"
where $program >nul 2>&1
if errorlevel 1 (
  echo "$program not found"
  ENDLOCAL
  goto :eof
)
#+end_src

*** proc
:PROPERTIES:
:header-args:bat+: :prologue (format ":%s\nSETLOCAL" (org-element-property :name (org-element-at-point-no-context))) :epilogue "ENDLOCAL\ngoto :eof"
:CUSTOM_ID: c0ee49e0-fc37-4a12-9412-d54686aaca83
:END:
#+name: run_emacs
#+begin_src bat :var initd=(expand-file-name "../../.emacs.d") profileel=(zr-org-by-tangle-dir "profile.el")
cd %USERPROFILE%
start /b emacs.exe --daemon "--init-directory=%initd%" -l "%profileel%" -l "org-protocol"
#+end_src

#+name: run_rclone
#+begin_src bat :var rclone-user=(plist-get zr-local-rclone-secrets :user) rclone-pass=(auth-info-password zr-local-rclone-secrets)
<<check-prog(program="rclone")>>
start /b rclone rcd "--rc-user=%rclone-user%" "--rc-pass=%rclone-pass%" --rc-addr=127.0.0.1:5572 --no-console
#+end_src

#+name: run_ahk
#+begin_src bat :var ahk-script=(expand-file-name "../ahk/_tangle/default.ahk")
<<check-prog(program="autohotkey")>>
start /b autohotkey /script "%ahk-script%"
#+end_src

#+name: run_gpg_agent
#+begin_src bat
<<check-prog(program="gpgconf")>>
start /b gpgconf.exe --launch gpg-agent
#+end_src

#+name: run_aria2c
#+begin_src bat :var conf=(expand-file-name "../aria2/aria2.conf")
<<check-prog(program="aria2c")>>
start /b /abovenormal aria2c.exe --conf-path "%conf%"
#+end_src

#+name: run_onedrive
#+begin_src bat
start /d "%USERPROFILE%\AppData\Local\Microsoft\OneDrive" OneDrive.exe /background
#+end_src

#+name: run_openresty
#+begin_src bat
<<check-prog(program="openresty")>>
start /b openresty -p %USERPROFILE%\scoop\apps\openresty\current
#+end_src

#+name: run_alist
#+begin_src bat :var no_proxy=(concat (getenv "no_proxy") ",.alipan.com,.aliyundrive.net")
<<check-prog(program="alist")>>
start /b alist server
#+end_src

#+name: run_mpd
#+begin_src bat
<<check-prog(program="mpd")>>
start /b mpd "%USERPROFILE%\scoop\persist\mpd\mpd.conf"
#+end_src

**** trojan
:PROPERTIES:
:header-args+: :var trojan-dir=(concat (getenv "USERPROFILE") "\\scoop\\app\\trojan-go")
:CUSTOM_ID: 2374627e-d10d-46d4-8ff7-6f1d9d9a7b63
:END:

#+begin_src elisp :tangle (zr-org-by-tangle-dir "profile.el") :mkdirp t
(ignore-errors
  (delete-file (expand-file-name "trojan.log" trojan-dir) t)
  (delete-file (substitute-in-file-name "$USERPROFILE/ansel/tmp"))
  (dolist (f (directory-files-recursively
              (substitute-in-file-name "$USERPROFILE/AppData/Roaming/Tencent/QQ/AuTemp/")
              (rx bos "cfg.db" eos)))
    (rename-file f (file-name-with-extension f "bak") t)))
#+end_src

#+name: run_trojan
#+begin_src bat
start /b /abovenormal /d "%trojan-dir%" trojan-go.exe
#+end_src

** main
:PROPERTIES:
:CUSTOM_ID: 9376588a-03e6-48d7-b125-fe4025b5d1f5
:END:
#+name: profile_main
#+begin_src bat :prologue (format ":%s\nSETLOCAL" (org-element-property :name (org-element-at-point-no-context))) :epilogue :var git_pull_dir_1=(expand-file-name "../../.emacs.d") git_pull_dir_2=(expand-file-name "../../.config")
set "arg=%1"

if /i "%arg%"=="emacs" (
    call :kill_process emacs.exe
    call :wait_seconds 1
    call :run_emacs
) else if /i "%arg%"=="ahk" (
    call :kill_process autohotkeyux.exe
    call :wait_seconds 1
    call :run_ahk
) else if /i "%arg%"=="alist" (
    call :kill_process alist.exe
    call :wait_seconds 1
    call :run_alist
) else if /i "%arg%"=="init" (
    call :run_emacs
    call :wait_seconds 1
    call :run_rclone
    call :wait_seconds 1
    call :run_ahk
    call :wait_seconds 2
    call :run_trojan
    call :wait_seconds 3
    call :run_gpg_agent
    call :wait_seconds 3
    call :run_aria2c
    call :wait_seconds 3
    call :run_git_pull %git_pull_dir_1%
    call :wait_seconds 3
    call :run_onedrive
    call :wait_seconds 3
    call :run_openresty
    call :wait_seconds 3
    call :run_alist
    call :wait_seconds 3
    call :run_mpd
    call :wait_seconds 3
    call :run_git_pull %git_pull_dir_2%
) else (
  echo "Please give an valid argument."
)

ENDLOCAL
#+end_src

* Scripts
:PROPERTIES:
:CUSTOM_ID: e56356f4-7700-435b-b354-55e246a3b53b
:END:
* Custom

** Explorer Network Driver
#+begin_src bat :eval no
reg add HKLM\SYSTEM\CurrentControlSet\Services\WebClient\Parameters /v BasicAuthLevel /t reg_dword /d 2 /f
reg add HKLM\SYSTEM\CurrentControlSet\Services\WebClient\Parameters /v FileSizeLimitInBytes /t reg_dword /d 0xffffffff /f

net stop WebClient
net start WebClient

#+end_src

* Service
#+name: services
| name    | prog   | args                                                                                     | task-args |
|---------+--------+------------------------------------------------------------------------------------------+-----------|
| profile | wt.exe | (format "'-w' '_quake' '-p' 'Command Prompt' '%s'" (zr-org-by-tangle-dir "profile.cmd")) |           |

#+name: services-bak
| name  | prog           | args                                                                            | task-args |
|-------+----------------+---------------------------------------------------------------------------------+-----------|
| emacs | runemacs.exe   | (format "'--daemon' '--init-directory=%s'" (expand-file-name "../../.emacs.d")) |           |
| ahk   | autohotkey.exe | (format "'/script' '%s'" (expand-file-name "../ahk/default.ahk"))               |           |

#+begin_src elisp :var cmd=create-serv-cmd()
(let ((cmd-file (expand-file-name "_output/create-service.cmd")))
  (make-directory (file-name-directory cmd-file) t)
  (write-region cmd nil cmd-file)
  (kill-new cmd-file)
  (message "%s" "Please run the copied script."))
#+end_src

#+name: create-serv-cmd
#+begin_src elisp :var services=services[]
(mapconcat
 (lambda (s)
   (pcase-let ((`(,name ,prog ,args ,task-args) s))
     (unless (file-name-absolute-p prog)
       (setq prog (subst-char-in-string ?/ ?\\ (executable-find prog))))
     (when (string-match-p (rx bos ?( (+ anychar) ?) eos) args)
       (setq args (eval (car (read-from-string args)))))
     ;; <<env-call>>
     (format "C:\\Windows\\System32\\schtasks.exe /create /ru %s /it /sc onlogon /tn \"%s\" /tr \"'%s' %s\" %s"
             user-login-name name prog args task-args)))
 services "\n")
#+end_src

#+name: env-call
#+begin_src elisp :eval no
(when-let* ((env (executable-find "env")))
  (setq args (format "'-C' '%s' '%s' %s" (getenv "USERPROFILE") prog args)
        prog (subst-char-in-string ?/ ?\\ env)))
#+end_src
