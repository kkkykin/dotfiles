#+title:      ahk
#+date:       [2025-01-14 Tue 23:19]
#+filetags:   :windows:
#+identifier: 20250114T231945

* tangle
#+begin_src elisp
(org-babel-tangle)
#+end_src

* default
:PROPERTIES:
:header-args:ahk: :tangle (zr-org-by-tangle-dir "default.ahk")
:END:

** include
:PROPERTIES:
:CUSTOM_ID: 7bfba842-bc68-4665-9af1-a37da905366a
:END:
#+begin_src ahk
#SingleInstance Force
#Include 'mouse.ahk'
#Include '*i %A_ScriptDir%/../_pre_local.ahk'
#+end_src

** vars
:PROPERTIES:
:CUSTOM_ID: 60239ccb-cc1a-41e3-b25e-76ca74830f16
:END:
#+name: setup-vars
#+begin_src elisp
(mapconcat
 (lambda (var) (format "%s := '%s'\n" (car var) (cdr var)))
 `(("gOrgDir" . ,default-directory)
   ("gMacroDir" . ,(expand-file-name "_macro"))))
#+end_src

#+begin_src ahk
<<setup-vars()>>
macroRecorderPid := 0
macroRunningPid := 0
rapidFireEnable := 0
log_file := gOrgDir '/_ahk.log'
#+end_src

** universal-arg
:PROPERTIES:
:CUSTOM_ID: d275a01a-d285-46de-bf5c-698f5300653b
:END:
#+begin_src ahk
myNumArg := 1

findInArray(a, i) {
  Loop a.Length{
    if a[A_Index] = i
      return A_Index
  }
  return False
}

tmpMsg(msg, level := 0, timeout := False){
  if (level = 0) {
    tooltip(msg)
    SetTimer () => ToolTip(), (timeout ? -timeout : -1000)
  } else {
    TrayTip('AHK', msg, level)
    SetTimer () => TrayTip(), (timeout ? -timeout : -5000)
  }
}

setNumArg(n, clear := False){
  global myNumArg
  static myNumKeys := []
  if clear {
    myNumArg := 1
  } else {
    if (myNumKeys.length = 0) {
      Loop 10{
        myNumKeys.push('<!' A_Index - 1)
      }
    }
    if (findInArray(myNumKeys, A_PriorHotkey)){
      myNumArg := 10 * myNumArg + n
    }
    else
      myNumArg := n
    tmpMsg(myNumArg)
    SetTimer clearNumArg, -10000
  }
}

clearNumArg(){
  setNumArg(1, True)
  tmpMsg('Num Clear')
  SetTimer clearNumArg, 0
}
#+end_src

** App
*** edge
:PROPERTIES:
:CUSTOM_ID: c100aa36-9a58-4e66-b85d-c6256dba7dee
:END:
#+begin_src ahk
findEdgeDefaultProfile(edgeWins) {
  static defaultProfileRegex := ' - Personal - Microsoft​ Edge$'
  Loop edgeWins.Length {
    if RegExMatch(WinGetTitle(edgeWins[A_Index]), defaultProfileRegex)
      return A_Index
  }
  return False
}

edgeToggle(){
  global myNumArg
  static edgeWinName := 'ahk_exe msedge.exe'
  if WinActive(edgeWinName) {
    WinMinimize
    return
  }
  local edgeWins := WinGetList(edgeWinName)
  switch edgeWins.length {
    case 0: Run(EnvGet('ProgramFiles(x86)') '\Microsoft\Edge\Application\msedge.exe --profile-directory=Default')
    case 1: WinActivate(edgeWins[1])
    default:
    {
      local default := findEdgeDefaultProfile(edgeWins)
      if (myNumArg = 1) {
        WinActivate(edgeWins[default or myNumArg])
      } else {
        edgeWins.RemoveAt[default]
        WinActivate(edgeWins[Min(edgeWins.Length, myNumArg - 1)])
        clearNumArg
      }
    }
  }
}
#+end_src
** Misc Func
:PROPERTIES:
:CUSTOM_ID: f80b46cf-63bf-45c3-8a75-fafa356597a2
:END:
#+begin_src ahk
centerWindow(window := 'A'){
  WinGetPos ,, &Width, &Height, window
  WinMove (A_ScreenWidth/2)-(Width/2), (A_ScreenHeight/2)-(Height/2),,, window
}

capturePrintWindow(window := 'A'){
  Run A_ComSpec Format(' /c ""ffmpeg" "-f" "gdigrab" "-framerate" "1" "-i" "title={1}" "-vframes" "1" "-f" "matroska" "-" | "ffplay" "-""', WinGetTitle(window))
}

winMinimizeAll(win := 'A') {
  windows := WinGetList(win)
  
  for hwnd in windows {
    try {
      WinMinimize(hwnd)
    }
  }
}
#+end_src

#+begin_src ahk
LogMessage(message) {
  timestamp := FormatTime(A_Now, "yyyy-MM-dd HH:mm:ss")
  log_entry := timestamp " - " message "`n"
  FileAppend(log_entry, log_file)
}
#+end_src

#+begin_src ahk
processLiveP(pid, pname){
  return ProcessExist(pid) && pname == ProcessGetName(pid)
}
#+end_src
** rapid-fire
:PROPERTIES:
:CUSTOM_ID: acdfba9b-92d1-4a70-b670-aac0364019c8
:END:
#+begin_src ahk
RapidFire(key_send, key_hold := False, delay := 25){
  SetKeyDelay delay, delay
  if !key_hold {
    key_hold := key_send
  }
  While GetKeyState(key_hold, "P") {
    SendEvent '{' key_send '}'
  }
  global rapidFireEnable
  if (rapidFireEnable = 1) {
    rapidFireEnable  := 0
  }
}
#+end_src
** Macro
:PROPERTIES:
:CUSTOM_ID: b92cbeec-0287-43f2-a102-9114b2590197
:END:

#+begin_src ahk
getWinMacroDirNames(win){
  activeWinTitle := Trim(WinGetTitle(win))
  activeWinClass := WinGetClass(win)
  activeWinExe := WinGetProcessName(win)
  return [activeWinTitle, 'ahk_class ' activeWinClass, 'ahk_exe ' activeWinExe, 'global']
}
#+end_src

#+begin_src ahk
clearMacroStatus(){
  global macroRunningPid
  if processLiveP(macroRunningPid, 'AutoHotkeyUX.exe') {
    ProcessClose macroRunningPid
    tmpMsg('Macro Stopped', 1)
  }
  macroRunningPid := 0
}
#+end_src

#+name: run-macro
#+begin_src ahk
runMacro(keyName) {
  dirNames := getWinMacroDirNames('A')

  for dirName in dirNames {
    pattern := gMacroDir '\' dirName '\' keyName '__*.ahk'
    
    if FileExist(pattern) {
      try {
        global macroRunningPid
        global myNumArg
        cnt := myNumArg
        clearNumArg
        Loop Files, pattern, 'F' {
          RunWait '"' A_AhkPath '" /restart "' A_LoopFileFullPath '" ' cnt ,,, &macroRunningPid
          clearMacroStatus
          return
        }
      } catch as e {
        MsgBox '运行脚本时出错: ' e.Message
        return
      }
    }
  }
  return
}
#+end_src

#+begin_src ahk
UpdateMacroSetting(pSource, pDst, pSleep){
  sourceFile := FileOpen(pSource, 'r')
  dstFile := FileOpen(pDst, 'w')

  static prologue := 'if (A_Args.Length < 1) {`nA_Args.Push("1")`n}`n'
  dstFile.Write(prologue)

  while !sourceFile.AtEOF {
    line := sourceFile.ReadLine()
    if RegExMatch(line, '^ExitApp\(\)$'){
      break
    } else if RegExMatch(line, '^(StartingValue := 0|i := RegRead|RegWrite)'){
      continue
    } else {
      modLine := RegExReplace(line, '^Loop\(1\)', 'Loop(A_args[1])')
      if pSleep = 1{
        modLine := RegExReplace(modLine, '^;Sleep\(', 'Sleep(')
      }
      dstFile.Writeline modLine
    }
  }

  sourceFile.Close()
  dstFile.Close()
}
#+end_src

#+begin_src ahk
SaveMacroInternal(pMacro, pDir, pKey){
  
  myGui := Gui()
  myGui.Title := '输入宏描述'
  myGui.Add('Text',, '请输入宏描述:')
  descObj := myGui.Add('Edit', 'w200 vdesc')
  sleepObj := myGui.Add("CheckBox", "vsleep", "Sleep?")
  myGui.Add('Button', 'default', 'OK').OnEvent('Click', SaveWithDescription)
  myGui.OnEvent('Close', (*) => myGui.Destroy())
  myGui.OnEvent('Escape', (*) => myGui.Destroy())
  
  myGui.Show()
  
  SaveWithDescription(*) {
    desc := descObj.Value
    sleep := sleepObj.Value
    if (desc = '') {
      MsgBox '描述不能为空'
      return
    }
    
    desc := RegExReplace(desc, '[\\/:*?"<>|]', '')
    
    DirCreate pDir
    FileRecycle pDir '/F' pKey '__*.ahk'
    newFileName := pDir '/' 'F' pKey '__' desc '.ahk'
    UpdateMacroSetting pMacro, newFileName, sleep
    
    MsgBox '宏已保存为: ' newFileName
    myGui.Destroy()
  }
}
#+end_src

#+begin_src ahk
SaveMacro(pLastRecordedMacroFile) {
  if not FileExist(pLastRecordedMacroFile){
    MsgBox 'Macro file not found.'
    return
  }

  static sMacroKeys := [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
  MyGui := Gui()
  MyGui.Opt('+Resize +MinSize250x150')
  
  dirDDL := MyGui.Add('DropDownList', 'vdir w200', GetWinMacroDirNames('A'))
  dirDDL.OnEvent('Change', ShowKeyStatus)
  
  keyLV := MyGui.Add('ListView', 'vkey r12 w200 -Multi', ['键', '状态', '描述'])
  keyLV.ModifyCol(1, 30)
  keyLV.ModifyCol(2, 50)
  keyLV.ModifyCol(3, 100)
  
  MyGui.Add('Button', 'default', 'OK').OnEvent('Click', ProcessUserInput)
  MyGui.OnEvent('Escape', DestroyWindow)
  MyGui.OnEvent('Close', DestroyWindow)
  
  MyGui.Show()
  
  ShowKeyStatus(obj, *) {
    dir := obj.Text
    keyLV.Delete()
    
    for i, key in sMacroKeys {
      pattern := gMacroDir '/' dir '/F' key '__*.ahk'
      if FileExist(pattern) {
        Loop Files, pattern, 'F' {
          keyLV.Add(, key, '已存在', RegExReplace(A_LoopFileName, '^F\d+\__(.+).ahk$', '$1'))
        }
      } else {
        keyLV.Add(, key, '可用')
      }
    }
  }
  
  ProcessUserInput(*) {
    Saved := MyGui.Submit()
    dir := Trim(Saved.dir)
    selectedRow := keyLV.GetNext()
    if dir = ''{
      FileDelete(pLastRecordedMacroFile)
      tmpMsg 'Macro Deleted.'
    } else if selectedRow {
      key := keyLV.GetText(selectedRow)
      SaveMacroInternal pLastRecordedMacroFile, gMacroDir '/' dir, key
    } else {
      MsgBox '请先选择一个宏键'
    }
  }
  
  DestroyWindow(*) {
    MyGui.Destroy()
  }
}
#+end_src

#+name: macro-manager
#+begin_src ahk
macroManager(pAction?){
  global macroRecorderPid
  global macroRunningPid
  static sRecordMacroFilename :=  '~Record1.ahk'
  if IsSet(pAction){
    Switch pAction{
      case 'stopMacro': ClearMacroStatus
      case 'stopRecorder': StopRecorder
      case 'saveMacro': SaveMacro1
      case 'startRecorder': StartRecorder
    }
    return
  }

  if processLiveP(macroRunningPid, 'AutoHotkeyUX.exe') {
    clearMacroStatus
  } else if processLiveP(macroRecorderPid, 'AutoHotkeyUX.exe') {
    StopRecorder
  } else if FileExist(A_Temp '/' sRecordMacroFilename) {
    SaveMacro1
  } else {
    StartRecorder
  }

  StopRecorder(){
    ProcessClose macroRecorderPid
    tmpMsg 'MacroRecorder Stopped.', 1
  }
  SaveMacro1(){
    SaveMacro(A_Temp '/' sRecordMacroFilename)
  }
  StartRecorder(){
    Run '"' A_AhkPath '" /restart "' gOrgDir 'lib/AHK-Macro-Recorder/Macro Recorder.ahk" "' sRecordMacroFilename '" "F1"' ,,, &macroRecorderPid
    tmpMsg 'MacroRecorder Started.', 1
  }
}
#+end_src

** Game-Saver
:PROPERTIES:
:CUSTOM_ID: 6f9a542f-99b8-4298-b709-f09d55332a32
:END:
#+begin_src ahk
game_saver := Map()

GameSaverLog(msg) {
  LogMessage('GameSaver - ' msg)
}
#+end_src

*** git
:PROPERTIES:
:CUSTOM_ID: 9103f9f6-654f-4adc-8d80-d7247289ddbd
:END:
#+begin_src ahk
RunGitCommandInDir(command, dir) {
  ; 确保目录存在
  if (!DirExist(dir)) {
    try {
      DirCreate(dir)
    } catch {
      GameSaverLog("无法创建目录: " dir)
      return ""
    }
  }
  
  ; 使用 git -C 参数在指定目录执行命令
  full_command := 'git ' command
  GameSaverLog("执行命令: " full_command)
  
  ; 创建临时文件来存储输出
  temp_file := A_Temp "\git_output.tmp"
  
  try {
    ; 执行命令并将输出重定向到文件
    RunWait(A_ComSpec ' /c ' full_command ' > "' temp_file '" 2>&1', dir, "Hide")
    
    ; 读取输出内容
    if (FileExist(temp_file)) {
      output := FileRead(temp_file, 'UTF-8')
      FileDelete(temp_file)
      return output
    }
  } catch Error as e {
    GameSaverLog("执行命令失败: " full_command " - " e.Message)
    if (FileExist(temp_file)) {
      FileDelete(temp_file)
    }
  }
  
  return ""
}
#+end_src

#+begin_src ahk
SaveGame() {
  GameSaverLog("开始存档游戏...")
  
  ; 获取当前活动窗口信息
  hwnd := WinExist("A")
  win_class := WinGetClass(hwnd)
  win_exe := ""
  try {
    win_exe := WinGetProcessName(hwnd)
  }
  
  ; 构造窗口识别字符串
  win_criteria := "ahk_class " win_class
  if (win_exe != "") {
    win_criteria := win_criteria " ahk_exe " win_exe
  }
  
  ; 查找匹配的游戏配置
  config := getGameConfig(win_criteria)
  if (config == "") {
    msg := "未找到匹配的游戏配置: " win_criteria
    tmpMsg(msg)
    GameSaverLog(msg)
    return
  }
  
  ; 检查 Git 仓库
  if (!checkGitRepo(config.save_dir)) {
    msg := "请先初始化 Git 仓库并添加 .gitignore 文件"
    MsgBox(msg)
    GameSaverLog(msg)
    return
  }
  
  ; 执行 pre_save_hook
  if config.HasOwnProp('pre_save_hook')
    executeHooks(config.pre_save_hook, config)
  
  GameSaverLog("pre_save_hook 执行完成")
  
  ; 获取提交信息
  commit_msg := getUserCommitMessage(config.default_commit_msg)
  GameSaverLog("提交信息: " commit_msg)
  
  ; 执行 Git 操作
  if (!gitAddAndCommit(commit_msg, config.save_dir)) {
    msg := "Git 存档操作失败。"
    GameSaverLog(msg)
    return
  }
  
  ; 执行 post_save_hook
  if config.HasOwnProp('post_save_hook')
    executeHooks(config.post_save_hook, config)
  
  msg := "游戏存档成功！"
  tmpMsg(msg)
  GameSaverLog(msg)
}
#+end_src

*** load-game-from-commit
:PROPERTIES:
:CUSTOM_ID: 575e0072-7883-447e-8c0b-1d4b8162c74a
:END:
#+begin_src ahk
LoadGameFromCommit(config, commit_hash) {
  if (commit_hash = "") {
    tmpMsg("未选择提交，读档操作取消。")
    GameSaverLog("未选择提交，读档操作取消。")
    return
  }

  RunGitCommandInDir("reset --hard", config.save_dir)
  RunGitCommandInDir("clean -df", config.save_dir)
  GameSaverLog("选择的提交哈希: " commit_hash)

  ; 检查是否有分支指向该 commit
  branches := RunGitCommandInDir("branch --points-at " commit_hash, config.save_dir)
  branches := Trim(branches)

  if (branches != "") {
    ; 情况一：切换到已存在的分支
    ; 清理星号和空格，获取第一个分支名
    branch_name := Trim(StrReplace(branches, "* ", ""))
    branch_name := StrSplit(branch_name, "`n")[1]
    
    GameSaverLog("找到指向该提交的分支: " branch_name)
    RunGitCommandInDir("checkout " branch_name, config.save_dir)
    msg := "成功加载存档，已切换到分支: " branch_name
    tmpMsg(msg)
    GameSaverLog(msg)
  } else {
    ; 情况二：从历史点创建新分支
    GameSaverLog("未找到指向该提交的分支，将创建新分支。")
    RunGitCommandInDir("checkout " commit_hash, config.save_dir)
    
    input := InputBox("请输入新故事线的名称:", "创建新分支", "w300 h100")
    new_branch_name := input.Value
    
    if (new_branch_name != "") {
      RunGitCommandInDir("switch -c " new_branch_name, config.save_dir)
      msg := "成功从旧存档创建新故事线: " new_branch_name
      tmpMsg(msg)
      GameSaverLog(msg)
    } else {
      msg := "已切换到旧存档（分离头指针状态），但未创建新分支。"
      tmpMsg(msg)
      GameSaverLog(msg)
    }
  }

  ; 执行 post_load_hook
  if config.HasOwnProp('post_load_hook')
    executeHooks(config.post_load_hook, config)
}
#+end_src

*** load-game
:PROPERTIES:
:CUSTOM_ID: 64d4a995-e9e2-401b-83bc-9362e3ca66ba
:END:
#+begin_src ahk
LoadGame() {
  GameSaverLog("开始读档游戏...")
  
  ; 获取当前活动窗口信息
  hwnd := WinExist("A")
  win_class := WinGetClass(hwnd)
  win_exe := ""
  try {
    win_exe := WinGetProcessName(hwnd)
  }
  
  ; 构造窗口识别字符串
  win_criteria := "ahk_class " win_class
  if (win_exe != "") {
    win_criteria := win_criteria " ahk_exe " win_exe
  }
  
  GameSaverLog("当前窗口: " win_criteria)
  
  ; 查找匹配的游戏配置
  config := getGameConfig(win_criteria)
  if (config == "") {
    msg := "未找到匹配的游戏配置: " win_criteria
    tmpMsg(msg)
    GameSaverLog(msg)
    return
  }
  
  ; 检查 Git 仓库
  if (!checkGitRepo(config.save_dir)) {
    msg := "请先初始化 Git 仓库。"
    MsgBox(msg)
    GameSaverLog(msg)
    return
  }
  
  ; 执行 pre_load_hook
  if config.HasOwnProp('pre_load_hook')
    executeHooks(config.pre_load_hook, config)
  
  ; 让用户选择提交并加载
  getUserSelectedCommit(config.save_dir, LoadGameFromCommit.Bind(config))
}
#+end_src

*** get-game-config
:PROPERTIES:
:CUSTOM_ID: bc461c1a-dbeb-4056-b892-4d748561d0c7
:END:
#+begin_src ahk
getGameConfig(win_criteria) {
  ; 精确匹配
  if (game_saver.Has(win_criteria)) {
    return game_saver[win_criteria]
  }
  
  ; 部分匹配 - 检查是否有配置的键包含在当前窗口条件中
  for key, config in game_saver {
    if (InStr(win_criteria, StrReplace(key, "ahk_class ", "")) || InStr(win_criteria, StrReplace(key, "ahk_exe ", ""))) {
      return config
    }
  }
  
  return ""
}
#+end_src

*** check-git-repo
:PROPERTIES:
:CUSTOM_ID: 1e22e4f0-6515-4353-9fc1-1c59235dc494
:END:
#+begin_src ahk
checkGitRepo(save_dir) {
  ; 确保目录存在
  if (!DirExist(save_dir)) {
    try {
      DirCreate(save_dir)
    } catch {
      GameSaverLog("无法创建目录: " save_dir)
      MsgBox("无法创建存档目录: " save_dir)
      return false
    }
  }
  
  ; 检查 .git 目录是否存在
  git_dir := save_dir "\.git"
  if (!FileExist(git_dir)) {
    ; 提示用户初始化 Git 仓库
    result := MsgBox('存档目录 "' save_dir '" 不是 Git 仓库，是否要初始化？`n`n请确保已添加 .gitignore 文件。', "Git 仓库初始化", "YesNo")
    if (result == "Yes") {
      if (initGitRepo(save_dir)) {
        return true
      } else {
        MsgBox("Git 仓库初始化失败！")
        return false
      }
    } else {
      return false
    }
  }
  return true
}
#+end_src

*** init-git-repo
:PROPERTIES:
:CUSTOM_ID: a8773fc0-9b0c-4cd5-a39c-205565a0f836
:END:
#+begin_src ahk
initGitRepo(save_dir) {
  try {
    ; 检查 git 命令是否可用
    RunWait("git --version", , "Hide")
  } catch {
    MsgBox("未找到 Git 命令，请确保已安装 Git 并添加到 PATH 环境变量。")
    return false
  }
  
  try {
    ; 初始化 Git 仓库
    output := RunGitCommandInDir("init --initial-branch=main", save_dir)
    RunGitCommandInDir("config user.email game_saver", save_dir)
    RunGitCommandInDir("config user.name game_saver", save_dir)
    GameSaverLog("Git init 输出: " output)
    
    ; 检查是否存在 .gitignore 文件，如果不存在则创建一个基本的
    gitignore_path := save_dir "\.gitignore"
    if (!FileExist(gitignore_path)) {
      gitignore_content := "; 忽略系统文件`n*.tmp`n*.log`n`n; 忽略备份文件`n*.bak`n*.backup`n`n; 忽略临时文件`n*.temp`n*.tmp`n`n; 忽略编译文件`n*.exe`n*.dll`n*.obj`n`n; 忽略日志文件`n*.log`nlogs/`n`n; 忽略用户配置`nconfig.local`nsettings.local"
      FileAppend(gitignore_content, gitignore_path)
      GameSaverLog("创建 .gitignore 文件")
    }
    
    ; 添加所有文件并进行初始提交
    RunGitCommandInDir("add -A", save_dir)
    RunGitCommandInDir('commit -m "Initial commit"', save_dir)
    
    GameSaverLog("Git 仓库初始化成功")
    return true
  } catch Error as e {
    GameSaverLog("Git 仓库初始化失败: " e.Message)
    return false
  }
}
#+end_src

*** execute-hooks
:PROPERTIES:
:CUSTOM_ID: 54053c99-2ef8-49fe-b7da-91d8109ae517
:END:
#+begin_src ahk
executeHooks(hooks, config) {
  for hook in hooks {
    result := hook(config)
    if (!result) {
      return false
    }
  }
  return true
}
#+end_src

*** get-user-commit-message
:PROPERTIES:
:CUSTOM_ID: aa991075-ac77-4a2d-b7d7-00b51f509fbb
:END:
#+begin_src ahk
getUserCommitMessage(default_msg) {
  input := InputBox("请输入存档备注:", "存档备注", "w300 h100")
  if (input.Value == "" and default_msg == "time") {
    return FormatTime(A_Now, "yyyy-MM-dd HH:mm:ss")
  }
  return input.Value
}
#+end_src

*** get-user-selected-commit
:PROPERTIES:
:CUSTOM_ID: db5100c4-813b-4f67-99fa-ae1abab99418
:END:
#+begin_src ahk
getUserSelectedCommit(save_dir, callback) {
  ; 获取提交历史
  history := getGitCommitHistory(save_dir)
  if (history == "") {
    MsgBox("无法获取 Git 提交历史。")
    return ""
  }

  ; 创建 GUI
  MyGui := Gui("+AlwaysOnTop", "选择一个存档")
  MyGui.SetFont("s10", "Microsoft YaHei")
  MyGui.Add("Text", "w380", "双击或选中后点击“确定”来选择一个存档。")
  MyGui.Add("Text", "w380", "输入以筛选列表")
  FilterEdit := MyGui.Add("Edit", "w380 vFilter", "")
  LV := MyGui.Add("ListView", "r20 w380 Grid", ["Commit Hash", "Details"])
  LV.ModifyCol(1, "100")
  LV.ModifyCol(2, "280")

  ; 填充 ListView
  FullHistory := []
  Loop Parse, history, "`n"
  {
    if (A_LoopField == "")
      continue
    FullHistory.Push(A_LoopField)
    parts := StrSplit(A_LoopField, " ",, 3)
    hash := parts[2]
    details := Trim(parts[3])
    LV.Add(, hash, details)
  }

  ; 筛选功能
  FilterEdit.OnEvent("Change", FilterListView)

  FilterListView(*) {
    filter_text := FilterEdit.Text
    LV.Delete() ; 清空
    for _, item in FullHistory {
      if (filter_text == '' or InStr(item, filter_text)) {
        parts := StrSplit(item, " ",, 3)
        hash := parts[2]
        details := Trim(parts[3])
        LV.Add(, hash, details)
      }
    }
  }

  ; 按钮
  MyGui.Add("Button", "Default w100", "确定").OnEvent("Click", Submit)
  MyGui.Add("Button", "x+10 w100", "取消").OnEvent("Click", (*) => MyGui.Destroy())

  Submit(*) {
    ; 优先获取选中的行
    selected_row := LV.GetNext(0, "F")
    ; 如果没有选中的行，则获取列表中的第一行
    if (!selected_row) {
      selected_row := LV.GetNext(0, 'C')
    }

    if (selected_row) {
      selected_commit_hash := LV.GetText(selected_row, 1)
      MyGui.Destroy()
      callback(selected_commit_hash)
    } else {
      MsgBox "请选择一个提交"
    }
  }
  
  LV.OnEvent('DoubleClick', (*) => Submit())

  MyGui.OnEvent("Close", (*) => MyGui.Destroy())
  MyGui.Show("w400")
  ControlFocus(FilterEdit) ; 聚焦到输入框
}
#+end_src

*** get-git-commit-history
:PROPERTIES:
:CUSTOM_ID: 736773f5-a20d-4327-8bf8-772a0c1cf3cf
:END:
#+begin_src ahk
getGitCommitHistory(save_dir) {
  try {
    output := RunGitCommandInDir('log --graph --pretty=format:"%h %d %s" -50 --all', save_dir)
    return output
  } catch {
    return ""
  }
}
#+end_src

*** git-add-and-commit
:PROPERTIES:
:CUSTOM_ID: c79a916b-9731-4f98-bd07-9649cbadbf18
:END:
#+begin_src ahk
gitAddAndCommit(commit_msg, save_dir) {
  try {
    ; 添加所有未忽略的文件
    output := RunGitCommandInDir("add -A", save_dir)
    
    ; 检查是否有文件需要提交
    GameSaverLog("检查是否有文件需要提交")
    output := RunGitCommandInDir("status --porcelain", save_dir)
    if (output == "") {
      msg := "没有文件需要提交。"
      tmpMsg(msg)
      GameSaverLog(msg)
      return true
    }
    
    ; 执行提交
    GameSaverLog('执行 git commit -m "' commit_msg '" 在目录: ' save_dir)
    cmd := 'commit -m "' commit_msg '"'
    output := RunGitCommandInDir(cmd, save_dir)
    GameSaverLog("Git commit 输出: " output)
    
    GameSaverLog("Git 提交成功")
    return true
  } catch Error as e {
    msg := "Git 操作失败: " e.Message
    MsgBox(msg)
    GameSaverLog(msg)
    return false
  }
}
#+end_src

** Post
:PROPERTIES:
:CUSTOM_ID: 6976a1ae-848d-44e4-9102-0b6141b09b39
:END:
#+begin_src ahk
GroupAdd 'games', 'ahk_exe Game.exe'
GroupAdd 'games', 'ahk_class SDL_app'
GroupAdd 'games', 'ahk_class UnityWndClass'
GroupAdd 'games', 'ahk_class UnrealWindow'
GroupAdd 'games', 'ahk_class Skyrim Special Edition'

GroupAdd 'NSFW', 'ahk_exe mpv.exe'
GroupAdd 'NSFW', 'ahk_group games'

bossIsComing(){
  clearMacroStatus
  DllCall('SystemParametersInfoW', 'UInt', 0x14, 'UInt', 0, 'Ptr', 0, 'UInt', 2)
  SoundSetMute 1
  winMinimizeAll('ahk_group NSFW')
  Run 'emacsclient -e "(zr-moyu-quit-window)"',, 'Hide'
}
#+end_src

*** include
:PROPERTIES:
:CUSTOM_ID: fe93c96b-97b4-4f15-9d37-997856b63295
:END:
#+begin_src ahk
#Include '*i %A_ScriptDir%/../_post_local.ahk'
#+end_src

** Bind

*** Global
:PROPERTIES:
:CUSTOM_ID: 1a77bcfe-be1a-4b2d-beac-0879b9f7c5e7
:END:
#+begin_src ahk
<#q::edgeToggle

Capslock & `::macroManager
Capslock & Space::bossIsComing
Capslock & F1::runMacro('F1')
Capslock & F2::runMacro('F2')
Capslock & F3::runMacro('F3')
Capslock & F4::runMacro('F4')
Capslock & F5::runMacro('F5')
Capslock & F6::runMacro('F6')
Capslock & F7::runMacro('F7')
Capslock & F8::runMacro('F8')
Capslock & F9::runMacro('F9')
Capslock & F10::runMacro('F10')
Capslock & F11::runMacro('F11')
Capslock & F12::runMacro('F12')

Capslock & Esc::SetCapsLockState !GetKeyState('CapsLock', 'T') 
Capslock & PrintScreen::capturePrintWindow

<^.::^NumpadDot

Capslock & t::WinSetAlwaysOnTop(-1, 'A')
Capslock & d::Run 'hh.exe "ms-its:' RegExReplace(A_AhkPath, 'UX\\AutoHotkeyUX\.exe$', 'v2\AutoHotkey.chm')  '"', , 'Max'
Capslock & s::Run A_Programs '\AutoHotkey Window Spy.lnk'
Capslock & p::{
  global macroRecorderPid
  global macroRunningPid
  if processLiveP(macroRunningPid, 'AutoHotkeyUX.exe') {
    clearMacroStatus
  }
  if processLiveP(macroRecorderPid, 'AutoHotkeyUX.exe') {
    ProcessClose macroRecorderPid
  }
  Reload
}

Capslock & r::{
  global rapidFireEnable
  status := 'Off'
  Switch rapidFireEnable{
    Case 0:
    rapidFireEnable := 1
    status := 'once'
    
    Case 1:
    rapidFireEnable := 2
    status := 'On'

    Default: rapidFireEnable := 0
  }
  SoundBeep 1000 + 500 * rapidFireEnable
  tmpMsg 'Rapid Fire ' status
}
#+end_src

*** Local

**** MatchMode3
:PROPERTIES:
:CUSTOM_ID: 5dd7edc3-c99a-439e-9bba-522ad81318be
:END:
#+begin_src ahk
SetTitleMatchMode 3

GroupAdd 'EmacsParty', 'ahk_class Emacs'
GroupAdd 'EmacsParty', 'ahk_class Xming X'
GroupAdd 'EmacsParty', 'ahk_exe scrcpy.exe'
GroupAdd 'EmacsParty', 'ahk_exe WindowsTerminal.exe'
#+end_src

#+begin_src ahk
#HotIf not WinActive('ahk_group games')
Capslock::Esc

#HotIf WinActive('ahk_group games')
Capslock & 5::SaveGame()
Capslock & 9::LoadGame()

cmdTitle := 'Command Prompt'
#HotIf WinActive(cmdTitle)
<^p::Up
<^f::Right
<^b::Left
<^a::Home
<^e::End
<^u::^Home
<^k::^End
<^m::Enter
<^d::Del
<^l::F7
<!z::F4
<!p::F8
<!b::^Left
<!f::^Right

; #HotIf WinActive('ahk_exe msedge.exe') || WinActive(cmdTitle)
<^n::Down

#HotIf WinActive('ahk_group EmacsParty')
<^Space::^@
#HotIf WinActive('ahk_exe scrcpy.exe')
>!`::Run 'wt.exe -w _quake ft'

#HotIf WinActive('ahk_exe WXWork.exe') and not WinActive('ahk_class ImagePreview')
Capslock::WinMinimize

#HotIf not WinActive('ahk_group EmacsParty')
<^g::clearNumArg
<!1::setNumArg(1)
<!2::setNumArg(2)
<!3::setNumArg(3)
<!4::setNumArg(4)
<!5::setNumArg(5)
<!6::setNumArg(6)
<!7::setNumArg(7)
<!8::setNumArg(8)
<!9::setNumArg(9)
<!0::setNumArg(0)
#HotIf
#+end_src

**** rapid-fire
:PROPERTIES:
:CUSTOM_ID: 1fbfe4a2-b591-478c-8e2d-bb5043cbac8e
:END:
#+begin_src ahk
#HotIf rapidFireEnable
LButton::RapidFire(ThisHotkey)
Space::RapidFire(ThisHotkey)
#HotIf
#+end_src

* mouse
:PROPERTIES:
:header-args:ahk: :tangle (zr-org-by-tangle-dir "mouse.ahk")
:END:

** include
:PROPERTIES:
:CUSTOM_ID: c77c0629-f231-402e-823f-a5b6efab50fb
:END:
#+begin_src ahk
#Include '../lib/HotGestures/HotGestures.ahk'
#+end_src

** gestures
:PROPERTIES:
:CUSTOM_ID: 749ea152-6a90-4ab0-a5ce-d395a47d1e4e
:END:
#+begin_src ahk
_L := HotGestures.Gesture('←:-1,0')
_R := HotGestures.Gesture('→:1,0')
_U := HotGestures.Gesture('↑:0,-1')
_D := HotGestures.Gesture('↓:0,1')
_UL := HotGestures.Gesture('↖:-1,-1')
_UR := HotGestures.Gesture('↗:1,-1')
_DR := HotGestures.Gesture('↘:1,1')
_DL := HotGestures.Gesture('↙:-1,1')
_U_D := HotGestures.Gesture('↑↓:0,-1|0,1')
_D_U := HotGestures.Gesture('↓↑:0,1|0,-1')
_R_L := HotGestures.Gesture('→←:1,0|-1,0')
_L_R := HotGestures.Gesture('←→:-1,0|1,0')
_D_R := HotGestures.Gesture('↓→:0,1|1,0')
_D_L := HotGestures.Gesture('↓←:0,1|-1,0')
_U_R := HotGestures.Gesture('↑→:0,-1|1,0')
_U_L := HotGestures.Gesture('↑←:0,-1|-1,0')
_L_U := HotGestures.Gesture('←↑:-1,0|0,-1')
_L_D := HotGestures.Gesture('←↓:-1,0|0,1')
_R_U := HotGestures.Gesture('→↑:1,0|0,-1')
_R_D := HotGestures.Gesture('→↓:1,0|0,1')

hgs := HotGestures()
hgs.Register(_L, '←')
hgs.Register(_R, '→')
hgs.Register(_U, '↑')
hgs.Register(_D, '↓')
hgs.Register(_UL, '↖')
hgs.Register(_UR, '↗')
; hgs.Register(_DR, '↘')
hgs.Register(_DL, '↙')
; hgs.Register(_U_D, '↑↓')
hgs.Register(_D_U, '↓↑')
; hgs.Register(_R_L, '→←')
; hgs.Register(_L_R, '←→')
; hgs.Register(_D_R, '↓→')
; hgs.Register(_D_L, '↓←')
; hgs.Register(_U_R, '↑→')
; hgs.Register(_U_L, '↑←')
; hgs.Register(_L_U, '←↑')
; hgs.Register(_L_D, '←↓')
; hgs.Register(_R_U, '→↑')
; hgs.Register(_R_D, '→↓')
#+end_src

** Action

*** Global
:PROPERTIES:
:CUSTOM_ID: 089834b9-4044-4ad2-8473-1a2266e20691
:END:
#+begin_src ahk
defaultHgs(g){
  switch g{
    case _D_U: Send('!{F4}')
  }
}
#+end_src

*** Local

**** Browser
:PROPERTIES:
:CUSTOM_ID: f23179e0-5a9c-40c4-b3e9-f355710ebf89
:END:
#+begin_src ahk
browserHgs(g){
  switch g{
    case _U: Send('{Home}')
    case _UL: Send('!{Left}')
    case _UR: Send('!{Right}')
    case _L: Send('+^{Tab}')
    case _R: Send('^{Tab}')
    case _DL: Send('^{r}')
    case _D: Send('^{w}')
    default: defaultHgs(g)
  }
}
#+end_src

** Router
:PROPERTIES:
:CUSTOM_ID: 5190391d-0221-466c-a4a1-5ef7f6c30f83
:END:
#+begin_src ahk
hotGestureRouter(mWin, gesture){
  switch {
    case WinGetProcessName(mWin) == 'msedge.exe' : browserHgs(gesture)
    case WinGetClass(mWin) == 'MozillaWindowClass' : browserHgs(gesture)
    default: defaultHgs(gesture)
  }
}
#+end_src

** Trigger
:PROPERTIES:
:CUSTOM_ID: 9d0a5191-1fc0-4225-8f4c-6f467c7410ea
:END:
#+begin_src ahk
GroupAdd 'NoHotGestures', 'ahk_class Emacs'
GroupAdd 'NoHotGestures', 'ahk_group games'

#HotIf not WinActive('ahk_group NoHotGestures')
$RButton::{
  MouseGetPos ,, &mWin
  try {
    activeID := WinGetID("A")
  } catch TargetError {
    activeID := 0
  }
  if (activeID != 0 and mWin != activeID)
    WinActivate(mWin)

  hgs.Start() ; Start recording
  KeyWait('RButton') ; Keep recording until RButton is released
  hgs.Stop() ; Stop recording
  if hgs.Result.Valid { ; Check validity of result
    hotGestureRouter(mWin, hgs.Result.MatchedGesture)
  }
  ; if no movement or track is too short, hgs.Result.Valid is false, and a right click is expected
  else {
    Send('{RButton}')
  }
}
#HotIf
#+end_src

