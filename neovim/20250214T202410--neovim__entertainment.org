#+title:      neovim
#+date:       [2025-02-14 Fri 20:24]
#+filetags:   :entertainment:
#+identifier: 20250214T202410
* tangle
#+begin_src elisp
(org-babel-tangle)

(let ((dir (pcase system-type
            ('windows-nt
             (substitute-in-file-name "$LOCALAPPDATA/nvim"))
            (_ (expand-file-name "~/.config/nvim")))))
  (make-symbolic-link (expand-file-name "_tangle") dir t))
#+end_src
* init
:PROPERTIES:
:header-args:lua: :eval no :tangle (zr-org-by-tangle-dir "init.lua") :mkdirp t
:CUSTOM_ID: b992d316-d1aa-40fe-b968-e00fe0ae4809
:END:
** vars
:PROPERTIES:
:CUSTOM_ID: c8305f6f-935c-4e99-b737-5c36fb821580
:END:
#+begin_src lua
local is_windows = vim.fn.has('win32') == 1 or vim.fn.has('win64') == 1

local my_augroup = vim.api.nvim_create_augroup("MyAutoCommands", { clear = true })

local archive_7z_program = nil

if vim.fn.executable('7z') == 1 then
  archive_7z_program = '7z'
elseif vim.fn.executable('7zz') == 1 then
  archive_7z_program = '7zz'
end

local vi_program = 'nvim'
if vim.fn.executable('nvim') == 0 then
  vi_program = vim.v.progpath
end
#+end_src
** options
:PROPERTIES:
:CUSTOM_ID: a6b6f699-fe15-4794-8396-06f8ab43eead
:END:
#+begin_src lua
vim.opt.tabstop = 2
vim.opt.shiftwidth = 2
vim.opt.expandtab = true
vim.opt.smartindent = true
#+end_src
** theme
:PROPERTIES:
:CUSTOM_ID: b8635e66-b5f5-4caf-9f0d-cebbc27c6a9c
:END:
#+begin_src lua
vim.cmd('colorscheme vim')
#+end_src

** emacsclient
:PROPERTIES:
:CUSTOM_ID: e57de01b-02b3-444b-a500-14ffbc921ac7
:END:
#+begin_src lua
local function open_with_emacsclient()
  local file_path = vim.fn.expand('%:p')
  local result = vim.fn.system('emacsclient -n "' .. file_path .. '"')
  if vim.v.shell_error ~= 0 then
    vim.notify('Failed to open with emacsclient: ' .. result, vim.log.levels.ERROR)
  end
end

vim.keymap.set('n', '<Leader>e', open_with_emacsclient, { noremap = true, silent = true })
#+end_src

** terminal

*** map
:PROPERTIES:
:CUSTOM_ID: cba672ec-fabe-426d-9967-5d11342b607b
:END:

**** vim default
:PROPERTIES:
:CUSTOM_ID: d26e8060-6d33-49cb-bf89-5f9cd25787b8
:END:
#+begin_src lua
vim.keymap.set('t', '<C-w>.', '<C-w>')
vim.keymap.set('t', '<C-w><C-\\>', '<C-\\>')
vim.keymap.set('t', '<C-w>"', function()
  return '<C-\\><C-N>"' .. vim.fn.nr2char(vim.fn.getchar()) .. 'pi'
end, { expr = true, noremap = true })
vim.keymap.set('t', '<C-w>c', '<C-c>')
vim.keymap.set('t', '<C-w>gt', '<C-\\><C-o>gt')
vim.keymap.set('t', '<C-w>gT', '<C-\\><C-o>gT')
#+end_src

*** dirtrack
:PROPERTIES:
:CUSTOM_ID: e137dfbe-f420-4fc3-b904-89cccbc7d719
:END:

#+begin_src lua
local function lcd_by_cur_line_and_to_normal()
  local current_line = vim.api.nvim_get_current_line()
  local path_pattern = '^\\(PS \\)\\?\\([a-zA-Z]:\\\\[^>]*\\)>'
  local path = vim.fn.matchlist(current_line, path_pattern)[3]

  if path and vim.fn.isdirectory(path) then
    local buf = vim.api.nvim_get_current_buf()
    vim.api.nvim_buf_set_var(buf, 'osc7_dir', path)
    if vim.o.autochdir then
      vim.fn.chdir(path)
    end
  end
  vim.cmd.stopinsert()
end
#+end_src

#+begin_src lua
local function get_buffer_dir()
  if vim.b.osc7_dir and vim.fn.isdirectory(vim.b.osc7_dir) == 1 then
    return vim.b.osc7_dir
  end
  local current_file_path = vim.fn.expand('%:p')
  return vim.fn.fnamemodify(current_file_path, ':h')
end
#+end_src

#+begin_src lua
local function cd_to_buffer_dir(force)
  if force == 1 or vim.o.autochdir then
    vim.cmd.cd(get_buffer_dir())
  end
end

vim.keymap.set('n', '<Leader>c', function() cd_to_buffer_dir(1) end)
#+end_src

#+begin_src lua
vim.api.nvim_create_autocmd({ 'BufEnter', 'WinEnter', 'DirChanged' }, {
  group = my_augroup,
  callback = cd_to_buffer_dir,
})
#+end_src

*** shell
:PROPERTIES:
:CUSTOM_ID: b3b3a606-2889-4775-bd6d-2cd38ef9ec33
:END:

**** rc
:PROPERTIES:
:CUSTOM_ID: 96b627f6-d3a1-41d9-9413-c73505aca25c
:END:
#+begin_src lua
local cmd_rc = {
  'doskey vi=emacsclient -n $*',
  string.format('set PATH=%s;%%PATH%%', vim.fn.resolve(os.getenv('myvimrc')):gsub('neovim\\_tangle\\.+', 'init\\_tangle', 1)),
}

local bash_rc = {
  string.format('vi() { realpath -z -- "$@" | xargs -0 %s --server "$NVIM" --remote-tab; }', vim.fn.shellescape(vi_program)),
  'print_osc7() { printf "\\033]7;file://$HOSTNAME$PWD\\033\\\\"; }',
}
#+end_src

**** setup
:PROPERTIES:
:CUSTOM_ID: a2021abf-db0d-438c-9805-5a04a25a0958
:END:
#+begin_src lua
local function setup_terminal_cmd()
  local buf = vim.api.nvim_get_current_buf()
  vim.keymap.set('t', '<C-w>n', lcd_by_cur_line_and_to_normal, { noremap = true, buffer = buf })
  vim.keymap.set('t', '<C-p>', '<Up>', { buffer = buf })
  vim.keymap.set('t', '<C-n>', '<Down>', { buffer = buf })
  vim.keymap.set('t', '<C-f>', '<Right>', { buffer = buf })
  vim.keymap.set('t', '<C-b>', '<Left>', { buffer = buf })
  vim.keymap.set('t', '<C-a>', '<Home>', { buffer = buf })
  vim.keymap.set('t', '<C-e>', '<End>', { buffer = buf })
  vim.keymap.set('t', '<C-u>', '<C-Home>', { buffer = buf })
  vim.keymap.set('t', '<C-k>', '<C-End>', { buffer = buf })
  vim.keymap.set('t', '<C-m>', '<Enter>', { buffer = buf })
  vim.keymap.set('t', '<C-d>', '<Del>', { buffer = buf })
  vim.keymap.set('t', '<C-l>', '<F7>', { buffer = buf })
  vim.keymap.set('t', '<M-z>', '<F4>', { buffer = buf })
  vim.keymap.set('t', '<M-p>', '<F8>', { buffer = buf })
  vim.keymap.set('t', '<M-b>', '<C-Left>', { buffer = buf })
  vim.keymap.set('t', '<M-f>', '<C-Right>', { buffer = buf })

  local job_id = vim.b.terminal_job_id
  if job_id then
    vim.api.nvim_chan_send(job_id, 'echo off\r\n')
    for _, cmd in ipairs(cmd_rc) do
      vim.api.nvim_chan_send(job_id, cmd .. '\r\n')
    end
    vim.api.nvim_chan_send(job_id, 'echo on\r\n')
  end
end
#+end_src

#+begin_src lua
local function setup_terminal_bash()
  local job_id = vim.b.terminal_job_id
  if job_id then
    vim.api.nvim_chan_send(job_id, 'set +o history\n')
    for _, cmd in ipairs(bash_rc) do
      vim.api.nvim_chan_send(job_id, cmd .. '\n')
    end
    vim.api.nvim_chan_send(job_id, 'set -o history\n')
  end

  local buf = vim.api.nvim_get_current_buf()
  vim.keymap.set('t', '<C-w>n', '<C-\\><C-n>', { noremap = true, buffer = buf })
  vim.api.nvim_create_autocmd({ 'TermRequest' }, {
    group = my_augroup,
    desc = 'Handles OSC 7 dir change requests',
    callback = function(ev)
      if string.sub(vim.v.termrequest, 1, 4) == '\x1b]7;' then
        local dir = string.gsub(vim.v.termrequest, '\x1b]7;file://[^/]*', '')
        if vim.fn.isdirectory(dir) == 0 then
          return
        end
        vim.api.nvim_buf_set_var(ev.buf, 'osc7_dir', dir)
        if vim.o.autochdir and buf == ev.buf then
          vim.cmd.cd(dir)
        end
      end
    end,
  })
end
#+end_src

#+begin_src lua
local function setup_terminal()
  local bufname = vim.api.nvim_buf_get_name(0)
  if bufname:match('^term://') then
    local cmd = bufname:match('([%w.]+)$')
    if cmd == 'cmd.exe' then
      setup_terminal_cmd()
    elseif cmd == 'bash' then
      setup_terminal_bash()
    end
  end
end
#+end_src

#+begin_src lua
vim.api.nvim_create_autocmd('TermOpen', {
  group = my_augroup,
  pattern = '*',
  callback = setup_terminal,
})
#+end_src

** remote

*** start
:PROPERTIES:
:CUSTOM_ID: c1082729-583b-4866-849f-4f5615e60630
:END:
#+begin_src lua
if os.getenv('SSH_TTY') then
#+end_src

*** clipboard
:PROPERTIES:
:CUSTOM_ID: cc4bceeb-422b-4b35-8ec7-a8563dc18cec
:END:
#+begin_src lua
table.insert(bash_rc, 'clip() { printf "\\033]52;c;%s\\a" "$(base64 -w0)" > "$SSH_TTY"; }')

local osc52 = require('vim.ui.clipboard.osc52')

vim.g.clipboard = {
  name = 'OSC 52',
  copy = {
    ['+'] = osc52.copy('+'),
    ['*'] = osc52.copy('*'),
  },
  paste = {
    ['+'] = osc52.paste('+'),
    ['*'] = osc52.paste('*'),
  },
}
#+end_src

*** end
:PROPERTIES:
:CUSTOM_ID: bbf6df13-a341-489c-92be-22d3c37679f1
:END:
#+begin_src lua
end
#+end_src

** netrw
*** vars
:PROPERTIES:
:CUSTOM_ID: 0c6f9751-5296-4199-879d-dd91d0e9d278
:END:
#+begin_src lua
if archive_7z_program then
  vim.g.netrw_decompress = {
    ['.zip'] = archive_7z_program .. ' x -otmp-zip',
    ['.7z'] = archive_7z_program .. ' x -otmp-7z',
    ['.rar'] = archive_7z_program .. ' x -otmp-rar'
  }
end
#+end_src
*** bind
:PROPERTIES:
:CUSTOM_ID: 1ad2abfd-1d4a-4651-85c5-859f1f2ba1e6
:END:
#+begin_src lua
local function netrw_buffer_dir()
  vim.cmd.edit(get_buffer_dir())
end

vim.keymap.set('n', '<Leader>d', netrw_buffer_dir, { noremap = true })
#+end_src

** sudo
:PROPERTIES:
:CUSTOM_ID: a905f861-9fb1-4a8d-ad2d-94b8d94fa7a7
:END:
Steal from https://github.com/ibhagwan/nvim-lua/blob/main/lua/utils.lua.

*** exec
:PROPERTIES:
:CUSTOM_ID: 1ff91053-4aa4-4c8a-8fe1-33a0788dca01
:END:
#+begin_src lua
local function sudo_exec(cmd, print_output)
  vim.fn.inputsave()
  local password = vim.fn.inputsecret("Password: ")
  vim.fn.inputrestore()
  if not password or #password == 0 then
    vim.notify('Invalid password, sudo aborted', vim.log.levels.ERROR)
    return false
  end
  local out = vim.fn.system(string.format("sudo -p '' -S %s", cmd), password)
  if vim.v.shell_error ~= 0 then
    print("\r\n")
    vim.notify(out, vim.log.levels.ERROR)
    return false
  end
  if print_output then print("\r\n", out) end
  return true
end
#+end_src

*** write
:PROPERTIES:
:CUSTOM_ID: ed5a8717-3b22-4a2f-b51e-232dfe151792
:END:
#+begin_src lua
local function sudo_edit (args)
  local tmpfile = args[1] or vim.fn.tempname()
  local filepath = args[2] or vim.fn.expand("%")
  if not filepath or #filepath == 0 then
    vim.notify('No file name' .. filepath, vim.log.levels.ERROR)
    return
  end
  -- `bs=1048576` is equivalent to `bs=1M` for GNU dd or `bs=1m` for BSD dd
  -- Both `bs=1M` and `bs=1m` are non-POSIX
  local cmd = string.format("dd if=%s of=%s bs=1048576",
    vim.fn.shellescape(tmpfile),
    vim.fn.shellescape(filepath))
  -- no need to check error as this fails the entire function
  vim.api.nvim_exec2(string.format("write! %s", tmpfile), { output = true })
  if sudo_exec(cmd) then
    -- refreshes the buffer and prints the "written" message
    vim.cmd.checktime()
    -- exit command mode
    vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes(
      "<Esc>", true, false, true), "n", true)
  end
  vim.fn.delete(tmpfile)
end

vim.api.nvim_create_user_command('Sudoedit', sudo_edit, { nargs = '*' })
#+end_src

** post
:PROPERTIES:
:CUSTOM_ID: e9ab948e-c8d6-4f2c-ab8f-d225b27d9114
:END:
#+begin_src lua
table.insert(bash_rc, 'PROMPT_COMMAND=print_osc7')
#+end_src
