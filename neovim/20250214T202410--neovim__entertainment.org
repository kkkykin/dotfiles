#+title:      neovim
#+date:       [2025-02-14 Fri 20:24]
#+filetags:   :entertainment:
#+identifier: 20250214T202410
* tangle
#+begin_src elisp
(let ((zr-local-pls (plstore-open "neovim.pls"))
      (dir (pcase system-type
             ('windows-nt
              (substitute-in-file-name "$LOCALAPPDATA/nvim"))
             (_ (expand-file-name "~/.config/nvim")))))
  (org-babel-tangle)
  (make-symbolic-link (expand-file-name "_tangle") dir t))
#+end_src
* init
:PROPERTIES:
:header-args:lua: :eval no :tangle (zr-org-by-tangle-dir "init.lua") :mkdirp t
:CUSTOM_ID: b992d316-d1aa-40fe-b968-e00fe0ae4809
:END:
** vars
:PROPERTIES:
:CUSTOM_ID: c8305f6f-935c-4e99-b737-5c36fb821580
:END:
#+begin_src lua
local is_windows = vim.fn.has('win32') == 1 or vim.fn.has('win64') == 1

local my_augroup = vim.api.nvim_create_augroup("MyAutoCommands", { clear = true })

local archive_7z_program = nil

if vim.fn.executable('7z') == 1 then
  archive_7z_program = '7z'
elseif vim.fn.executable('7zz') == 1 then
  archive_7z_program = '7zz'
end

local vi_program = 'nvim'
if vim.fn.executable('nvim') == 0 then
  vi_program = vim.v.progpath
end
#+end_src
** global-fn
:PROPERTIES:
:CUSTOM_ID: 7b8ea0dc-6325-4a16-b39b-ab65c583c1a5
:END:
#+begin_src lua
vim.api.nvim_create_user_command('V64cmd', function(opts)
  local decoded = vim.trim(vim.base64.decode(opts.args))
  vim.cmd(decoded)
end, { nargs = 1 })
#+end_src
** options
:PROPERTIES:
:CUSTOM_ID: a6b6f699-fe15-4794-8396-06f8ab43eead
:END:
#+begin_src lua
vim.opt.tabstop = 2
vim.opt.shiftwidth = 2
vim.opt.expandtab = true
vim.opt.smartindent = true
vim.opt.autochdir = true
vim.opt.mouse = ''
#+end_src
** theme
:PROPERTIES:
:CUSTOM_ID: b8635e66-b5f5-4caf-9f0d-cebbc27c6a9c
:END:
#+begin_src lua
vim.cmd('colorscheme vim')
#+end_src

** emacsclient
:PROPERTIES:
:CUSTOM_ID: e57de01b-02b3-444b-a500-14ffbc921ac7
:END:
#+begin_src lua
local function open_with_emacsclient()
  local file_path = vim.fn.expand('%:p')
  local result = vim.fn.system('emacsclient -n "' .. file_path .. '"')
  if vim.v.shell_error ~= 0 then
    vim.notify('Failed to open with emacsclient: ' .. result, vim.log.levels.ERROR)
  end
end

vim.keymap.set('n', '<Leader>e', open_with_emacsclient, { noremap = true, silent = true })
#+end_src

*** eval
:PROPERTIES:
:CUSTOM_ID: 149a8156-b704-4bbc-933d-7924b01b1c09
:END:
#+begin_src lua
local function emacs_eval(sexp)
  vim.fn.system('emacsclient -ne ' .. vim.fn.shellescape(sexp))
end
#+end_src

*** org

**** tangle
:PROPERTIES:
:CUSTOM_ID: a0f3be67-39aa-484d-9f3e-f4adf322076a
:END:
#+begin_src lua
vim.api.nvim_create_user_command(
  'Tangle',
  function()
    local fmt = '(let (org-confirm-babel-evaluate) (zr-org-exec-link-or-babel-nearby \'(4) "%s"))'
    local file = vim.fn.expand('%:p')
    if is_windows then
      file = file:gsub('\\', '/')
    end
    local cmd = fmt:format(file)
    emacs_eval(cmd)
  end, {})
#+end_src
**** detangle
:PROPERTIES:
:CUSTOM_ID: 992c50bd-519c-4231-af71-f2088449408a
:END:
#+begin_src lua
vim.api.nvim_create_user_command(
  'Detangle',
  function()
    local fmt = '(let ((zr-org-babel-confirm-replace-tangle t)) (zr-org-babel-detangle "%s"))'
    local file = vim.fn.expand('%:p')
    if is_windows then
      file = file:gsub('\\', '/')
    end
    local cmd = fmt:format(file)
    emacs_eval(cmd)
  end, {})
#+end_src

** terminal

*** proc
:PROPERTIES:
:CUSTOM_ID: c6872684-09eb-4590-bb51-5c9857848fd2
:END:
#+begin_src lua
local function term_last_matching_proc()
  local cursor_pos = vim.api.nvim_win_get_cursor(0)
  if cursor_pos[1] == vim.b.term_key_cache.line_num then
    return vim.b.term_key_cache
  end

  local proc_prompt_regexp = {
    ['^\\([a-zA-Z]:[^>]*\\)>'] = 'cmd.exe',
    ['^PS \\([a-zA-Z]:\\[^>]*\\)>'] = 'powershell',
    ['^\\(\\([a-z]\\+:[a-z@/0-9]\\+\\)\\|\\((not connected)\\)\\)[=-]>'] = 'usql',
  }
  local lines = vim.api.nvim_buf_get_lines(0, 0, -1, false)

  for i = #lines, 1, -1 do
    local line = lines[i]

    for pattern, proc in pairs(proc_prompt_regexp) do
      local matches = vim.fn.matchlist(line, pattern)
      if #matches > 0 and matches[1] ~= '' then
        return {
          proc = proc,
          match = matches,
          line_num = i,
          line_content = line,
        }
      end
    end
  end
  return vim.b.term_key_cache
end
#+end_src

*** map
:PROPERTIES:
:CUSTOM_ID: cba672ec-fabe-426d-9967-5d11342b607b
:END:

**** vim default
:PROPERTIES:
:CUSTOM_ID: d26e8060-6d33-49cb-bf89-5f9cd25787b8
:END:
#+begin_src lua
vim.keymap.set('t', '<C-w>.', '<C-w>')
vim.keymap.set('t', '<C-w>n', '<C-\\><C-n>')
vim.keymap.set('t', '<C-w><C-\\>', '<C-\\>')
vim.keymap.set('t', '<C-w>"', function()
  return '<C-\\><C-N>"' .. vim.fn.nr2char(vim.fn.getchar()) .. 'pi'
end, { expr = true, noremap = true })
vim.keymap.set('t', '<C-w>c', '<C-c>')
vim.keymap.set('t', '<C-w>gt', '<C-\\><C-o>gt')
vim.keymap.set('t', '<C-w>gT', '<C-\\><C-o>gT')
#+end_src

**** other
:PROPERTIES:
:CUSTOM_ID: 09e7f325-2c80-4746-a4a3-02a3506a4dcf
:END:
#+begin_src lua
local term_keymaps = {
  ['cmd.exe'] =
   {
     ['<C-p>'] = '<Up>',
     ['<C-n>'] = '<Down>',
     ['<C-f>'] = '<Right>',
     ['<C-b>'] = '<Left>',
     ['<C-a>'] = '<Home>',
     ['<C-e>'] = '<End>',
     ['<C-u>'] = '<C-Home>',
     ['<C-k>'] = '<C-End>',
     ['<C-m>'] = '<Enter>',
     ['<C-d>'] = '<Del>',
     ['<C-l>'] = '<F7>',
     ['<M-z>'] = '<F4>',
     ['<M-p>'] = '<F8>',
     ['<M-b>'] = '<C-Left>',
     ['<M-f>'] = '<C-Right>',
   },
}

local function term_map_key(key)
  local match = term_last_matching_proc()
  local action = key
  if match then
    vim.api.nvim_buf_set_var(0, 'term_key_cache', match)
    local map = term_keymaps[match.proc]
    if map then
      action = map[key] or key
    end
  end

  if type(action) == 'string' then
    vim.api.nvim_feedkeys(
      vim.api.nvim_replace_termcodes(action, true, true, true),
      'n', false)
  elseif type(action) == 'function' then
    action()
  end
  return ''
end
#+end_src

*** dirtrack
:PROPERTIES:
:CUSTOM_ID: e137dfbe-f420-4fc3-b904-89cccbc7d719
:END:

#+begin_src lua
local ns = vim.api.nvim_create_namespace('my.terminal.dirtrack')
#+end_src

#+begin_src lua
vim.api.nvim_create_autocmd('TermRequest', {
  group = my_augroup,
  desc = 'OSC 133: Prompt marks & Dirtrack',
  callback = function(args)
    local data = args.data
    local seq = data.sequence
    if seq:match('^]133;A') then
      local cursor = data.cursor
      -- Âú®ÊèêÁ§∫Á¨¶Ë°åÊ∑ªÂä†Ê†áËÆ∞
      vim.api.nvim_buf_set_extmark(args.buf, ns, cursor[1] - 1, 0, {
        sign_text = '‚ñ∂',
        sign_hl_group = 'SpecialChar',
      })
    elseif seq:match('^]1337;CurrentDir=') then
      local cwd = seq:match('^]1337;CurrentDir=(.+)')
      if cwd then
        vim.api.nvim_buf_set_var(args.buf, 'terminal_cwd', cwd)
        vim.fn.chdir(cwd)
      end
    end
  end,
})
#+end_src

*** shell
:PROPERTIES:
:CUSTOM_ID: b3b3a606-2889-4775-bd6d-2cd38ef9ec33
:END:

**** rc
:PROPERTIES:
:CUSTOM_ID: 96b627f6-d3a1-41d9-9413-c73505aca25c
:END:
#+begin_src lua :var my_neovim_default_server=(default-value 'zr-viper-default-nvim-server)
local cmd_rc = {
  'doskey vi=emacsclient -n $*',
  string.format('set PATH=%s;%%PATH%%', vim.fn.resolve(os.getenv('myvimrc')):gsub('neovim\\_tangle\\.+', 'init\\_tangle', 1)),
  'set DISPLAY=127.0.0.1:0',
  'set PAGER=more.exe',
  'set EDITOR=emacsclient',
  'PROMPT $e]133;D$e\\$e]133;A$e\\$e]1337;CurrentDir=$P$e\\%PROMPT%$e]133;B$e\\',
}

local bash_rc = {
  'history -d -1',
  string.format('vi() { realpath -z -- "$@" | xargs -0 %s --server "$NVIM" --remote-tab; }', vim.fn.shellescape(vi_program)),
  string.format('nvim-server-port-open-p() { curl -sm1 "http://%s" ; [ $? -eq 52 ] ; }', my_neovim_default_server), -- http result faster than telnet
  string.format('nvim-server() { nvim-server-port-open-p || ( %s --listen %s --headless & ) }', vim.fn.shellescape(vi_program), vim.fn.shellescape(my_neovim_default_server)),
  string.format('nvim-server-cmd() { nvim-server-port-open-p && %s --server %s --remote-expr "execute(\'V64cmd $*\')" || echo "NeoVim not running." ; }', vim.fn.shellescape(vi_program), vim.fn.shellescape(my_neovim_default_server)),
  'vt() { local cmd=$(printf "tabe | tc %s | te %s" "$(pwd)" "$*" | base64 -w0) ; nvim-server-cmd "$cmd" ; }',
  'nvim-server',
  'print_osc133() { printf "\\033]1337;CurrentDir=$PWD\\033\\\\"; }',
  'PS1="\\e]133;D;\\a\\e]133;A;\\a${PS1}\\e]133;B;\\a"',
}
#+end_src

**** setup
:PROPERTIES:
:CUSTOM_ID: a2021abf-db0d-438c-9805-5a04a25a0958
:END:
#+begin_src lua
local function setup_terminal_cmd()
  local job_id = vim.b.terminal_job_id
  if job_id then
    vim.api.nvim_chan_send(job_id, 'echo off\r\n')
    for _, cmd in ipairs(cmd_rc) do
      vim.api.nvim_chan_send(job_id, cmd .. '\r\n')
    end
    vim.api.nvim_chan_send(job_id, 'echo on\r\n')
  end
end
#+end_src

#+begin_src lua
local function setup_terminal_bash()
  local job_id = vim.b.terminal_job_id
  if job_id then
    vim.api.nvim_chan_send(job_id, 'set +o history\n')
    for _, cmd in ipairs(bash_rc) do
      vim.api.nvim_chan_send(job_id, cmd .. '\n')
    end
    vim.api.nvim_chan_send(job_id, 'set -o history\n')
  end

  local buf = vim.api.nvim_get_current_buf()
  vim.keymap.set('t', '<C-w>n', '<C-\\><C-n>', { noremap = true, buffer = buf })
  vim.api.nvim_create_autocmd({ 'TermRequest' }, {
    group = my_augroup,
    desc = 'Handles OSC 7 dir change requests',
    callback = function(ev)
      if string.sub(vim.v.termrequest, 1, 4) == '\x1b]7;' then
        local dir = string.gsub(vim.v.termrequest, '\x1b]7;file://[^/]*', '')
        if vim.fn.isdirectory(dir) == 0 then
          return
        end
        vim.api.nvim_buf_set_var(ev.buf, 'osc7_dir', dir)
        if vim.o.autochdir and buf == ev.buf then
          vim.cmd.cd(dir)
        end
      end
    end,
  })
end
#+end_src

#+begin_src lua
local function setup_terminal(args)
  command = 'setlocal signcolumn=auto'
  local buf = args.buf
  vim.api.nvim_buf_set_var(buf, 'terminal_cwd', vim.fn.getcwd())
  local bufname = vim.api.nvim_buf_get_name(buf)
  if bufname:match('^term://') then
    local cmd = bufname:match('([%w.]+)$')
    vim.api.nvim_buf_set_var(buf, 'term_key_cache', {
      ['proc'] = cmd,
      ['line_num'] = 1,
    })
    local map = term_keymaps[cmd]
    if map then
      for key, _ in pairs(map) do
        vim.keymap.set('t', key, function()
                                   term_map_key(key)
                                 end, { noremap = true, buffer = buf })
      end
    end
    if cmd == 'cmd.exe' then
      setup_terminal_cmd()
    elseif cmd == 'bash' then
      setup_terminal_bash()
    end
  end
end
#+end_src

#+begin_src lua
vim.api.nvim_create_autocmd('TermOpen', {
  group = my_augroup,
  pattern = '*',
  callback = setup_terminal,
})
#+end_src

** remote

*** start
:PROPERTIES:
:CUSTOM_ID: c1082729-583b-4866-849f-4f5615e60630
:END:
#+begin_src lua
if os.getenv('SSH_TTY') then
#+end_src

*** clipboard
:PROPERTIES:
:CUSTOM_ID: cc4bceeb-422b-4b35-8ec7-a8563dc18cec
:END:
#+begin_src lua
table.insert(bash_rc, 'clip() { printf "\\033]52;c;%s\\a" "$(base64 -w0)" > "$SSH_TTY"; }')

local osc52 = require('vim.ui.clipboard.osc52')

vim.g.clipboard = {
  name = 'OSC 52',
  copy = {
    ['+'] = osc52.copy('+'),
    ['*'] = osc52.copy('*'),
  },
  paste = {
    ['+'] = osc52.paste('+'),
    ['*'] = osc52.paste('*'),
  },
}
#+end_src

*** browse-url
:PROPERTIES:
:CUSTOM_ID: 21e2f805-abfa-4435-9f15-a72b8281af48
:END:
#+begin_src lua :var browse_url_auth=(auth-source-pick-first-password :host "browse-url.nginx.localhost")
local browse_url_cmd = string.format('curl -H "origin:ssh://%s" -H "url:%%s" -H "authorization:%s" http://127.0.0.1:7780/lua/browse-url', vim.loop.os_gethostname(), browse_url_auth)

vim.keymap.set({ 'n' }, 'gx', function()
  for _, url in ipairs(require('vim.ui')._get_urls()) do
    local err = vim.fn.system(browse_url_cmd:format(url))
    if err then
      vim.notify(err, vim.log.levels.ERROR)
    end
  end
end, { noremap = true })
#+end_src

*** browse-media
:PROPERTIES:
:CUSTOM_ID: f2bcf8c1-a7a6-463c-96dd-bc6fbc0b553c
:END:

#+name: expand-lua-kv-table
#+begin_src elisp :var value='(("a" . "b"))
(mapconcat (lambda (s) (format "['%s'] = '%s'," (car s) (cdr s))) value "\n")
#+end_src

#+begin_src lua :var mpv_auth=(auth-source-pick-first-password :host "mpv.nginx.localhost")
local file_transform_table = {
  <<expand-lua-kv-table(value=(and zr-local-pls (plist-get (cdr (plstore-get zr-local-pls "file-transform")) :tbl)))>>
}

local function transform_file_path(file)
  local transformed = file
  for orig, replacement in pairs(file_transform_table) do
    transformed = vim.fn.substitute(
      transformed,
      orig,
      vim.fn.substitute(
        replacement, '{{{HOSTNAME}}}', vim.loop.os_gethostname(), 'g'), 'g')
  end
  return transformed
end

local function mpv_play_files(files)
  if #files == 0 then
    print('No files to play')
    return
  end
    
  local cmd = {
    'curl',
    '-H', 'content-type:application/vnd.apple.mpegurl',
    '-H', 'origin:ssh://' .. vim.loop.os_gethostname(),
    '-H', 'authorization:' .. mpv_auth,
    '--data-binary', '@-',
    'http://127.0.0.1:7780/lua/mpv'
  }

  local job = vim.fn.jobstart(cmd, {
    on_exit = function(_, code, _)
      if code ~= 0 then
        print('Failed to send to mpv (code '..code..')')
      end
    end,
    stdin = 'pipe',
  })

  vim.fn.chansend(job, files)
  vim.fn.chanclose(job, 'stdin')
end

local function transform_files_path(paths)
  local files = {}
  for _, path in ipairs(paths) do
    path = vim.fn.fnamemodify(path, ':p')
    if vim.fn.isdirectory(path) == 1 then
      for _, file in ipairs(vim.fn.globpath(path, '**/*', 1, 1)) do
        if vim.fn.isdirectory(file) == 0 then
          table.insert(files, transform_file_path(file))
        end
      end
    else
      table.insert(files, transform_file_path(path))
    end
  end
  return files
end

vim.api.nvim_create_user_command(
  'Mpv',
  function(opts)
    local paths
    if opts.args ~= '' then
      paths = opts.args
    elseif vim.bo.filetype == 'netrw' then
      vim.cmd.lcd(vim.b.netrw_curdir)
      paths = vim.fn['netrw#Expose']('netrwmarkfilelist_' .. vim.api.nvim_get_current_buf())
      if paths == 'n/a' then
        paths = {vim.fn.expand('<cfile>:p')}
      end
    else
      paths = {vim.fn.expand('%:p')}
    end

    mpv_play_files(table.concat(transform_files_path(paths), '\n'))
  end, { nargs = '*' })
#+end_src

*** end
:PROPERTIES:
:CUSTOM_ID: bbf6df13-a341-489c-92be-22d3c37679f1
:END:
#+begin_src lua
end
#+end_src

** netrw
*** vars
:PROPERTIES:
:CUSTOM_ID: 0c6f9751-5296-4199-879d-dd91d0e9d278
:END:
#+begin_src lua
vim.g.netrw_keepdir = 0

if archive_7z_program then
  vim.g.netrw_decompress = {
    ['.zip'] = archive_7z_program .. ' x -otmp-zip',
    ['.7z'] = archive_7z_program .. ' x -otmp-7z',
    ['.rar'] = archive_7z_program .. ' x -otmp-rar'
  }
end
#+end_src
*** bind
:PROPERTIES:
:CUSTOM_ID: 1ad2abfd-1d4a-4651-85c5-859f1f2ba1e6
:END:
#+begin_src lua
local function netrw_buffer_dir()
  vim.cmd.edit(get_buffer_dir())
end

vim.keymap.set('n', '<Leader>d', netrw_buffer_dir, { noremap = true })
#+end_src
** sudo
:PROPERTIES:
:CUSTOM_ID: a905f861-9fb1-4a8d-ad2d-94b8d94fa7a7
:END:
Steal from https://github.com/ibhagwan/nvim-lua/blob/main/lua/utils.lua.

*** exec
:PROPERTIES:
:CUSTOM_ID: 1ff91053-4aa4-4c8a-8fe1-33a0788dca01
:END:
#+begin_src lua
local function sudo_exec(cmd, print_output)
  vim.fn.inputsave()
  local password = vim.fn.inputsecret("Password: ")
  vim.fn.inputrestore()
  if not password or #password == 0 then
    vim.notify('Invalid password, sudo aborted', vim.log.levels.ERROR)
    return false
  end
  local out = vim.fn.system(string.format("sudo -p '' -S %s", cmd), password)
  if vim.v.shell_error ~= 0 then
    print("\r\n")
    vim.notify(out, vim.log.levels.ERROR)
    return false
  end
  if print_output then print("\r\n", out) end
  return true
end
#+end_src

*** write
:PROPERTIES:
:CUSTOM_ID: ed5a8717-3b22-4a2f-b51e-232dfe151792
:END:
#+begin_src lua
local function sudo_edit (args)
  local tmpfile = args[1] or vim.fn.tempname()
  local filepath = args[2] or vim.fn.expand("%")
  if not filepath or #filepath == 0 then
    vim.notify('No file name' .. filepath, vim.log.levels.ERROR)
    return
  end
  -- `bs=1048576` is equivalent to `bs=1M` for GNU dd or `bs=1m` for BSD dd
  -- Both `bs=1M` and `bs=1m` are non-POSIX
  local cmd = string.format("dd if=%s of=%s bs=1048576",
    vim.fn.shellescape(tmpfile),
    vim.fn.shellescape(filepath))
  -- no need to check error as this fails the entire function
  vim.api.nvim_exec2(string.format("write! %s", tmpfile), { output = true })
  if sudo_exec(cmd) then
    -- refreshes the buffer and prints the "written" message
    vim.cmd.checktime()
    -- exit command mode
    vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes(
      "<Esc>", true, false, true), "n", true)
  end
  vim.fn.delete(tmpfile)
end

vim.api.nvim_create_user_command('Sudoedit', sudo_edit, { nargs = '*' })
#+end_src

** post
:PROPERTIES:
:CUSTOM_ID: e9ab948e-c8d6-4f2c-ab8f-d225b27d9114
:END:
#+begin_src lua
table.insert(bash_rc, 'PROMPT_COMMAND=print_osc133')
#+end_src
