#+title:      neovim
#+date:       [2025-02-14 Fri 20:24]
#+filetags:   :entertainment:
#+identifier: 20250214T202410
* tangle
#+begin_src elisp
(org-babel-tangle)

(make-symbolic-link (expand-file-name "_tangle")
                    (substitute-in-file-name "$LOCALAPPDATA/nvim") t)
#+end_src
* init
:PROPERTIES:
:header-args:lua: :eval no :tangle (zr-org-by-tangle-dir "init.lua") :mkdirp t
:CUSTOM_ID: b992d316-d1aa-40fe-b968-e00fe0ae4809
:END:
** vars
:PROPERTIES:
:CUSTOM_ID: c8305f6f-935c-4e99-b737-5c36fb821580
:END:
#+begin_src lua
local is_windows = vim.fn.has('win32') == 1 or vim.fn.has('win64') == 1
#+end_src

** theme
:PROPERTIES:
:CUSTOM_ID: b8635e66-b5f5-4caf-9f0d-cebbc27c6a9c
:END:
#+begin_src lua
vim.cmd('colorscheme vim')
#+end_src

** emacsclient
:PROPERTIES:
:CUSTOM_ID: e57de01b-02b3-444b-a500-14ffbc921ac7
:END:
#+begin_src lua
local function open_with_emacsclient()
  local file_path = vim.fn.expand('%:p')
  local result = vim.fn.system('emacsclient -n "' .. file_path .. '"')
  if vim.v.shell_error ~= 0 then
    vim.notify('Failed to open with emacsclient: ' .. result, vim.log.levels.ERROR)
  end
end

vim.keymap.set('n', '<Leader>e', open_with_emacsclient, { noremap = true, silent = true })
#+end_src

** terminal

*** map
:PROPERTIES:
:CUSTOM_ID: cba672ec-fabe-426d-9967-5d11342b607b
:END:
#+begin_src lua
-- vim.keymap.set('t', '<C-r>', function()
--   return '<C-\\><C-N>"' .. vim.fn.nr2char(vim.fn.getchar()) .. 'pi'
-- end, { expr = true, noremap = true })
#+end_src

**** windows
:PROPERTIES:
:CUSTOM_ID: 2f1e9372-3ed8-4d52-8a51-1ec94be182bb
:END:
#+begin_src lua
if vim.o.shell == 'cmd.exe' then
  vim.keymap.set('t', '<C-p>', '<Up>')
  vim.keymap.set('t', '<C-f>', '<Right>')
  vim.keymap.set('t', '<C-b>', '<Left>')
  vim.keymap.set('t', '<C-a>', '<Home>')
  vim.keymap.set('t', '<C-e>', '<End>')
  vim.keymap.set('t', '<C-u>', '<C-Home>')
  vim.keymap.set('t', '<C-k>', '<C-End>')
  vim.keymap.set('t', '<C-m>', '<Enter>')
  vim.keymap.set('t', '<C-d>', '<Del>')
  vim.keymap.set('t', '<M-d>', '<C-BS>')
  vim.keymap.set('t', '<C-l>', '<F7>')
  vim.keymap.set('t', '<M-z>', '<F4>')
  vim.keymap.set('t', '<M-p>', '<F8>')
  vim.keymap.set('t', '<M-b>', '<C-Left>')
  vim.keymap.set('t', '<M-f>', '<C-Right>')
end
#+end_src

*** dirtrack
:PROPERTIES:
:CUSTOM_ID: e137dfbe-f420-4fc3-b904-89cccbc7d719
:END:

#+begin_src lua
local function lcd_by_cur_line_and_to_normal()
  local current_line = vim.api.nvim_get_current_line()
  local path_pattern = '^\\(PS \\)\\?\\([a-zA-Z]:\\\\[^>]*\\)>'
  local path = vim.fn.matchlist(current_line, path_pattern)[3]

  if path and vim.fn.isdirectory(path) then
    local buf = vim.api.nvim_get_current_buf()
    vim.api.nvim_buf_set_var(buf, 'osc7_dir', path)
    if vim.o.autochdir then
      vim.fn.chdir(path)
    end
  end
  vim.cmd.stopinsert()
end
#+end_src

#+begin_src lua
if is_windows then
  vim.keymap.set('t', '<Esc>', lcd_by_cur_line_and_to_normal, { noremap = true })
else
  vim.keymap.set('t', '<Esc>', '<C-\\><C-n>', { noremap = true })
  vim.api.nvim_create_autocmd({ 'TermRequest' }, {
    desc = 'Handles OSC 7 dir change requests',
    callback = function(ev)
      if string.sub(vim.v.termrequest, 1, 4) == '\x1b]7;' then
        local dir = string.gsub(vim.v.termrequest, '\x1b]7;file://[^/]*', '')
        if vim.fn.isdirectory(dir) == 0 then
          return
        end
        vim.api.nvim_buf_set_var(ev.buf, 'osc7_dir', dir)
        if vim.o.autochdir and vim.api.nvim_get_current_buf() == ev.buf then
          vim.cmd.cd(dir)
        end
      end
    end,
  })
end
vim.api.nvim_create_autocmd({ 'BufEnter', 'WinEnter', 'DirChanged' }, {
  callback = function(ev)
    if vim.b.osc7_dir and vim.fn.isdirectory(vim.b.osc7_dir) == 1 then
      vim.cmd.cd(vim.b.osc7_dir)
    end
  end,
})
#+end_src

** remote

*** start
:PROPERTIES:
:CUSTOM_ID: c1082729-583b-4866-849f-4f5615e60630
:END:
#+begin_src lua
if os.getenv('SSH_TTY') then
#+end_src

*** clipboard
:PROPERTIES:
:CUSTOM_ID: cc4bceeb-422b-4b35-8ec7-a8563dc18cec
:END:
#+begin_src lua
local osc52 = require('vim.ui.clipboard.osc52')

vim.g.clipboard = {
  name = 'OSC 52',
  copy = {
    ['+'] = osc52.copy('+'),
    ['*'] = osc52.copy('*'),
  },
  paste = {
    ['+'] = osc52.paste('+'),
    ['*'] = osc52.paste('*'),
  },
}
#+end_src

*** end
:PROPERTIES:
:CUSTOM_ID: bbf6df13-a341-489c-92be-22d3c37679f1
:END:
#+begin_src lua
end
#+end_src
