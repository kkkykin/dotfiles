#+title:      koreader
#+date:       [2025-03-19 Wed 21:33]
#+filetags:   :android:
#+identifier: 20250319T213329
#+property: :header-args: :comments no

* tangle
#+begin_src elisp
(let ((zr-local-pls (plstore-open "koreader.pls"))
      (zr-org-tangle-default-dir (if (eq 'android system-type)
                                     "/storage/emulated/0/koreader"
                                   (expand-file-name "~/.config/koreader")))
      (books-dir (if (eq 'android system-type)
                    "/storage/emulated/0/Books"
                  (expand-file-name "~/Books"))))
  (mkdir books-dir t)
  (org-babel-tangle))
#+end_src

* settings

** main
:PROPERTIES:
:CUSTOM_ID: 31f80453-32fa-4602-8245-9ba3c141aba6
:END:
#+header: :var zr_kosync_server=(car (plist-get (cdr (plstore-get zr-local-pls "kosync")) :servers))
#+header: :var zr_kosync_user=(plist-get (cdr (plstore-get zr-local-pls "kosync")) :user)
#+header: :var zr_kosync_authkey=(plist-get (cdr (plstore-get zr-local-pls "kosync")) :authkey)
#+header: :var zr_books_dir=(concat books-dir)
#+header: :var zr_proxy=(let ((proxy (or (getenv "all_proxy") "http://127.0.0.1:10807"))) (replace-regexp-in-string "^socks5h?" "http" proxy))
#+begin_src lua :tangle (zr-org-by-tangle-dir "settings.reader.lua") :mkdirp t
return {
  ["android_ignore_volume_keys"] = true,
  ["android_screen_timeout"] = -1,
  ["autoremove_deleted_items_from_history"] = true,
  ["collate"] = "access",
  ["cre_header_author"] = 1,
  ["cre_header_auto_refresh"] = 0,
  ["cre_header_battery"] = 1,
  ["cre_header_battery_percent"] = 1,
  ["cre_header_chapter_marks"] = 1,
  ["cre_header_clock"] = 1,
  ["cre_header_page_count"] = 1,
  ["cre_header_page_number"] = 1,
  ["cre_header_reading_percent"] = 0,
  ["cre_header_status_font_size"] = 20,
  ["cre_header_title"] = 1,
  ["download_dir"] = zr_books_dir,
  ["footer_presets"] = {
    ["base"] = {
      ["footer"] = {
        ["align"] = "center",
        ["all_at_once"] = true,
        ["auto_refresh_time"] = false,
        ["battery"] = false,
        ["battery_hide_threshold"] = 40,
        ["book_author"] = false,
        ["book_author_max_width_pct"] = 30,
        ["book_chapter"] = true,
        ["book_chapter_max_width_pct"] = 30,
        ["book_time_to_read"] = true,
        ["book_title"] = false,
        ["book_title_max_width_pct"] = 30,
        ["bookmark_count"] = true,
        ["bottom_horizontal_separator"] = false,
        ["chapter_progress"] = true,
        ["chapter_progress_bar"] = false,
        ["chapter_time_to_read"] = true,
        ["container_bottom_padding"] = 1,
        ["container_height"] = 14,
        ["disable_progress_bar"] = false,
        ["disabled"] = false,
        ["dynamic_filler"] = false,
        ["frontlight"] = false,
        ["hide_empty_generators"] = true,
        ["initial_marker"] = true,
        ["item_prefix"] = "compact_items",
        ["items_separator"] = "none",
        ["lock_tap"] = true,
        ["mem_usage"] = false,
        ["page_progress"] = false,
        ["page_turning_inverted"] = false,
        ["pages_left"] = false,
        ["pages_left_book"] = false,
        ["pages_left_includes_current_page"] = false,
        ["percentage"] = false,
        ["progress_bar_min_width_pct"] = 20,
        ["progress_bar_position"] = "alongside",
        ["progress_margin"] = false,
        ["progress_margin_width"] = 42,
        ["progress_pct_format"] = "0",
        ["progress_style_thick_height"] = 7,
        ["progress_style_thin"] = false,
        ["progress_style_thin_height"] = 3,
        ["reclaim_height"] = true,
        ["skim_widget_on_hold"] = true,
        ["text_font_bold"] = false,
        ["text_font_size"] = 14,
        ["time"] = false,
        ["toc_markers"] = true,
        ["toc_markers_width"] = 2,
        ["wifi_status"] = true,
      },
      ["reader_footer_custom_text"] = "KOReader",
      ["reader_footer_custom_text_repetitions"] = 1,
      ["reader_footer_mode"] = 3,
    },
  },
  ["home_dir"] = zr_books_dir,
  ["http_proxy"] = zr_proxy,
  ["http_proxy_enabled"] = false,
  ["kosync"] =
   {
     ["auto_sync"] = true,
     ["checksum_method"] = 0,
     ["sync_backward"] = 3,
     ["sync_forward"] = 1,
     ["custom_server"] = zr_kosync_server,
     ["username"] = zr_kosync_user,
     ["userkey"] = zr_kosync_authkey,
   },
  ["last_migration_date"] = 20250601,
  ["multiswipes_enabled"] = true,
  ["profiles_autoexec"] = {
    ["ReaderReady"] = {
      ["status bar"] = true,
      ["alt status bar"] = true,
    },
  },
  ["quickstart_shown_version"] = 202508000000,
  ["reverse_collate"] = true,
  ["wifi_enable_action"] = "ignore",
}
#+end_src

** other
:PROPERTIES:
:tangle-dir: (expand-file-name "settings" zr-org-tangle-default-dir)
:END:

*** cloudstorage
:PROPERTIES:
:CUSTOM_ID: b9d5d74b-e33b-460f-9e81-ffce4b770ded
:END:
#+header: :var zr_cs=(plist-get (cdr (plstore-get zr-local-pls "cs")) :server)
#+begin_src lua :mkdirp t :tangle (zr-org-by-tangle-dir "cloudstorage.lua")
local out = { cs_servers = {} }

for i, v in ipairs(zr_cs) do
  out.cs_servers[i] = {
    name     = v[1],
    username = v[2],
    password = v[3],
    address  = v[4],
    type     = "webdav",
    url      = "",
  }
end
return out
#+end_src

*** opds
:PROPERTIES:
:CUSTOM_ID: 2bf4064a-bb05-46bb-a30d-e2563035b465
:END:
#+header: :var zr_opds=(plist-get (cdr (plstore-get zr-local-pls "opds")) :server)
#+begin_src lua :mkdirp t :tangle (zr-org-by-tangle-dir "opds.lua")
local out =
  {
    ["downloads"] = {},
    ["pending_syncs"] = {},
    ["servers"] = {},
    ["settings"] = {},
  }

for i, v in ipairs(zr_opds) do
  out.servers[i] = {
    title    = v[1],
    username = v[2],
    password = v[3],
    url      = v[4],
  }
end
return out
#+end_src

*** perception_expander
:PROPERTIES:
:CUSTOM_ID: 584878ee-97f7-48f3-a508-691b60a1fa63
:END:
#+begin_src lua :tangle (zr-org-by-tangle-dir "perception_expander.lua") :mkdirp t
return {
  ["is_enabled"] = true,
}
#+end_src

*** profiles
:PROPERTIES:
:CUSTOM_ID: 8c013e7d-a376-4b5b-b06c-f169b514fb1e
:END:
#+begin_src lua :tangle (zr-org-by-tangle-dir "profiles.lua") :mkdirp t
return {
  ["alt status bar"] =
   {
     ["settings"] =
      {
        ["name"] = "alt status bar",
        ["order"] =
         {
           [1] = "status_line",
         },
      },
     ["status_line"] = 0,
   },
  ["status bar"] = {
    ["load_footer_preset"] = "base",
    ["settings"] = {
      ["name"] = "status bar",
    },
  },
}
#+end_src


* style
:PROPERTIES:
:tangle-dir: (expand-file-name "styletweaks" zr-org-tangle-default-dir)
:END:

** no-image
:PROPERTIES:
:CUSTOM_ID: f064a0e2-42de-425a-8aca-82dbeb7dcad4
:END:
#+begin_src css :tangle (zr-org-by-tangle-dir "no-image.css") :mkdirp t
img, svg {
  display: none;
}
#+end_src

* patches
:PROPERTIES:
:tangle-dir: (expand-file-name "patches" zr-org-tangle-default-dir)
:CUSTOM_ID: 0fc9e81f-6433-4e73-b443-f545f4e4c87e
:END:

** init
:PROPERTIES:
:CUSTOM_ID: 7b822f94-9aa2-49e2-b1f5-60cdd19a5a6a
:END:
#+begin_src lua :tangle (zr-org-by-tangle-dir "1-aaa-init.lua") :mkdirp t
local DataStorage = require("datastorage")  
local patch_dir = DataStorage:getDataDir() .. "/patches"  
  
package.path = patch_dir .. "/?.lua;" .. package.path  
#+end_src

** http-trans
:PROPERTIES:
:CUSTOM_ID: 6a69e3c5-a3fe-417f-a563-22fc42f8416f
:END:
#+begin_src lua :tangle (zr-org-by-tangle-dir "1-http-trans.lua")
local logger = require("logger")
local http = require("socket.http")
local url = require("socket.url")

local RULES = {
  {
    match = function(req, parsed)
      return req.user and req.password
    end,
    transform = function(req, parsed)
      local mime = require("mime")
      req.headers = req.headers or {}
      req.headers["Authorization"] = "Basic " .. mime.b64(req.user .. ":" .. req.password)
      req.user, req.password = nil, nil
    end
  },
  {
    match = function(req, parsed)
      return parsed.host:match("%.asus%.local$") ~= nil and parsed.scheme == "http"
    end,
    transform = function(req, parsed)
      req.headers = req.headers or {}
      req.headers["Host"] = parsed.host
      parsed.host = "192.168.1.8"
    end
  },
  {
    match = function(req, parsed)
      return parsed.host == "translate.googleapis.com" and parsed.scheme == "http"
    end,
    transform = function(req, parsed)
      parsed.host = "180.163.151.162"
      req.headers = req.headers or {}
      req.headers["Host"] = "translate.googleapis.com"
    end
  },
  {
    -- push to kavita kosync server
    match = function(req, parsed)
      return parsed.host:match("^kavita%.") ~= nil and req.env and req.env.spore and req.env.spore.caller == "update_progress"
    end,
    transform = function(req, parsed)
      local JSON = require("rapidjson")
      local ltn12 = require("ltn12")

      local params = req.env.spore.params
      if params and params.progress then
        params.progress = params.progress:gsub("%].*$", "]/body/div/a/text().0")
      end

      local json_str = JSON.encode(params)

      req.source = ltn12.source.string(json_str)
      req.headers = req.headers or {}
      req.headers["content-length"] = tostring(#json_str)
    end
  }
}

<<local-http-rules()>>
for _, rule in ipairs(local_http_rules) do
  table.insert(RULES, rule)
end

local orig_http_request = http.request

http.request = function(request_or_url, body)
  local req = type(request_or_url) == "string"
    and { url = request_or_url }
    or request_or_url

  -- Handle body parameter for string URL style
  if type(request_or_url) == "string" and body then
    local ltn12 = require("ltn12")
    req.source = ltn12.source.string(body)
  end

  local parsed = url.parse(req.url)
  if not parsed then
    logger.warn("HTTP patch: failed to parse URL:", req.url)
    return orig_http_request(req)
  end

  for _, rule in ipairs(RULES) do
    if rule.match(req, parsed) then
      rule.transform(req, parsed)
      local new_url = url.build(parsed)
      if new_url then
        req.url = new_url
      else
        logger.warn("HTTP patch: failed to rebuild URL")
      end
      break
    end
  end

  return orig_http_request(req)
end
#+end_src

#+name: local-http-rules
#+begin_src elisp
(let ((local-rule-file "_local-http-rules.lua"))
  (if (file-readable-p local-rule-file)
      (org-file-contents local-rule-file)
    "local local_http_rules = {}"))
#+end_src

** kosync-patch
:PROPERTIES:
:CUSTOM_ID: 20d3efb5-22c9-4c21-ab16-b9ca1c197108
:END:
#+begin_src lua :tangle (zr-org-by-tangle-dir "2-kosync-patch.lua")
local userpatch = require("userpatch")
local Dispatcher = require("dispatcher")
local UIManager = require("ui/uimanager")
local InfoMessage = require("ui/widget/infomessage")
<<gen-kosync-servers()>>

userpatch.registerPatchPluginFunc("kosync", function(plugin)
  local orig_onReaderReady = plugin.onReaderReady

  plugin.onReaderReady = function(self)
    orig_onReaderReady(self)

    Dispatcher:registerAction("toggle_kosync_server", {
      category = "none",
      event = "ToggleKOSyncServer",
      title = "Toggle KOSync server",
      reader = true,
    })
  end

  plugin.onToggleKOSyncServer = function(self)
    local current = self.settings.custom_server
    local new_server = (current == zr_kosync_servers[1]) and zr_kosync_servers[2] or zr_kosync_servers[1]

    self:setCustomServer(new_server)

    UIManager:show(InfoMessage:new{
      text = "KOSync server switched",
      timeout = 3,
    })

    return true
  end

  -- local orig_getLastProgress = plugin.getLastProgress
  -- plugin.getLastProgress = function(self)
  --   return orig_getLastProgress(self):gsub("(/body/DocFragment%[%d+%]).+", "%1.0")
  -- end
end)
#+end_src

#+name: gen-kosync-servers
#+begin_src elisp
(let ((servers (plist-get (cdr (plstore-get zr-local-pls "kosync")) :servers)))
  (format "local zr_kosync_servers={'%s','%s'}" (car servers) (cadr servers)))
#+end_src

** hide-cutout
:PROPERTIES:
:CUSTOM_ID: 13adabbe-183c-4fac-9a20-e8dcd762a921
:END:
#+header: :prologue "local screen = require('android').screen"
#+header: :var screen.height=(if (eq 'android system-type) (string-to-number (replace-regexp-in-string "^Physical size: [[:digit:]]+x\\([[:digit:]]+\\)\n" "\\1" (zr-android-rish-command-to-string "wm size"))) "dummy")
#+begin_src lua :mkdirp t :tangle (if (eq 'android system-type) (zr-org-by-tangle-dir "10-hide-cutout.lua") "no")
#+end_src

** auth-header
:PROPERTIES:
:CUSTOM_ID: 40e0faad-2d9d-44c2-a846-2e976044e265
:END:
#+begin_src lua :tangle no
-- 统一patch http.request，将user/password参数转换为Authorization头
-- 解决与HTTP代理服务器的兼容性问题

local logger = require("logger")
local mime = require("mime")
local http = require("socket.http")

logger.info("Applying unified HTTP Authorization header patch")

-- 备份原始的http.request函数
local orig_http_request = http.request

-- 检查是否启用了HTTP代理
local function isHTTPProxyEnabled()
  return G_reader_settings:readSetting("http_proxy_enabled") and
    G_reader_settings:readSetting("http_proxy")
end

-- 重写http.request函数
http.request = function(request_or_url, body)
  if not isHTTPProxyEnabled() then
    return orig_http_request(request_or_url)
  end

  local request

  -- 处理两种调用方式：http.request(url) 和 http.request(request_table)
  if type(request_or_url) == "string" then
    request = { url = request_or_url }
    if body then
      request.source = ltn12.source.string(body)
    end
  else
    request = request_or_url
  end

  -- 如果存在user和password参数，转换为Authorization头
  if request.user and request.password then
    request.headers = request.headers or {}
    request.headers["Authorization"] = "Basic " .. mime.b64(request.user .. ":" .. request.password)

    -- 移除user和password参数，避免重复认证
    request.user = nil
    request.password = nil

    logger.dbg("HTTP request: converted user/password to Authorization header")
  end

  -- 调用原始的http.request函数
  return orig_http_request(request)
end

logger.info("Unified HTTP Authorization header patch applied successfully")
#+end_src

** helper
:PROPERTIES:
:CUSTOM_ID: a0ab750b-b797-4535-a6f9-39f856b6a9f6
:END:
#+begin_src lua :tangle (zr-org-by-tangle-dir "patch-helper.lua")
local ffi = require("ffi")
local C = ffi.C
local util = require("util")
local logger = require("logger")

local helper = {}

local function rish(command, mode)
  C.setenv("RISH_APPLICATION_ID", 'org.koreader.launcher', 1)
  mode = mode or 'r'
  local shell = {
    'app_process',
    '-Djava.class.path=plugins/terminal.koplugin/rish_shizuku.dex',
    '/system/bin',
    '--nice-name=rish',
    'rikka.shizuku.shell.ShizukuShellLoader',
  }
  local output
  local handle
  local one_shot

  if mode == 'f' then
    table.insert(shell, command)
    mode = 'r'
  elseif mode ~= 'w' then
    table.insert(shell, '-c')
    table.insert(shell, command)
  end

  one_shot = util.shell_escape(shell)
  logger.dbg("userpatch: rish command:", one_shot)
  if mode == 'e' then
    output = os.execute(one_shot)
  elseif mode == 'r' then
    handle = io.popen(one_shot, 'r')
    if not handle then
      return nil, "Failed to execute command"
    end
    output = handle:read('*a')
    handle:close()
  else
    handle = io.popen(one_shot, 'w')
    if not handle then
      return nil, "Failed to execute command"
    end
    handle:write(command)
    handle:close()
  end
  return output
end

function helper:cur_wifi_name()
  return rish('dumpsys wifi | grep "^current SSID" | cut -d\\" -f2', 'r')
end

return helper
#+end_src

* terminal
:PROPERTIES:
:tangle-dir: (expand-file-name "scripts" zr-org-tangle-default-dir)
:CUSTOM_ID: d813743c-d2d6-49dc-8655-b17dd74b20ac
:END:
#+begin_src sh :tangle (zr-org-by-tangle-dir "profile.user") :mkdirp t
export RISH_APPLICATION_ID="org.koreader.launcher"
export PRIVATE_BIN_DIR="$TERMINAL_HOME/plugins/terminal.koplugin"

function setup_dex() {
  SCRIPT_DIR="$TERMINAL_DATA/scripts"

  for file in "$SCRIPT_DIR"/*.dex; do
    filename=$(basename "$file")
    mv -f "$file" "$PRIVATE_BIN_DIR/"
    chmod 400 "$PRIVATE_BIN_DIR/$filename"
  done
}

setup_dex

function rish() {
  /system/bin/app_process -Djava.class.path="$PRIVATE_BIN_DIR/rish_shizuku.dex" /system/bin --nice-name=rish rikka.shizuku.shell.ShizukuShellLoader "$@"
}
#+end_src

# Local Variables:
# org-babel-tangle-use-relative-file-links: nil
# End:
