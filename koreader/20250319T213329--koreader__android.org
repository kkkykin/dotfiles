#+title:      koreader
#+date:       [2025-03-19 Wed 21:33]
#+filetags:   :android:
#+identifier: 20250319T213329
#+property: :header-args: :comments no

* tangle
#+begin_src elisp
(let ((zr-local-pls (plstore-open "koreader.pls")))
  (org-babel-tangle))
#+end_src

* settings
:PROPERTIES:
:tangle-dir: (if (eq 'android system-type) "/storage/emulated/0/koreader" zr-org-tangle-default-dir)
:END:

** main
:PROPERTIES:
:CUSTOM_ID: 31f80453-32fa-4602-8245-9ba3c141aba6
:END:
#+begin_src lua :tangle (zr-org-by-tangle-dir "settings.reader.lua") :mkdirp t
return {
  ["android_ignore_volume_keys"] = true,
  ["android_screen_timeout"] = -1,
  ["autoremove_deleted_items_from_history"] = true,
  ["collate"] = "access",
  ["download_dir"] = "/storage/emulated/0/Books",
  ["home_dir"] = "/storage/emulated/0/Books",
  ["http_proxy"] = "http://127.0.0.1:10807",
  ["http_proxy_enabled"] = false,
  ["last_migration_date"] = 20250601,
  ["multiswipes_enabled"] = true,
  ["profiles_autoexec"] =
   {
     ["ReaderReady"] =
      {
        ["alt status bar"] = true,
      },
   },
  ["quickstart_shown_version"] = 202508000000,
  ["reverse_collate"] = true,
  ["wifi_enable_action"] = "ignore",
}
#+end_src

** other
:PROPERTIES:
:tangle-dir: (if (eq 'android system-type) "/storage/emulated/0/koreader/settings" zr-org-tangle-default-dir)
:END:

*** cloudstorage
:PROPERTIES:
:CUSTOM_ID: b9d5d74b-e33b-460f-9e81-ffce4b770ded
:END:
#+header: :var zr_cs=(plist-get (cdr (plstore-get zr-local-pls "cs")) :server)
#+begin_src lua :mkdirp t :tangle (zr-org-by-tangle-dir "cloudstorage.lua")
local out = { cs_servers = {} }

for i, v in ipairs(zr_cs) do
  out.cs_servers[i] = {
    name     = v[1],
    username = v[2],
    password = v[3],
    address  = v[4],
    type     = "webdav",
    url      = "",
  }
end
return out
#+end_src

*** opds
:PROPERTIES:
:CUSTOM_ID: 2bf4064a-bb05-46bb-a30d-e2563035b465
:END:
#+header: :var zr_opds=(plist-get (cdr (plstore-get zr-local-pls "opds")) :server)
#+begin_src lua :mkdirp t :tangle (zr-org-by-tangle-dir "opds.lua")
local out =
  {
    ["downloads"] = {},
    ["pending_syncs"] = {},
    ["servers"] = {},
    ["settings"] = {},
  }

for i, v in ipairs(zr_opds) do
  out.servers[i] = {
    title    = v[1],
    username = v[2],
    password = v[3],
    url      = v[4],
  }
end
return out
#+end_src

*** perception_expander
:PROPERTIES:
:CUSTOM_ID: 584878ee-97f7-48f3-a508-691b60a1fa63
:END:
#+begin_src lua :tangle (zr-org-by-tangle-dir "perception_expander.lua") :mkdirp t
return {
  ["is_enabled"] = true,
}
#+end_src

*** profiles
:PROPERTIES:
:CUSTOM_ID: 8c013e7d-a376-4b5b-b06c-f169b514fb1e
:END:
#+begin_src lua :tangle (zr-org-by-tangle-dir "profiles.lua") :mkdirp t
return {
  ["alt status bar"] =
   {
     ["settings"] =
      {
        ["name"] = "alt status bar",
        ["order"] =
         {
           [1] = "status_line",
         },
      },
     ["status_line"] = 0,
   },
}
#+end_src


* style
:PROPERTIES:
:tangle-dir: (if (eq 'android system-type) "/storage/emulated/0/koreader/styletweaks" zr-org-tangle-default-dir)
:END:

** no-image
:PROPERTIES:
:CUSTOM_ID: f064a0e2-42de-425a-8aca-82dbeb7dcad4
:END:
#+begin_src css :tangle (zr-org-by-tangle-dir "no-image.css")
img, svg {
  display: none;
}
#+end_src

* patches
:PROPERTIES:
:tangle-dir: (if (eq 'android system-type) "/storage/emulated/0/koreader/patches" zr-org-tangle-default-dir)
:CUSTOM_ID: 0fc9e81f-6433-4e73-b443-f545f4e4c87e
:END:

** hide-cutout
:PROPERTIES:
:CUSTOM_ID: 13adabbe-183c-4fac-9a20-e8dcd762a921
:END:
#+header: :prologue "local screen = require('android').screen"
#+header: :var screen.height=(if (eq 'android system-type) (string-to-number (replace-regexp-in-string "^Physical size: [[:digit:]]+x\\([[:digit:]]+\\)\n" "\\1" (zr-android-rish-command-to-string "wm size"))) "dummy")
#+begin_src lua :mkdirp t :tangle (zr-org-by-tangle-dir "10-hide-cutout.lua")
#+end_src

** auth-header
:PROPERTIES:
:CUSTOM_ID: 40e0faad-2d9d-44c2-a846-2e976044e265
:END:
#+begin_src lua :tangle (zr-org-by-tangle-dir "1-auth-header.lua")
-- 统一patch http.request，将user/password参数转换为Authorization头
-- 解决与HTTP代理服务器的兼容性问题

local logger = require("logger")
local mime = require("mime")
local http = require("socket.http")

logger.info("Applying unified HTTP Authorization header patch")

-- 备份原始的http.request函数
local orig_http_request = http.request

-- 检查是否启用了HTTP代理
local function isHTTPProxyEnabled()
  return G_reader_settings:readSetting("http_proxy_enabled") and
    G_reader_settings:readSetting("http_proxy")
end

-- 重写http.request函数
http.request = function(request_or_url, body)
  if not isHTTPProxyEnabled() then
    return orig_http_request(request_or_url)
  end

  local request

  -- 处理两种调用方式：http.request(url) 和 http.request(request_table)
  if type(request_or_url) == "string" then
    request = { url = request_or_url }
    if body then
      request.source = ltn12.source.string(body)
    end
  else
    request = request_or_url
  end

  -- 如果存在user和password参数，转换为Authorization头
  if request.user and request.password then
    request.headers = request.headers or {}
    request.headers["Authorization"] = "Basic " .. mime.b64(request.user .. ":" .. request.password)

    -- 移除user和password参数，避免重复认证
    request.user = nil
    request.password = nil

    logger.dbg("HTTP request: converted user/password to Authorization header")
  end

  -- 调用原始的http.request函数
  return orig_http_request(request)
end

logger.info("Unified HTTP Authorization header patch applied successfully")
#+end_src

** utils
:PROPERTIES:
:CUSTOM_ID: a0ab750b-b797-4535-a6f9-39f856b6a9f6
:END:
#+begin_src lua :tangle (zr-org-by-tangle-dir "2-utils.lua")
local android = require('android')
local ffi = require("ffi")
local C = ffi.C
local DataStorage = require("datastorage")

C.setenv("RISH_APPLICATION_ID", 'org.koreader.launcher', 1)

local function shell_quote_argument(arg)
  return "'" .. arg:gsub("'", "'\"'\"'") .. "'"
end

local function rish(command, mode)
  local shell = 'app_process -Djava.class.path="plugins/terminal.koplugin/rish_shizuku.dex" /system/bin --nice-name=rish rikka.shizuku.shell.ShizukuShellLoader'
  local output
  local handle
  local one_shot

  if mode == 'f' then
    one_shot = shell .. ' ' .. shell_quote_argument(command)
    mode = 'r'
  else
    one_shot = shell .. ' -c ' .. shell_quote_argument(command)
  end

  if mode == 'e' then
    output = os.execute(one_shot)
  elseif mode == 'r' then
    handle = io.popen(one_shot, 'r')
    output = handle:read('*a')
    handle:close()
  else
    handle = io.popen(shell, 'w')
    handle:write(command)
    handle:close()
  end
  return output
end

local function cur_wifi_name()
  return rish('dumpsys wifi | grep "^current SSID" | cut -d\\" -f2', 'r')
end

local function record_log(s)
  local command = string.format('echo %s > %s/tmp.log', shell_quote_argument(s), DataStorage:getDataDir())
  os.execute(command)
end
#+end_src

* terminal
:PROPERTIES:
:tangle-dir: (if (eq 'android system-type) "/storage/emulated/0/koreader/scripts" zr-org-tangle-default-dir)
:CUSTOM_ID: d813743c-d2d6-49dc-8655-b17dd74b20ac
:END:
#+begin_src sh :tangle (zr-org-by-tangle-dir "profile.user")
export RISH_APPLICATION_ID="org.koreader.launcher"
export PRIVATE_BIN_DIR="$TERMINAL_HOME/plugins/terminal.koplugin"

function setup_dex() {
  SCRIPT_DIR="$TERMINAL_DATA/scripts"

  for file in "$SCRIPT_DIR"/*.dex; do
    filename=$(basename "$file")
    mv -f "$file" "$PRIVATE_BIN_DIR/"
    chmod 400 "$PRIVATE_BIN_DIR/$filename"
  done
}

setup_dex

function rish() {
  /system/bin/app_process -Djava.class.path="$PRIVATE_BIN_DIR/rish_shizuku.dex" /system/bin --nice-name=rish rikka.shizuku.shell.ShizukuShellLoader "$@"
}
#+end_src

# Local Variables:
# org-babel-tangle-use-relative-file-links: nil
# End:
