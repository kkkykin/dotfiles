#+title:      powershell
#+date:       [2025-07-16 Wed 09:57]
#+filetags:   :windows:
#+identifier: 20250716T095705
* tangle
#+begin_src elisp
(let ((coding-system-for-write locale-coding-system))
  (org-babel-tangle))

(let* ((target (zr-org-by-tangle-dir "profile.ps1"))
       (link (car (process-lines "powershell" "-NonInteractive"
                                 "-NoProfile" "-Command" "$profile")))
       (link-dir (file-name-directory link)))
  (mkdir link-dir t)
  (make-symbolic-link target link t))
#+end_src
* profile
:PROPERTIES:
:header-args:powershell: :tangle (zr-org-by-tangle-dir "profile.ps1") :mkdirp t
:END:

** completions
:PROPERTIES:
:CUSTOM_ID: 6b76990e-a7ee-48ba-838e-26427f99329e
:END:
#+begin_src powershell
$completionSources = @(
    @{
        Name      = "sq"
        GetScript = { sq completion powershell | Out-String }
    },
    @{
        Name    = "rclone"
        GetScript = { rclone completion powershell | Out-String }
    }
)

foreach ($source in $completionSources) {
    if ($source.ContainsKey("GetScript")) {
        # 动态生成补全
        if (Get-Command $source.Name -ErrorAction SilentlyContinue) {
            try {
                Invoke-Expression (& $source.GetScript)
                # Write-Host "✅ 已加载 $($source.Name) 的自动补全" -ForegroundColor Green
            } catch {
                Write-Warning "⚠️ 加载 $($source.Name) 动态补全失败: $_"
            }
        }
    } elseif ($source.ContainsKey("FilePath")) {
        # 从文件加载补全
        if (Test-Path $source.FilePath) {
            try {
                Get-Content $source.FilePath | Invoke-Expression
                # Write-Host "✅ 已加载 $($source.Name) 的自动补全（来自文件）" -ForegroundColor Green
            } catch {
                Write-Warning "⚠️ 加载 $($source.Name) 文件补全失败: $_"
            }
        }
    }
}
#+end_src

** osc133
:PROPERTIES:
:CUSTOM_ID: ae2cda01-d8c7-45fb-818b-08decd19d708
:END:
https://learn.microsoft.com/en-us/windows/terminal/tutorials/shell-integration#powershell-pwshexe

#+begin_src powershell
$Global:__LastHistoryId = -1

function Global:__Terminal-Get-LastExitCode {
  if ($? -eq $True) {
    return 0
  }
  $LastHistoryEntry = $(Get-History -Count 1)
  $IsPowerShellError = $Error[0].InvocationInfo.HistoryId -eq $LastHistoryEntry.Id
  if ($IsPowerShellError) {
    return -1
  }
  return $LastExitCode
}

function prompt {

# First, emit a mark for the _end_ of the previous command.

$gle = $(__Terminal-Get-LastExitCode);
  $LastHistoryEntry = $(Get-History -Count 1)
  # Skip finishing the command if the first command has not yet started
  if ($Global:__LastHistoryId -ne -1) {
    if ($LastHistoryEntry.Id -eq $Global:__LastHistoryId) {
      # Don't provide a command line or exit code if there was no history entry (eg. ctrl+c, enter on no command)
      $out += "$([char]27)]133;D`a"
    } else {
      $out += "$([char]27)]133;D;$gle`a"
    }
  }

$loc = $($executionContext.SessionState.Path.CurrentLocation);

# Prompt started
  $out += "$([char]27)]133;A$([char]07)";

# CWD
  $out += "$([char]27)]9;9;`"$loc`"$([char]07)";
  $out += "$([char]27)]1337;CurrentDir=$loc$([char]07)";

# (your prompt here)
  $out += "PS $loc$('>' * ($nestedPromptLevel + 1)) ";

# Prompt ended, Command started
  $out += "$([char]27)]133;B$([char]07)";

$Global:__LastHistoryId = $LastHistoryEntry.Id

return $out
}
#+end_src

** modules
:PROPERTIES:
:CUSTOM_ID: bf71f630-7414-4295-8c19-254e287f6dbd
:END:
#+begin_src powershell
if (Get-Module -Name PSReadLine -ErrorAction SilentlyContinue) {
    Set-PSReadLineOption -EditMode Emacs
}
#+end_src

** alias
:PROPERTIES:
:CUSTOM_ID: 821fe690-2234-4a99-a5f8-a3442da4eb97
:END:
#+begin_src powershell
@('cat'
  , 'cp'
  , 'curl'
  # , 'diff'
  , 'ls'
  , 'mv'
  , 'pwd'
  , 'rm'
  # , 'tee'
  , 'wget'
 ) | ForEach-Object {
  if (Test-Path "Alias:$_") {
    Remove-Item "Alias:$_"
  }
}
#+end_src
