#+title:      cloudflarest
#+date:       [2025-07-06 Sun 09:46]
#+filetags:   :network:
#+identifier: 20250706T094656

* tangle
#+begin_src elisp :var force-download="no" curl-args='("-xsocks5h://127.0.0.1:10808")
(when (string= "yes" force-download)
  (let* ((bin-dir "_tangle")
         (name (pcase system-type
                 ('android "cfst_linux_arm64.tar.gz")
                 ('gnu/linux "cfst_linux_amd64.tar.gz")))
         (url (concat "https://github.com/XIU2/CloudflareSpeedTest/releases/latest/download/" name)))
    (call-process
     "bash" nil 0 nil "-c"
     (format "curl -sSL %s %s | tar -xzf - -C %s cfst"
             (mapconcat #'shell-quote-argument curl-args " ")
             (shell-quote-argument url)
             (shell-quote-argument bin-dir)))))

(org-babel-tangle)
#+end_src

* scripts
:PROPERTIES:
:header-args:python: :eval no :shebang (concat "#!" (executable-find "python")) :mkdirp t
:END:

** find best ip
:PROPERTIES:
:CUSTOM_ID: 62851ddf-0b0c-4cd4-8f67-25fdf3f80abe
:END:
#+begin_src python :tangle (zr-org-by-tangle-dir "find_best_ip.py")
import csv
import os
import shutil
from pathlib import Path
import argparse
import subprocess
import sys
from datetime import datetime

def find_cloudflarest(name: str) -> str:
  """
  1. 如果 name 是绝对路径，直接返回；
  2. 先去脚本所在目录找；
  3. 再去系统 PATH 找；
  4. 都找不到就抛 FileNotFoundError。
  """
  if os.path.isabs(name):
    return name

  script_dir = Path(__file__).resolve().parent
  # 1) 脚本目录
  local_exe = script_dir / name
  if local_exe.is_file() and os.access(local_exe, os.X_OK):
    return str(local_exe)

  # 2) 系统 PATH
  system_path = shutil.which(name)
  if system_path is not None:
    return system_path

  raise FileNotFoundError(f'未找到可执行文件: {name}')

def find_best_ip(csv_dict):
  """找到最好的 ip"""
  for row in csv_dict:
    if float(row['下载速度(MB/s)']) > 30 and row['已发送'] == row['已接收']:
      return row['IP 地址']
  return None

def run_cloudflarest(cloudflarest_path, tll, results_dir, url, ip_file):
  """运行cloudflarest测试"""
  cfst_path = find_cloudflarest(cloudflarest_path)
  timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
  result_path = os.path.join(results_dir, f"{timestamp}.csv")
  os.makedirs(results_dir, exist_ok=True)
  
  subprocess.run([cfst_path, '-tll', str(tll), '-f', ip_file,
                  '-url', url, '-o', result_path, '-p', '0'],
                 stdout=subprocess.DEVNULL,
                 stderr=subprocess.DEVNULL)
  
  with open(result_path, 'r', encoding='utf-8') as csvfile:
    csv_reader = csv.DictReader(csvfile)
    return find_best_ip(csv_reader)

def main():
  parser = argparse.ArgumentParser(description='查找最佳Cloudflare IP')
  parser.add_argument('--cloudflarest', default='cfst', 
                      help='cloudflarest可执行文件路径 (默认: cloudflarest)')
  parser.add_argument('--tll', type=int, default=150,
                      help='测试延迟限制 (默认: 150)')
  parser.add_argument('--results-dir', default="results",
                      help='测试结果存储目录 (默认: results)')
  parser.add_argument('--url', required=True,
                      help='测试使用的URL')
  parser.add_argument('--ip-file', required=True,
                      help='IP列表文件路径')
  
  args = parser.parse_args()
  
  best_ip = run_cloudflarest(
    args.cloudflarest, args.tll, args.results_dir, args.url, args.ip_file
  )
  
  if best_ip:
    print(best_ip)
  else:
    print("未找到符合条件的IP")
    sys.exit(1)

if __name__ == "__main__":
  main()
#+end_src

** modify json field
:PROPERTIES:
:CUSTOM_ID: d1b33679-0404-42cd-b3e1-499a14b2864a
:END:
#+begin_src python :tangle (zr-org-by-tangle-dir "modify_json_field.py")
import json
import os
import shutil
from datetime import datetime
import argparse

def get_nested_field(data, path):
  """根据路径获取嵌套字段的值（如 'user.profile.age'）"""
  keys = path.replace('[', '.').replace(']', '').split('.')
  for key in keys:
    if isinstance(data, dict) and key in data:
      data = data[key]
    elif isinstance(data, list) and key.isdigit() and int(key) < len(data):
      data = data[int(key)]
    else:
      raise KeyError(f"路径 '{path}' 中 '{key}' 不存在")
  return data

def set_nested_field(data, path, value):
  """设置嵌套字段的值"""
  keys = path.replace('[', '.').replace(']', '').split('.')
  for key in keys[:-1]:
    if isinstance(data, dict) and key in data:
      data = data[key]
    elif isinstance(data, list) and key.isdigit() and int(key) < len(data):
      data = data[int(key)]
    else:
      raise KeyError(f"路径 '{path}' 中 '{key}' 不存在")
  
  final_key = keys[-1]
  if isinstance(data, dict) and final_key in data:
    data[final_key] = value
  elif isinstance(data, list) and final_key.isdigit() and int(final_key) < len(data):
    data[int(final_key)] = value
  else:
    raise KeyError(f"路径 '{path}' 中 '{final_key}' 不存在")

def modify_json_field_with_backup(file_path, field_path, new_value):
  # 1. 检查文件是否存在
  if not os.path.exists(file_path):
    print(f"错误: 文件 '{file_path}' 不存在！")
    return

  # 2. 创建备份目录
  timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
  backup_dir = os.path.join(os.path.dirname(file_path), "backups")
  os.makedirs(backup_dir, exist_ok=True)

  # 3. 备份文件（带时间戳）
  backup_file = os.path.join(backup_dir, f"{os.path.basename(file_path)}.bak_{timestamp}")
  shutil.copy2(file_path, backup_file)

  # 4. 读取并修改字段
  try:
    with open(file_path, 'r', encoding='utf-8') as f:
      data = json.load(f)

    # 检查字段是否存在（避免创建新字段）
    get_nested_field(data, field_path)  # 如果字段不存在会抛出 KeyError
    set_nested_field(data, field_path, new_value)

    # 写回文件
    with open(file_path, 'w', encoding='utf-8') as f:
      json.dump(data, f, indent=2, ensure_ascii=False)

  except KeyError as e:
    print(f"错误: {e}，未修改文件")
  except Exception as e:
    print(f"操作失败: {e}")

def main():
  parser = argparse.ArgumentParser(description='修改JSON文件中的指定字段')
  parser.add_argument('--json-file', required=True,
                      help='要修改的JSON文件路径')
  parser.add_argument('--json-expr', required=True,
                      help='JSON字段路径表达式 (如: user.profile.age)')
  parser.add_argument('--new-value', required=True,
                      help='要设置的新值')
  
  args = parser.parse_args()
  
  modify_json_field_with_backup(args.json_file, args.json_expr, args.new_value)

if __name__ == "__main__":
  main()
#+end_src


** trojan-go
:PROPERTIES:
:CUSTOM_ID: 829dd96c-1f86-400f-821d-836657796bd1
:END:
#+header: :var arg_ips=(expand-file-name (format "_tangle/ips/better%s-cf" (if (zr-net-has-public-ipv6-addr-p) "-v6" "")))
#+header: :var arg_url="https://cf-speedtest-v2.acfun.win/300mb.test"
#+header: :var arg_tll=150
#+header: :var results_dir=(expand-file-name "_results")
#+header: :var json_expr="remote_addr"
#+header: :var json_path=(expand-file-name "../trojan-go/_tangle/config.json")
#+header: :var cfst=(or (executable-find "cfst") (expand-file-name "_tangle/CloudflareST"))
#+begin_src python :tangle (zr-org-by-tangle-dir "trojan_go.py")
from find_best_ip import find_best_ip, run_cloudflarest
from modify_json_field import modify_json_field_with_backup
import sys

best_ip = run_cloudflarest(
  cloudflarest_path=cfst,
  tll=arg_tll,
  results_dir=results_dir,
  url=arg_url,
  ip_file=arg_ips
)

if best_ip:
  print(f"{best_ip}")
  modify_json_field_with_backup(
    file_path=json_path,
    field_path=json_expr,
    new_value=best_ip
  )
else:
  print("未找到合适IP")
  sys.exit(1)
#+end_src

** cdn_speedtest
:PROPERTIES:
:CUSTOM_ID: 9db34ae4-3c62-46c0-933f-d490a26bb020
:END:
#+header: :var ip_dir=(zr-org-by-tangle-dir "ips")
#+header: :var cdn_url_map=cdn_url_map[]
#+header: :var result_dir=(expand-file-name "_results/")
#+begin_src python :tangle (zr-org-by-tangle-dir "cdn_speedtest.py")
from find_best_ip import find_best_ip, run_cloudflarest
import os
import argparse
import sys

def cdn_speed_test(cdn, type, opt):
  """cdn ip 测速"""
  ip_base_file_name = f"{cdn}-{type}"
  ip_file_name = f"{ip_base_file_name}-better" if opt else ip_base_file_name
  
  cdn_dict = dict(cdn_url_map)
  url = cdn_dict.get(cdn, None)
  if url is not None:
    best_ip = run_cloudflarest(
      'cfst'
      , 150
      , os.path.join(result_dir, ip_base_file_name)
      , url
      , os.path.join(ip_dir, ip_file_name)
    )
  
  if best_ip:
    print(best_ip)
  else:
    print("未找到符合条件的IP")
    sys.exit(1)

def main():
  parser = argparse.ArgumentParser(description='查找最佳 IP')

  group = parser.add_mutually_exclusive_group(required=True)
  group.add_argument('-4', '--ipv4', action='store_true', help='仅使用 IPv4')
  group.add_argument('-6', '--ipv6', action='store_true', help='仅使用 IPv6')

  parser.add_argument('--cdn', required=True, choices=['aws', 'cf'],
                      help='aws/cf')
  parser.add_argument('--opt', action='store_true',
                      help='启用优化模式')

  args = parser.parse_args()
  ip_version = 4 if args.ipv4 else 6

  cdn_speed_test(args.cdn, ip_version, args.opt)

if __name__ == "__main__":
  main()
#+end_src

* cidr
:PROPERTIES:
:tangle-dir: _tangle/ips
:header-args:org: :comments no
:END:

** cloudflare
:PROPERTIES:
:CUSTOM_ID: 7f65aa67-4c20-4d77-9f31-3d11c0b6e54a
:END:
#+begin_src org :tangle (zr-org-by-tangle-dir "cf-4-better") :mkdirp t
162.158.0.0/15
104.16.0.0/12
#+end_src

#+begin_src org :tangle (zr-org-by-tangle-dir "cf-6-better")
2606:4700:d::/48
2606:4700:e::/48
2606:4700:f4::/48
#+end_src

#+begin_src org :tangle (zr-org-by-tangle-dir "cf-4")
173.245.48.0/20
103.21.244.0/22
103.22.200.0/22
103.31.4.0/22
141.101.64.0/18
108.162.192.0/18
190.93.240.0/20
188.114.96.0/20
197.234.240.0/22
198.41.128.0/17
162.158.0.0/15
104.16.0.0/12
172.64.0.0/17
172.64.128.0/18
172.64.192.0/19
172.64.224.0/22
172.64.229.0/24
172.64.230.0/23
172.64.232.0/21
172.64.240.0/21
172.64.248.0/21
172.65.0.0/16
172.66.0.0/16
172.67.0.0/16
131.0.72.0/22
#+end_src

#+begin_src org :tangle (zr-org-by-tangle-dir "cf-6")
2400:cb00:2049::/48
2400:cb00:f00e::/48
2606:4700::/32
2606:4700:10::/48
2606:4700:130::/48
2606:4700:3000::/48
2606:4700:3001::/48
2606:4700:3002::/48
2606:4700:3003::/48
2606:4700:3004::/48
2606:4700:3005::/48
2606:4700:3006::/48
2606:4700:3007::/48
2606:4700:3008::/48
2606:4700:3009::/48
2606:4700:3010::/48
2606:4700:3011::/48
2606:4700:3012::/48
2606:4700:3013::/48
2606:4700:3014::/48
2606:4700:3015::/48
2606:4700:3016::/48
2606:4700:3017::/48
2606:4700:3018::/48
2606:4700:3019::/48
2606:4700:3020::/48
2606:4700:3021::/48
2606:4700:3022::/48
2606:4700:3023::/48
2606:4700:3024::/48
2606:4700:3025::/48
2606:4700:3026::/48
2606:4700:3027::/48
2606:4700:3028::/48
2606:4700:3029::/48
2606:4700:3030::/48
2606:4700:3031::/48
2606:4700:3032::/48
2606:4700:3033::/48
2606:4700:3034::/48
2606:4700:3035::/48
2606:4700:3036::/48
2606:4700:3037::/48
2606:4700:3038::/48
2606:4700:3039::/48
2606:4700:a0::/48
2606:4700:a1::/48
2606:4700:a8::/48
2606:4700:a9::/48
2606:4700:a::/48
2606:4700:b::/48
2606:4700:c::/48
2606:4700:d0::/48
2606:4700:d1::/48
2606:4700:d::/48
2606:4700:e0::/48
2606:4700:e1::/48
2606:4700:e2::/48
2606:4700:e3::/48
2606:4700:e4::/48
2606:4700:e5::/48
2606:4700:e6::/48
2606:4700:e7::/48
2606:4700:e::/48
2606:4700:f1::/48
2606:4700:f2::/48
2606:4700:f3::/48
2606:4700:f4::/48
2606:4700:f5::/48
2606:4700:f::/48
2803:f800:50::/48
2803:f800:51::/48
2a06:98c1:3100::/48
2a06:98c1:3101::/48
2a06:98c1:3102::/48
2a06:98c1:3103::/48
2a06:98c1:3104::/48
2a06:98c1:3105::/48
2a06:98c1:3106::/48
2a06:98c1:3107::/48
2a06:98c1:3108::/48
2a06:98c1:3109::/48
2a06:98c1:310a::/48
2a06:98c1:310b::/48
2a06:98c1:310c::/48
2a06:98c1:310d::/48
2a06:98c1:310e::/48
2a06:98c1:310f::/48
2a06:98c1:3120::/48
2a06:98c1:3121::/48
2a06:98c1:3122::/48
2a06:98c1:3123::/48
2a06:98c1:3200::/48
2a06:98c1:50::/48
2a06:98c1:51::/48
2a06:98c1:54::/48
2a06:98c1:58::/48
#+end_src

** cloudfront
#+begin_src elisp
(with-temp-buffer
  (url-insert-file-contents-literally "https://ip-ranges.amazonaws.com/ip-ranges.json")
  (let* ((json (json-parse-buffer))
         (prefixes (gethash "prefixes" json))
         (ipv6_prefixes (gethash "ipv6_prefixes" json))
         (ips-dir (zr-org-by-tangle-dir "ips/"))
         v4-prefixes v6-prefixes)
    (mapc
     (lambda (prefix)
       (when (and (string= "CLOUDFRONT" (gethash "service" prefix))
                  (not (string-prefix-p "cn-" (gethash "region" prefix))))
         (if-let* ((v4-prefix (gethash "ip_prefix" prefix)))
             (push v4-prefix v4-prefixes)
           (push (gethash "ipv6_prefix" prefix) v6-prefixes))))
     (vconcat prefixes ipv6_prefixes))
    (write-region (string-join v4-prefixes "\n") nil (expand-file-name "aws-4" ips-dir))
    (write-region (string-join v6-prefixes "\n") nil (expand-file-name "aws-6" ips-dir))))
#+end_src

* test-url
#+name: cdn_url_map
| cdn | url                                                                                                                         |
|-----+-----------------------------------------------------------------------------------------------------------------------------|
| cf  | https://cf-speedtest-v2.acfun.win/300mb.test                                                                                |
| aws | https://images-assets.nasa.gov/video/GSFC_20100722_Hubble_m10619_Exoplanets/GSFC_20100722_Hubble_m10619_Exoplanets~orig.mp4 |
