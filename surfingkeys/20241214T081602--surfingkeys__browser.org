#+title:      surfingkeys
#+date:       [2024-12-14 Sat 08:16]
#+filetags:   :browser:
#+identifier: 20241214T081602
#+property: header-args:js :eval no

* tangle
#+begin_src elisp
(org-decrypt-entries)
(make-directory "_tangle" t)
(let (org-babel-pre-tangle-hook)
  (org-babel-tangle nil "_tangle/default.js" "^js$"))
(save-buffer)
#+end_src

* source
** apis
https://github.com/brookhong/Surfingkeys/blob/master/src/content_scripts/common/api.js
https://github.com/brookhong/Surfingkeys/blob/master/src/content_scripts/common/default.js
#+begin_src js
const {
  mapkey,
  Hints,
  Front,
} = api;
#+end_src

** internal
#+begin_src js :var authKey=(auth-source-pick-first-password :host "mpv.nginx.localhost")
async function callInternal(app, headers){
  try {
    const res = await fetch('http://127.0.0.1/lua/' + app, {
      method: 'POST',
      headers: {
        ...headers,
        authorization: authKey
      }
    });
    if (!res.ok) {
      throw new Error(`Response status: ${res.status}`)
    }
    Front.showBanner(await res.text());
  } catch(e) {
    console.error(e);
  }
}
#+end_src

*** mpv

#+begin_src js
function callMpv(url, args){
  const you = /^https:\/\/www.youtube.com\/@[^/]+$/
  if (you.test(url)) {
    url += '/videos'
  }
  callInternal('mpv', {
    url,
    args: (args === undefined) ? '' : args
  })
}
#+end_src

#+begin_src js
const mpvPipArg = '--profile=mini'
#+end_src

#+begin_src js
mapkey(',f', 'Open link with mpv', () => {
  Hints.create('*[href]', function(el) {
    callMpv(el.href)
  });
});
#+end_src

#+begin_src js
mapkey(',m', 'Play with mpv', () => {
  callMpv(window.location.href)
});
#+end_src

#+begin_src js
mapkey(',F', 'Open link with mpv(pip)', () => {
  Hints.create('*[href]', function(el) {
    callMpv(el.href, mpvPipArg)
  });
});
#+end_src

#+begin_src js
mapkey(',M', 'Play with mpv(pip)', () => {
  callMpv(window.location.href, mpvPipArg)
});
#+end_src

** inline query
https://github.com/brookhong/Surfingkeys/wiki/Register-inline-query

#+begin_src js
const chinesePattern = /[\u4e00-\u9fa5]/;
const japanesePattern = /[\u3040-\u30ff]/;
function getLanguageCode(str) {
  let code = 'eng';
  if (chinesePattern.test(str))
    code = 'zh';
  else if (japanesePattern.test(str))
    code = 'ja';
  return code;
}
#+end_src

#+begin_src js
Front.registerInlineQuery({
    url: function(q) {
        return `http://dict.youdao.com/w/${getLanguageCode(q)}/${q}/#keyfrom=dict2.index`;
    },
    parseResult: function(res) {
        var parser = new DOMParser();
        var doc = parser.parseFromString(res.text, "text/html");
        var collinsResult = doc.querySelector("#collinsResult");
        var authTransToggle = doc.querySelector("#authTransToggle");
        var examplesToggle = doc.querySelector("#examplesToggle");
        if (collinsResult) {
            collinsResult.querySelectorAll("div>span.collinsOrder").forEach(function(span) {
                span.nextElementSibling.prepend(span);
            });
            collinsResult.querySelectorAll("div.examples").forEach(function(div) {
                div.innerHTML = div.innerHTML.replace(/<p/gi, "<span").replace(/<\/p>/gi, "</span>");
            });
            var exp = collinsResult.innerHTML;
            return exp;
        } else if (authTransToggle) {
            authTransToggle.querySelector("div.via.ar").remove();
            return authTransToggle.innerHTML;
        } else if (examplesToggle) {
            return examplesToggle.innerHTML;
        }
    }
});
#+end_src

#+begin_src javascript
Front.registerInlineQuery({
    url: function(q) {
        return `https://jisho.org/search/${q}`;
    },
    parseResult: function(res) {
        var parser = new DOMParser();
        var doc = parser.parseFromString(res.text, "text/html");
        var result = doc.querySelector("#primary>div.exact_block");
        if (result) {
            result.querySelectorAll('div>span.furigana').forEach(function(e){
                br = document.createElement("br");
                e.appendChild(br);
            });
            result.querySelectorAll('h4').forEach(function(e){
                e.remove();
            });
            result.querySelectorAll('div>div.concept_light-status').forEach(function(e){
                e.remove();
            });
            result.querySelectorAll('div>a.light-details_link').forEach(function(e){
                e.remove();
            });
            result.querySelectorAll('div>span.meaning-abstract').forEach(function(e){
                e.remove();
            });
            result.querySelectorAll('div>span.supplemental_info').forEach(function(e){
                e.outerHTML = "&nbsp;" + e.outerHTML;
            });
            var exp = result.innerHTML;
            return exp;
        }    }
});
#+end_src

* local variables
# Local Variables:
# buffer-auto-save-file-name: nil
# End:
