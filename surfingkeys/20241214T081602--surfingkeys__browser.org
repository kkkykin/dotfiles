#+title:      surfingkeys
#+date:       [2024-12-14 Sat 08:16]
#+filetags:   :browser:
#+identifier: 20241214T081602
#+property: header-args:js :eval no
#+property: header-args:elisp :var js-blk-tempo="#+begin_src js\n%s\n#+end_src" map-tempo="mapkey('%s','%s',()=>{%s});" hint-create-tempo="Hints.create('*[href]',el=>{%s})"

* tangle
#+begin_src elisp
(org-decrypt-entries)
(let (org-babel-pre-tangle-hook
      org-confirm-babel-evaluate
      (dir "_tangle"))
  (make-directory dir t)  
  (dolist (b '("expand-mpv-binding"))
    (my/org-babel-execute-named-src-block
     b '((:results . "raw replace value"))))
  (org-babel-tangle nil (expand-file-name "default.js" dir) "^js$")
  (org-babel-tangle))
(org-babel-remove-result-one-or-many '(4))
(save-buffer)
#+end_src

* source
** apis
https://github.com/brookhong/Surfingkeys/blob/master/docs/API.md
https://github.com/brookhong/Surfingkeys/blob/master/src/content_scripts/common/api.js
https://github.com/brookhong/Surfingkeys/blob/master/src/content_scripts/common/default.js
https://github.com/brookhong/Surfingkeys/blob/master/src/background/start.js
#+begin_src js
const {
  RUNTIME,
  addSearchAlias,
  getBrowserName,
  mapkey,
  Hints,
  Front,
} = api;
#+end_src
** utils
#+begin_src js
function extractDomainFromHost(hostname) {
  try {
    if (hostname.startsWith('[') && hostname.endsWith(']')) {
      // IPv6
      return hostname;
    } else if (/^(\d{1,3}\.){3}\d{1,3}$/.test(hostname)) {
      // IPv4
      return hostname;
    }
    
    // Domain
    const parts = hostname.split('.');
    if (parts.length <= 2) {
      return hostname;
    }
    return parts.slice(-2).join('.');
  } catch (error) {
    return '';
  }
}
#+end_src

#+begin_src js
function extractDomainFromUrl(url) {
  try {
    const urlObj = new URL(url);
    const hostname = urlObj.hostname;
    return extractDomainFromHost(hostname);
  } catch (error) {
    return '';
  }
}
#+end_src

#+begin_src js
function callEmacs(fn, args){
  const orgProtocolURL = `org-protocol://${fn}?${new URLSearchParams(args)}`;
  const link = document.createElement('a');
  link.href = orgProtocolURL;
  link.click();
  link.remove();
}
#+end_src

** internal
#+begin_src js :var myLocalAuthKey=(auth-source-pick-first-password :host "mpv.nginx.localhost")
async function callInternal(app, headers){
  try {
    const res = await fetch('http://127.0.0.1/lua/' + app, {
      method: 'POST',
      headers: {
        ...headers,
        authorization: myLocalAuthKey
      }
    });
    if (!res.ok) {
      throw new Error(`Response status: ${res.status}`)
    }
    Front.showBanner(await res.text());
  } catch(e) {
    console.error(e);
  }
}
#+end_src

*** mpv

#+begin_src js
function callMpv(url, args){
  const you = /^https:\/\/www.youtube.com\/@[^/]+$/
  if (you.test(url)) {
    url += '/videos'
  }
  callInternal('mpv', {
    url,
    args: (args === undefined) ? '' : args
  })
}
#+end_src

**** binding
#+name: mpv-key-binding
| key | info  | arg                |
|-----+-------+--------------------|
| m   |       |                    |
| p   | pip   | --profile=mini     |
| h   | left  | --video-rotate=270 |
| l   | right | --video-rotate=90  |

#+name: expand-mpv-binding
#+begin_src elisp :results raw replace value :var map=mpv-key-binding[]
(format
 js-blk-tempo
 (let* ((call-tempo "callMpv(%s)")
        (mpv-map-tempo (format map-tempo ",m%s" "%s" "%s"))
        (hint-tempo (format hint-create-tempo call-tempo)))
   (mapconcat
    (lambda (k)
      (format
       "%s\n%s"
       (format (format mpv-map-tempo (car k) (format "Play with mpv(%s)" (cadr k)) (format call-tempo (format "window.location.href, '%s'" (caddr k)))))
       (format (format mpv-map-tempo (upcase (car k)) (format "Open link with mpv(%s)" (cadr k)) (format hint-tempo (format "el.href, '%s'" (caddr k)))))))
    map "\n")))
#+end_src

** inline query
https://github.com/brookhong/Surfingkeys/wiki/Register-inline-query

#+begin_src js
const chinesePattern = /[\u4e00-\u9fa5]/;
const japanesePattern = /[\u3040-\u30ff]/;
function getLanguageCode(str) {
  let code = 'eng';
  if (chinesePattern.test(str))
    code = 'zh';
  else if (japanesePattern.test(str))
    code = 'ja';
  return code;
}
#+end_src

#+begin_src js
Front.registerInlineQuery({
    url: function(q) {
        return `http://dict.youdao.com/w/${getLanguageCode(q)}/${q}/#keyfrom=dict2.index`;
    },
    parseResult: function(res) {
        var parser = new DOMParser();
        var doc = parser.parseFromString(res.text, "text/html");
        var collinsResult = doc.querySelector("#collinsResult");
        var authTransToggle = doc.querySelector("#authTransToggle");
        var examplesToggle = doc.querySelector("#examplesToggle");
        if (collinsResult) {
            collinsResult.querySelectorAll("div>span.collinsOrder").forEach(function(span) {
                span.nextElementSibling.prepend(span);
            });
            collinsResult.querySelectorAll("div.examples").forEach(function(div) {
                div.innerHTML = div.innerHTML.replace(/<p/gi, "<span").replace(/<\/p>/gi, "</span>");
            });
            var exp = collinsResult.innerHTML;
            return exp;
        } else if (authTransToggle) {
            authTransToggle.querySelector("div.via.ar").remove();
            return authTransToggle.innerHTML;
        } else if (examplesToggle) {
            return examplesToggle.innerHTML;
        }
    }
});
#+end_src

#+begin_src javascript
Front.registerInlineQuery({
    url: function(q) {
        return `https://jisho.org/search/${q}`;
    },
    parseResult: function(res) {
        var parser = new DOMParser();
        var doc = parser.parseFromString(res.text, "text/html");
        var result = doc.querySelector("#primary>div.exact_block");
        if (result) {
            result.querySelectorAll('div>span.furigana').forEach(function(e){
                br = document.createElement("br");
                e.appendChild(br);
            });
            result.querySelectorAll('h4').forEach(function(e){
                e.remove();
            });
            result.querySelectorAll('div>div.concept_light-status').forEach(function(e){
                e.remove();
            });
            result.querySelectorAll('div>a.light-details_link').forEach(function(e){
                e.remove();
            });
            result.querySelectorAll('div>span.meaning-abstract').forEach(function(e){
                e.remove();
            });
            result.querySelectorAll('div>span.supplemental_info').forEach(function(e){
                e.outerHTML = "&nbsp;" + e.outerHTML;
            });
            var exp = result.innerHTML;
            return exp;
        }    }
});
#+end_src

** search engine
#+name: search-engine-table
| alias | name           | engine                                                                               |
|-------+----------------+--------------------------------------------------------------------------------------|
| a     | EmacsWiki      | https://www.baidu.com/s?wd=site%3Aemacswiki.org%20                                   |
| c     | Swisscows      | https://swisscows.com/en/web?region=iv&query=                                        |
| n     | NixHomeManager | https://mipmip.github.io/home-manager-option-search/?query=                          |
| N     | NixPackages    | https://search.nixos.org/packages?from=0&size=50&sort=relevance&type=packages&query= |
| j     | Mojeek         | https://www.mojeek.com/search?q=                                                     |

#+begin_src js :var mySearchAlias=search-engine-table[]
for (const alias of mySearchAlias) {
  addSearchAlias(alias[0], alias[1], alias[2]);
}
#+end_src

** chrome

#+begin_src js
if (getBrowserName() === 'Chrome') {
#+end_src

*** proxy
https://github.com/brookhong/Surfingkeys/blob/master/src/background/chrome.js

#+begin_src js
function toggleHostProxy(host){
  return new Promise((resolve, reject) => {
    if (host && host.length) {
      RUNTIME('updateProxy', {
        host: host,
        operation: 'toggle'
      }, res => {
        resolve(res);
      });
    } else {
      reject();
    };
  });
}
#+end_src

#+begin_src js
mapkey(';pf', 'toggle proxy for link', () => {
  Hints.create('*[href]', el => {
    toggleHostProxy(extractDomainFromUrl(el.href));
  });
});
#+end_src

#+begin_src js
mapkey(';pl', 'toggle proxy current site', () => {
  toggleHostProxy(extractDomainFromHost(window.location.hostname));
});
#+end_src

**** pac
#+name: json-file-to-js-obj
#+begin_src elisp
(if (file-exists-p file)
    (with-current-buffer (find-file-noselect file)
      (buffer-string))
  "{}")
#+end_src

#+begin_src javascript :tangle "_tangle/pac.js" :noweb-prefix no
var pacGlobal = <<json-file-to-js-obj(file="pac.json.gpg")>>

function matchHost(host, rule_list) {
  for (var i = 0; i < rule_list.length; i++) {
    if (shExpMatch(host, rule_list[i])) {
      return true;
    }
  }
  return false;
}

function FindProxyForHost(host) {
  var lastPos;
  
  if (pacGlobal.proxyMode === 'always') {
    return pacGlobal.proxy[0];
  } 
  
  else if (pacGlobal.proxyMode === 'bypass') {
    do {
      if (matchHost(host, pacGlobal.autoproxy_hosts[0])) {
        return 'DIRECT';
      }
      lastPos = host.indexOf('.') + 1;
      host = host.slice(lastPos);
    } while (lastPos >= 1);
    return pacGlobal.proxy[0];
  } 
  
  else {  // byhost mode
    for (var i = 0; i < pacGlobal.proxy.length; i++) {
      var ahost = host;
      do {
        if (matchHost(ahost, pacGlobal.autoproxy_hosts[i])) {
          return pacGlobal.proxy[i];
        }
        lastPos = ahost.indexOf('.') + 1;
        ahost = ahost.slice(lastPos);
      } while (lastPos >= 1);
    }
    return 'DIRECT';
  }
}

function FindProxyForURL(url, host) {
  try {
    return FindProxyForHost(host);
  } catch (e) {
    return 'DIRECT';  // 出错时直连
  }
}
#+end_src

*** end
#+begin_src js
}
#+end_src

* local variables
# Local Variables:
# buffer-auto-save-file-name: nil
# End:
