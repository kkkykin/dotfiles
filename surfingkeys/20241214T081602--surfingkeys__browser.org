#+title:      surfingkeys
#+date:       [2024-12-14 Sat 08:16]
#+filetags:   :browser:
#+identifier: 20241214T081602
#+property: header-args:js :eval no

* tangle
#+begin_src elisp
(org-decrypt-entries)
(let (org-babel-pre-tangle-hook
      org-confirm-babel-evaluate
      (dir "_tangle"))
  (make-directory dir t)  
  (dolist (b '())
    (zr-org-babel-execute-named-src-block
     b '((:results . "raw replace value"))))
  (org-babel-tangle nil (expand-file-name "default.js" dir) "^js$")
  (org-babel-tangle))
(org-babel-remove-result-one-or-many '(4))
(save-buffer)
#+end_src

* source
** apis
:PROPERTIES:
:CUSTOM_ID: 2e669b54-0206-40f4-a9dc-1bdfab188886
:END:
https://github.com/brookhong/Surfingkeys/blob/master/docs/API.md
https://github.com/brookhong/Surfingkeys/blob/master/src/content_scripts/common/api.js
https://github.com/brookhong/Surfingkeys/blob/master/src/content_scripts/common/default.js
https://github.com/brookhong/Surfingkeys/blob/master/src/background/start.js
#+begin_src js
const {
  RUNTIME,
  addSearchAlias,
  getBrowserName,
  mapkey,
  tabOpenLink,
  unmap,
  Hints,
  Front,
} = api;
#+end_src
*** settings
:PROPERTIES:
:CUSTOM_ID: 26c182f8-317e-4ca3-bc8c-fe5110e04971
:END:
#+begin_src js :var my_gemini_api=(auth-source-pick-first-password :host "gemini.api")
settings.clickablePat = /(https?:\/\/|thunder:\/\/|magnet:)\S+/ig;
settings.interceptedErrors = ["*"];

settings.defaultLLMProvider = "gemini";
settings.llm = {
  gemini: { apiKey: my_gemini_api },
  ollama: { model: 'qwen2.5-coder:32b' }
};
#+end_src
** utils
:PROPERTIES:
:CUSTOM_ID: 7ffe28ab-62a9-4c9e-82cc-5c4a15f9dafd
:END:
#+begin_src js
function extractDomainFromHost(hostname) {
  try {
    if (hostname.startsWith('[') && hostname.endsWith(']')) {
      // IPv6
      return hostname;
    } else if (/^(\d{1,3}\.){3}\d{1,3}$/.test(hostname)) {
      // IPv4
      return hostname;
    }
    
    // Domain
    const parts = hostname.split('.');
    if (parts.length <= 2) {
      return hostname;
    }
    return parts.slice(-2).join('.');
  } catch (error) {
    return '';
  }
}
#+end_src

#+begin_src js
function extractDomainFromUrl(url) {
  try {
    const urlObj = new URL(url);
    const hostname = urlObj.hostname;
    return extractDomainFromHost(hostname);
  } catch (error) {
    return '';
  }
}
#+end_src

#+begin_src js
function callEmacs(fn, args){
  const orgProtocolURL = `org-protocol://${fn}?${new URLSearchParams(args)}`;
  const link = document.createElement('a');
  link.href = orgProtocolURL;
  link.click();
  link.remove();
}
#+end_src
** misc
#+begin_src js :tangle no
mapkey(',o', 'Open detected links from text in new tab', () => {
  Hints.create(settings.clickablePat, el => {
    window.location.assign(element[2]);
  }, {statusLine: "Open detected links from text in new tab"});
});
#+end_src
** internal
:PROPERTIES:
:CUSTOM_ID: 86a568a1-98d2-4357-b9b2-93b0bb510f1b
:END:
#+begin_src js :var myLocalAuthKey=(auth-source-pick-first-password :host "mpv.nginx.localhost")
async function callInternal(app, headers, body){
  let data = {
    method: 'POST',
    headers: {
      ...headers,
      authorization: myLocalAuthKey
    }
  };
  if (body !== undefined) {
    data.body = body;
  }
  try {
    const res = await fetch('http://127.0.0.1/lua/' + app, data);
    if (!res.ok) {
      throw new Error(`Response status: ${res.status}`)
    }
    Front.showBanner(await res.text());
  } catch(e) {
    console.error(e);
  }
}
#+end_src

*** mpv
:PROPERTIES:
:CUSTOM_ID: 66f4ed36-2d7f-453f-a04a-8c1291931ecd
:END:

#+begin_src js
function callMpv(url, args){
  const you = /^https:\/\/www.youtube.com\/@[^/]+$/
  if (you.test(url)) {
    url += '/videos'
  };
  callInternal('mpv', {
    'content-type': 'application/vnd.apple.mpegurl',
    args: (args === undefined) ? '' : args
  }, url);
}
#+end_src

**** binding
:PROPERTIES:
:CUSTOM_ID: d090c98d-fa29-41b6-bf52-7db55ee3bd81
:END:
#+name: mpv-key-binding
| key | info  | arg                |
|-----+-------+--------------------|
| m   |       |                    |
| p   | pip   | --profile=mini     |
| h   | left  | --video-rotate=270 |
| l   | right | --video-rotate=90  |

#+begin_src js :var mpvKeyBindings=mpv-key-binding[]
const mpvLeaderKey = ',m';
for (const k of mpvKeyBindings) {
  mapkey(`${mpvLeaderKey}${k[0].toUpperCase()}`, `Play with mpv(${k[1]})` ,() => {
    callMpv(window.location.href, k[2]);
  });
  mapkey(`${mpvLeaderKey}${k[0]}`, `Open link with mpv(${k[1]})`, () => {
    Hints.create('*[href]', el => { callMpv(el.href, k[2]); });
  });
}
#+end_src

** inline query
:PROPERTIES:
:CUSTOM_ID: b4da8523-58a6-41c1-94fc-fde44bdfa1e3
:END:
https://github.com/brookhong/Surfingkeys/wiki/Register-inline-query

#+begin_src js
const chinesePattern = /[\u4e00-\u9fa5]/;
const japanesePattern = /[\u3040-\u30ff]/;
function getLanguageCode(str) {
  let code = 'eng';
  if (chinesePattern.test(str))
    code = 'zh';
  else if (japanesePattern.test(str))
    code = 'ja';
  return code;
}
#+end_src

#+begin_src js
Front.registerInlineQuery({
    url: function(q) {
        return `http://dict.youdao.com/w/${getLanguageCode(q)}/${q}/#keyfrom=dict2.index`;
    },
    parseResult: function(res) {
        var parser = new DOMParser();
        var doc = parser.parseFromString(res.text, "text/html");
        var collinsResult = doc.querySelector("#collinsResult");
        var authTransToggle = doc.querySelector("#authTransToggle");
        var examplesToggle = doc.querySelector("#examplesToggle");
        if (collinsResult) {
            collinsResult.querySelectorAll("div>span.collinsOrder").forEach(function(span) {
                span.nextElementSibling.prepend(span);
            });
            collinsResult.querySelectorAll("div.examples").forEach(function(div) {
                div.innerHTML = div.innerHTML.replace(/<p/gi, "<span").replace(/<\/p>/gi, "</span>");
            });
            var exp = collinsResult.innerHTML;
            return exp;
        } else if (authTransToggle) {
            authTransToggle.querySelector("div.via.ar").remove();
            return authTransToggle.innerHTML;
        } else if (examplesToggle) {
            return examplesToggle.innerHTML;
        }
    }
});
#+end_src

#+begin_src javascript
Front.registerInlineQuery({
    url: function(q) {
        return `https://jisho.org/search/${q}`;
    },
    parseResult: function(res) {
        var parser = new DOMParser();
        var doc = parser.parseFromString(res.text, "text/html");
        var result = doc.querySelector("#primary>div.exact_block");
        if (result) {
            result.querySelectorAll('div>span.furigana').forEach(function(e){
                br = document.createElement("br");
                e.appendChild(br);
            });
            result.querySelectorAll('h4').forEach(function(e){
                e.remove();
            });
            result.querySelectorAll('div>div.concept_light-status').forEach(function(e){
                e.remove();
            });
            result.querySelectorAll('div>a.light-details_link').forEach(function(e){
                e.remove();
            });
            result.querySelectorAll('div>span.meaning-abstract').forEach(function(e){
                e.remove();
            });
            result.querySelectorAll('div>span.supplemental_info').forEach(function(e){
                e.outerHTML = "&nbsp;" + e.outerHTML;
            });
            var exp = result.innerHTML;
            return exp;
        }    }
});
#+end_src

** search engine
:PROPERTIES:
:CUSTOM_ID: c1157996-52a0-4db7-86f1-16a13b1bb71a
:END:
#+name: search-engine-table
| alias | name           | engine                                                                               |
|-------+----------------+--------------------------------------------------------------------------------------|
| a     | EmacsWiki      | https://www.baidu.com/s?wd=site%3Aemacswiki.org%20                                   |
| c     | Swisscows      | https://swisscows.com/en/web?region=iv&query=                                        |
| l     | Bilibili       | https://search.bilibili.com/all?keyword=                                             |
| n     | NixHomeManager | https://mipmip.github.io/home-manager-option-search/?query=                          |
| N     | NixPackages    | https://search.nixos.org/packages?from=0&size=50&sort=relevance&type=packages&query= |
| j     | Mojeek         | https://www.mojeek.com/search?q=                                                     |
| u     | Wubi           | https://wubi.xuelai.com/search/                                                      |

#+begin_src js :var mySearchAlias=search-engine-table[]
for (const alias of mySearchAlias) {
  addSearchAlias(alias[0], alias[1], alias[2]);
}
#+end_src

** theme
:PROPERTIES:
:CUSTOM_ID: 891f5762-a76b-4f1c-b57e-ceb2f351bbc8
:END:
https://github.com/brookhong/Surfingkeys/issues/1655#issuecomment-1037459656
#+begin_src js
solarizedDark = `
.sk_theme {
	background: #100a14dd;
	color: #4f97d7;
}
.sk_theme tbody {
	color: #292d;
}
.sk_theme input {
	color: #d9dce0;
}
.sk_theme .url {
	color: #2d9574;
}
.sk_theme .annotation {
	color: #a31db1;
}
.sk_theme .omnibar_highlight {
	color: #333;
	background: #ffff00aa;
}
.sk_theme #sk_omnibarSearchResult ul li:nth-child(odd) {
	background: #5d4d7a55;
}
.sk_theme #sk_omnibarSearchResult ul li.focused {
	background: #5d4d7aaa;
}
.sk_theme #sk_omnibarSearchResult .omnibar_folder {
	color: #a31db1;
}
`;


zenbonse = `
.sk_theme {
  font-family: SauceCodePro Nerd Font, Consolas, Menlo, monospace;
  font-size: 10pt;
  background: #f0edec;
  color: #2c363c;
}
.sk_theme tbody {
  color: #f0edec;
}
.sk_theme input {
  color: #2c363c;
}
.sk_theme .url {
  color: #1d5573;
}
.sk_theme .annotation {
  color: #2c363c;
}
.sk_theme .omnibar_highlight {
  color: #88507d;
}
.sk_theme #sk_omnibarSearchResult ul li:nth-child(odd) {
  background: #f0edec;
}
.sk_theme #sk_omnibarSearchResult ul li.focused {
  background: #cbd9e3;
}
#sk_status,
#sk_find {
  font-size: 10pt;
}
`;


settings.theme = `
  @media (prefers-color-scheme: dark) {
  ${solarizedDark}
}
  @media (prefers-color-scheme: light) {
  ${zenbonse}
}
}
`
#+end_src

** chrome
:PROPERTIES:
:CUSTOM_ID: 55bbd191-e7d6-4374-a7b8-932039f55538
:END:

#+begin_src js
if (getBrowserName() === 'Chrome') {
#+end_src

*** proxy
:PROPERTIES:
:CUSTOM_ID: 8a494f69-f794-4e91-96d6-e3299aa22068
:END:
https://github.com/brookhong/Surfingkeys/blob/master/src/background/chrome.js

#+begin_src js
function toggleHostProxy(host){
  return new Promise((resolve, reject) => {
    if (host && host.length) {
      RUNTIME('updateProxy', {
        host: host,
        operation: 'toggle'
      }, res => {
        resolve(res);
      });
    } else {
      reject();
    };
  });
}
#+end_src

#+begin_src js
mapkey(';pf', 'toggle proxy for link', () => {
  Hints.create('*[href]', el => {
    toggleHostProxy(extractDomainFromUrl(el.href));
  });
});
#+end_src

#+begin_src js
mapkey(';pl', 'toggle proxy current site', () => {
  toggleHostProxy(extractDomainFromHost(window.location.hostname));
});
#+end_src

**** pac
:PROPERTIES:
:CUSTOM_ID: 1dcc733d-0fa2-4156-8020-04f6a8446d27
:END:
#+name: json-file-to-js-obj
#+begin_src elisp
(if (file-exists-p file)
    (with-current-buffer (find-file-noselect file)
      (buffer-string))
  "{}")
#+end_src

#+begin_src javascript :tangle "_tangle/pac.js" :noweb-prefix no
var pacGlobal = <<json-file-to-js-obj(file="pac.json.gpg")>>

function matchHost(host, rule_list) {
  for (var i = 0; i < rule_list.length; i++) {
    if (shExpMatch(host, rule_list[i])) {
      return true;
    }
  }
  return false;
}

function FindProxyForHost(host) {
  var lastPos;
  
  if (pacGlobal.proxyMode === 'always') {
    return pacGlobal.proxy[0];
  } 
  
  else if (pacGlobal.proxyMode === 'bypass') {
    do {
      if (matchHost(host, pacGlobal.autoproxy_hosts[0])) {
        return 'DIRECT';
      }
      lastPos = host.indexOf('.') + 1;
      host = host.slice(lastPos);
    } while (lastPos >= 1);
    return pacGlobal.proxy[0];
  } 
  
  else {  // byhost mode
    for (var i = 0; i < pacGlobal.proxy.length; i++) {
      var ahost = host;
      do {
        if (matchHost(ahost, pacGlobal.autoproxy_hosts[i])) {
          return pacGlobal.proxy[i];
        }
        lastPos = ahost.indexOf('.') + 1;
        ahost = ahost.slice(lastPos);
      } while (lastPos >= 1);
    }
    return 'DIRECT';
  }
}

function FindProxyForURL(url, host) {
  try {
    return FindProxyForHost(host);
  } catch (e) {
    return 'DIRECT';  // 出错时直连
  }
}
#+end_src

*** end
:PROPERTIES:
:CUSTOM_ID: 66421736-0059-408e-b459-30112a58c0c1
:END:
#+begin_src js
}
#+end_src

** dwim
:PROPERTIES:
:CUSTOM_ID: 60ddd28f-3a84-4104-9ff7-2a352320fe9b
:END:
#+begin_src js
mapkey(',,', '根据当前URL执行特定操作', function() {
  const url = window.location.href;
  let match

  <<github-to-deepwiki>>

  else {
    Front.showBanner('当前页面没有配置特定操作');
  }
});
#+end_src

*** sub
:PROPERTIES:
:header-args:js: :tangle no
:END:
#+name: github-to-deepwiki
#+begin_src js
match = url.match(/^https:\/\/github\.com\/([^\/]+)\/([^\/]+)\/?/)
if (match) {  
  const user = match[1];  
  const repo = match[2];  
  const deepwikiUrl = `https://deepwiki.com/${user}/${repo}`;  
  tabOpenLink(deepwikiUrl);
}
#+end_src

** bind
:PROPERTIES:
:CUSTOM_ID: f9830fb5-c95c-48b3-9d67-fdf2ee3122d7
:END:
#+begin_src js
if (document.title.endsWith(' · FreshRSS')) {
  unmap('f');
  unmap('j');
  unmap('k');
}
#+end_src

** webback
:PROPERTIES:
:CUSTOM_ID: 865b3264-6f3a-4324-82e1-1f7600fad28c
:END:
#+begin_src js
function cleanupUrl(url) {
  return url.replace(/\?[^\?]*$/, '').replace(/\#[^\#]*$/, '');
}

function getWaybackSnapshot(url, callback) {
  // 清理 URL，移除查询参数和哈希片段
  let waybackApiUrl = 'https://archive.org/wayback/available?url=' + encodeURIComponent(url);

  RUNTIME('request', {
    url: waybackApiUrl,
    method: 'GET'
  }, function(response) {
    if (response.error) {
      callback({ error: response.error });
      return;
    }

    try {
      let data = JSON.parse(response.text);
      callback({ archived_snapshots: data.archived_snapshots || {} });
    } catch (e) {
      callback({ error: "Failed to parse Wayback Machine response" });
    }
  });
}

function openClosestWaybackSnapshot(url) {
  getWaybackSnapshot(cleanupUrl(url), function(result) {
    if (result.error) {
      Front.showBanner("Error checking Wayback Machine: " + result.error, 3000);
    } else if (result.archived_snapshots.closest && result.archived_snapshots.closest.available) {
      tabOpenLink(result.archived_snapshots.closest.url.replace(/^http:\/\//, "https://"));
    } else {
      Front.showBanner("No archived snapshot found for this page", 3000);
    }
  })
}

mapkey(',ww', 'Open current page in Wayback Machine', function() {
  openClosestWaybackSnapshot(window.location.href);
});

mapkey(',wW', 'Open selected url in Wayback Machine', function() {
  Hints.create('*[href]', el => {
    openClosestWaybackSnapshot(el.href);
  });
});

mapkey(',ws', 'Save current page in Wayback Machine', function() {
  tabOpenLink('https://web.archive.org/save/' + cleanupUrl(window.location.href));
});
#+end_src

** external
:PROPERTIES:
:CUSTOM_ID: a81eca7e-fa2d-43bd-af96-ce2315a31dab
:END:
#+begin_src js
function fetchUrl(url, onload, name) {
  // 自动提取名称
  if (name === undefined || name === null) {
    const cleanUrl = url.split(/[?#]/)[0];
    name = cleanUrl.substring(cleanUrl.lastIndexOf('/') + 1) || 'unknown';
  }

  RUNTIME('request', {
    url: url,
    headers: {
      'accept': 'application/javascript, text/javascript, */*; q=0.01'
    }
  }, function(response) {
    if (response.text) {
      onload(response.text);
    } else {
      Front.showBanner(`${name} 加载失败`);
    }
  });
}

function loadScript(url, onload, name) {
  fetchUrl(url, function(scriptText) {
    // 使用Function构造函数代替eval，更安全且可控制作用域
    const scriptFunc = new Function(scriptText);
    scriptFunc();

    // 调用原始回调
    onload();
  }, name);
}
#+end_src

*** QRCode
:PROPERTIES:
:CUSTOM_ID: 9d549487-6a6b-49c4-ae77-7e0de65cbdde
:END:
#+begin_src js
loadScript(
  'https://fastly.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.js',
  () => {
    <<qr-decode>>
  },
  'jsQR'
);
#+end_src

#+name: qr-decode
#+begin_src js :tangle no
function openLinkInQRCode() {
  Hints.create('img', function(element) {
    const imageUrl = element.src;

    // 直接处理 data:image URLs
    if (imageUrl.startsWith('data:image/')) {
      processImageData(imageUrl);
    } else {
      // 使用 RUNTIME 获取其他图片数据
      RUNTIME('requestImage', {
        url: imageUrl
      }, function(response) {
        if (response.text) {
          processImageData(response.text);
        } else {
          Front.showBanner('图片获取失败');
        }
      });
    }
  });

  function processImageData(dataUrl) {
    // 原有的图片处理逻辑
    try {
      const img = new Image();
      img.onload = function() {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        canvas.width = img.width;
        canvas.height = img.height;
        ctx.drawImage(img, 0, 0);

        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
        const code = jsQR(imageData.data, imageData.width, imageData.height);

        if (code) {
          tabOpenLink(code.data);
          Front.showBanner('二维码解析成功: ' + code.data);
        } else {
          Front.showBanner('二维码解析失败');
        }
      };
      img.src = dataUrl;
    } catch (e) {
      Front.showBanner('图片处理错误: ' + e.message);
    }
  }
}

mapkey(',q', '打开二维码中链接', openLinkInQRCode);
#+end_src

* local variables
# Local Variables:
# buffer-auto-save-file-name: nil
# End:
