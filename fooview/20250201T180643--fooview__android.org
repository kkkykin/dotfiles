#+title:      fooview
#+date:       [2025-02-01 Sat 18:06]
#+filetags:   :android:
#+identifier: 20250201T180643

* tangle
#+begin_src elisp
(let* ((js (org-babel-tangle nil nil "^js$"))
       (sh (org-babel-tangle nil nil "^sh$"))
       (base-dir "/storage/emulated/0/Android/obb/com.fooview.android.fooview")
       (pub-dir "/storage/emulated/0/fooview")
       (cmd (list "mkdir" "-p" base-dir ";"))
       mv-dir
       (shell-file-name (expand-file-name "usr/bin/rish" zr-termux-root-directory)))
  (when js (push (expand-file-name "js" pub-dir) mv-dir))
  (when sh (push (expand-file-name "sh" pub-dir) mv-dir))
  (when mv-dir (setq cmd `(,@cmd "mv" "-f" ,@mv-dir ,base-dir)))
  (start-process-shell-command
   "Deploy fv scripts" nil (combine-and-quote-strings cmd)))
#+end_src

* js
:PROPERTIES:
:tangle-dir: /storage/emulated/0/fooview/js
:header-args: :comments no :mkdirp t
:END:

** functions
#+name: ensure-array
#+begin_src js
function ensureArray(v) {
  return (typeof v === 'string' ? [v] : v);
}
#+end_src

** termux-run-command
#+begin_src js :tangle (zr-org-by-tangle-dir "termux-run-command.js")
<<ensure-array>>

const [
  program,
  args,
  resultdir,
  workdir,
  foreground,
  session_action
] = ensureArray(arg1);

function expand_file_name(path, parent) {
  let prefix = '';
  const ab_re = /^(~|\$PREFIX)?\//;
  switch(true) {
  case (ab_re.test(path)):
    prefix = '';
    break;
  case (!!parent):
    prefix = parent + '/';
    break;
  default:
    prefix = '~/'
  }
  return prefix + path;
}

function quoteArg(arg) {
  return "'" + arg.replaceAll("'", "'\\''") + "'";
}

let command = [
  'am', 'startservice',
  '--user', '0',
  '-n', 'com.termux/com.termux.app.RunCommandService',
  '-a', 'com.termux.RUN_COMMAND',
  '--es', 'com.termux.RUN_COMMAND_PATH', quoteArg(expand_file_name(program, '$PREFIX/bin'))
];

function containsCharacter(arr, c) {
  return arr.some(str => str.includes(c));
}

function getAMissingVisibleChar(arr) {
  const allVisibleChars = " !\"#$%&'()*+-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
  const combinedString = arr.join('');
  for (const c of allVisibleChars) {
    if (!combinedString.includes(c)) {
      return c;
    }
  }
  return ',';
}

function putArgs(arr) {
  let args = arr;
  if (containsCharacter(arr, ',')) {
    const c = getAMissingVisibleChar(arr);
    args = arr.map(s => s.replace(',', c)).join(',');
    command = command.concat('--ez', 'com.termux.RUN_COMMAND_REPLACE_COMMA_ALTERNATIVE_CHARS_IN_ARGUMENTS', 'true', '--es', 'com.termux.RUN_COMMAND_COMMA_ALTERNATIVE_CHARS_IN_ARGUMENTS', quoteArg(c));
  }
  command = command.concat('--esa', 'com.termux.RUN_COMMAND_ARGUMENTS', quoteArg(args.join(',')));
}

if (args) {
  putArgs(ensureArray(args));
}

if (resultdir) {
  command = command.concat('--es', 'com.termux.RUN_COMMAND_RESULT_DIRECTORY', quoteArg(expand_file_name(resultdir, '/sdcard/.fvout')));
}

if (workdir) {
  command = command.concat('--es', 'com.termux.RUN_COMMAND_WORKDIR', quoteArg(expand_file_name(workdir)));
}

if (!foreground) {
  command = command.concat('--ez', 'com.termux.RUN_COMMAND_BACKGROUND', 'true');
}

if (session_action) {
  command = command.concat('--es', 'com.termux.RUN_COMMAND_SESSION_ACTION', quoteArg(session_action));
}

return command.join(' ');
#+end_src

** get-pos-of-str-in-screen
#+begin_src js :tangle (zr-org-by-tangle-dir "get-pos-of-str-in-screen.js")
<<ensure-array>>

const [
  str,
  pkg
] = ensureArray(arg2);

const positions = {
  'com.coolapk.market.view.splash.SplashActivity': [980, 200]
};

if (pkg) {
  return positions[pkg];
}

const m=arg1.find(t=>t.includes(str));
return m&&((l,t,r,b)=>[+l+ +r>>1,+t+ +b>>1])(...m.match(/\d+(?!.*\()/g).slice(-4));
#+end_src

** share

*** text
#+begin_src js :tangle (zr-org-by-tangle-dir "text-router.js")
const bili_re = /(https?:\/\/www.bilibili.com\/[^ ]*)/i;

const results = {
  type: -1,
  data: null
};

switch (true) {
case bili_re.test(arg1):
  results.type = 'bilibili';
  results.data = arg1.match(bili_re)[1];
  break;
default:
  results.type = -1;
}

return results;
#+end_src
