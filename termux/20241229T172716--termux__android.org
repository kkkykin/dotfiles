#+title:      termux
#+date:       [2024-12-29 Sun 17:27]
#+filetags:   :android:
#+identifier: 20241229T172716

* tangle
#+begin_src elisp
(org-babel-tangle)

(dolist (bin (directory-files "_tangle/bin" t "^[^.]" t))
  (make-symbolic-link
   bin
   (file-name-concat zr-termux-root-directory
                     "usr/bin"
                     (file-name-nondirectory bin))
   t))

(let ((conf (expand-file-name "home/.termux/termux.properties"
                              zr-termux-root-directory)))
  (rename-file (expand-file-name "_tangle/termux.properties") conf t))
#+end_src

* permissions

** normal
#+begin_src sh
termux-setup-storage
#+end_src

** adb
#+name: grant-perm
#+begin_src sh :eval no
pm grant "$pkg" android.permission.DUMP
pm grant "$pkg" android.permission.PACKAGE_USAGE_STATS
#+end_src

#+name: perm-setup
#+begin_src elisp :var pkg="com.termux" script=grant-perm[]
(let ((shell-file-name (expand-file-name "usr/bin/rish" zr-termux-root-directory)))
  (start-process-shell-command
   "perm-setup" "perm-setup-log" (format "pkg=\"%s\"\n%s" pkg script)))
#+end_src

* properties
:PROPERTIES:
:CUSTOM_ID: 3bb71465-c2e2-4dc1-8987-6997f6d6f9a6
:END:
#+begin_src conf :tangle (zr-org-by-tangle-dir "termux.properties")
allow-external-apps = true
extra-keys = [[ESC, CTRL, ALT, LEFT, DOWN, UP, RIGHT, ENTER]]
#+end_src

* cli
:PROPERTIES:
:header-args:sh: :shebang "#!/data/data/com.termux/files/usr/bin/env bash" :mkdirp t
:tangle-dir: _tangle/bin
:END:

** emacsclient
:PROPERTIES:
:CUSTOM_ID: 4bf09652-8c4c-44ad-96bf-7335f0efe5b5
:END:
#+begin_src sh :tangle (zr-org-by-tangle-dir "emacsclient") :var EMACS_SOCKET_NAME=(expand-file-name server-name server-socket-dir) emacsclient=(symbol-value 'emacsclient-program-name)
set -euo pipefail

cleanup() {
  local exit_code=$?
  popd > /dev/null
  if [ $? -ne 0 ]; then
    echo "Warn: cannot return original_dir."
    exit $exit_code
  fi
}

trap cleanup EXIT

pushd "/data/data/org.gnu.emacs/lib" > /dev/null

export EMACS_SOCKET_NAME
"./$emacsclient" "$@"
#+end_src


** wifi-manage
:PROPERTIES:
:CUSTOM_ID: 34639262-73f0-4ab5-bfda-f1567abe017f
:END:
#+begin_src sh :tangle (zr-org-by-tangle-dir "zr-wifi-manage")
cur_info=$(termux-wifi-connectioninfo)
cur_ssid=$(echo "$cur_info" | jq -r .ssid)

function get-ssid-location() {
  if [ "$cur_ssid" = '<unknown ssid>' ]; then
    return 1
  else
    local loc
    loc=$(emacsclient -e "(zr-android-where-am-i \"$cur_ssid\")")
    if [ "$loc" = 'nil' ]; then
      return 1
    else
      echo "${loc:1:-1}"
    fi
  fi
}

function near_known_wifi_p() {
  local near_wifi
  near_wifi=$(termux-wifi-scaninfo | jq -r '.[].ssid')
  local result
  result=$(emacsclient -e "(zr-android-near-known-wifi-p \"$near_wifi\")")
  if [ "$result" = 'nil' ]; then
    return 1
  else
    return 0
  fi
}

function try-remove-wifi() {
  if near_known_wifi_p; then
    rish -c "cmd wifi remove-suggestion \"$1\""
    emacsclient -e "(zr-android-wifi-set-timer 0)"
  fi
}

function try-connect-wifi() {
  local cur_state
  cur_state=$(echo "$cur_info" | jq -r .supplicant_state)
  case $cur_state in
    COMPLETED)
      emacsclient -e "(zr-android-wifi-set-timer 5 \"remove\" \"$1\")"
      try-remove-wifi "$1"
      ;;
    DISCONNECTED)
      emacsclient -e "(zr-android-wifi-set-timer 5 \"remove\" \"$1\")"
      rish -c "cmd wifi add-suggestion \"$1\" wpa2 ${@:2}"
      ;;
    *)
      ;;
  esac
}

case "$1" in
  connect)
    try-connect-wifi "${@:2}"
    ;;
  remove)
    try-remove-wifi "$2"
    ;;
  location)
    get-ssid-location
    ;;
  known-p)
    near_known_wifi_p
    ;;
  *)
    echo "Wrong argument."
    ;;
esac
#+end_src

** screen-on-p
:PROPERTIES:
:CUSTOM_ID: 8197aa92-1e58-4ca9-a15b-37e0e981d45a
:END:
https://www.reddit.com/r/termux/comments/11e2s3j/check_if_display_is_on_or_off/

Check by exit code.
#+begin_src sh :tangle (zr-org-by-tangle-dir "screen-on-p")
/system/bin/dumpsys deviceidle | grep -q "^  mScreenOn=true$"
#+end_src

** vpn-enable-p
:PROPERTIES:
:CUSTOM_ID: 19918dc2-5be8-42f4-ac59-c22e28d92fe9
:END:

Check by exit code.
#+begin_src sh :tangle (zr-org-by-tangle-dir "vpn-enable-p")
/system/bin/dumpsys vpn_management | grep -q "^    Active vpn type: 1"
#+end_src

** vpn-enable
:PROPERTIES:
:CUSTOM_ID: c62bd644-4645-402b-b530-a17e9042c68a
:END:
#+begin_src sh :tangle (zr-org-by-tangle-dir "vpn-enable")
if [ $# -ne 1 ]; then
    echo "Usage: $0 <true|false>" >&2
    exit 1
fi

vpn-toggle () {
    termux-am start -n io.nekohasekai.sagernet/io.nekohasekai.sagernet.QuickToggleShortcut >/dev/null 2>&1
}

case "$1" in
    true)
        if ! vpn-enable-p; then
            vpn-toggle
        fi
        ;;
    false)
        if vpn-enable-p; then
            vpn-toggle
        fi
        ;;
    *)
        echo "Error: Argument must be 'true' or 'false'" >&2
        exit 1
        ;;
esac
#+end_src

** tailscale-enable
:PROPERTIES:
:CUSTOM_ID: 2fa215c1-0152-4103-9817-f000fd990a68
:END:
#+begin_src sh :tangle (zr-org-by-tangle-dir "zr-tailscale-enable")
function tailscale-broadcast() {
  termux-am broadcast -n com.tailscale.ipn/.IPNReceiver -a com.tailscale.ipn.$1
}

function tailscale-stat() {
  local content
  content=$(termux-notification-list | jq -r '.[] | select(.packageName == "com.tailscale.ipn") | .content')
  if [ "$content" = "Connected" ]; then
    return 0
  else
    return 1
  fi
}

case "$1" in
  true)
    tailscale-broadcast "CONNECT_VPN"
    ;;
  false)
    tailscale-broadcast "DISCONNECT_VPN"
    ;;
  toggle)
    if tailscale-stat; then
      action="DISCONNECT_VPN"
    else
      action="CONNECT_VPN"
    fi
    tailscale-broadcast $action
    ;;
  ,*)
    echo "Wrong argument."
    ;;
esac
#+end_src

** wifi-enable
:PROPERTIES:
:CUSTOM_ID: de7b47e1-bdb2-4b46-a64a-f84121416c14
:END:
#+begin_src sh :tangle (zr-org-by-tangle-dir "wifi-enable")
if [ "$1" = 'true' ]; then
    rish -c 'svc wifi enable'
else
    termux-wifi-enable $*
fi
#+end_src

** mobile-enable
:PROPERTIES:
:CUSTOM_ID: 6a1151db-438b-41d2-84c0-77c1273b6be5
:END:
#+begin_src sh :tangle (zr-org-by-tangle-dir "mobile-enable")
if [ $# -ne 1 ]; then
    echo "Usage: $0 <true|false>" >&2
    exit 1
fi

case "$1" in
    true)
        rish -c 'svc data enable'
        ;;
    false)
        rish -c 'svc data disable'
        ;;
    *)
        echo "Error: Argument must be 'true' or 'false'" >&2
        exit 1
        ;;
esac
#+end_src

** wifi-mobile-switch
:PROPERTIES:
:CUSTOM_ID: 52419187-e1b8-4716-a543-3f739a676bd2
:END:
#+begin_src sh :tangle (zr-org-by-tangle-dir "wifi-mobile-switch")
if termux-wifi-connectioninfo | grep -q '^  "supplicant_state": "UNINITIALIZED"$'; then
    wifi-enable true
    mobile-enable false
else
    mobile-enable true
    wifi-enable false
fi
#+end_src

** recent-apps
:PROPERTIES:
:CUSTOM_ID: 12768000-6d66-47cd-b2a4-b2694e9c485d
:END:
#+begin_src sh :tangle (zr-org-by-tangle-dir "recent-apps")
/system/bin/dumpsys activity recents | awk -F '[ :}]' '/^  \* Recent #[[:digit:]]+:.+type=standard A=/{print $11}'
#+end_src

** kill-latest-app
:PROPERTIES:
:CUSTOM_ID: bb284853-b6aa-4e30-abe0-f0f187924df3
:END:
#+begin_src sh :tangle (zr-org-by-tangle-dir "kill-latest-app")
app=$(echo "$(recent-apps)" | head -1)

termux-toast "Killing ${app}"

rish -c "am stop-app '${app}'"
#+end_src
