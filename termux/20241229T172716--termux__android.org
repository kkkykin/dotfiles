#+title:      termux
#+date:       [2024-12-29 Sun 17:27]
#+filetags:   :android:
#+identifier: 20241229T172716

* tangle
#+begin_src elisp
(org-babel-tangle)

(dolist (bin (directory-files "_tangle/bin" t "^[^.]" t))
  (make-symbolic-link
   bin
   (file-name-concat zr-termux-root-directory
                     "usr/bin"
                     (file-name-nondirectory bin))
   t))

(let ((conf (expand-file-name "home/.termux/termux.properties"
                              zr-termux-root-directory)))
  (rename-file (expand-file-name "_tangle/termux.properties") conf t))

;; setup emacsclient
(make-symbolic-link
 (expand-file-name emacsclient-program-name
                   "/data/data/org.gnu.emacs/lib")
 (expand-file-name "usr/bin/emacsclient"
                   zr-termux-root-directory)
 t)
#+end_src

* permissions

** normal
#+begin_src sh
termux-setup-storage
#+end_src

** adb
#+begin_src sh
pm grant com.termux android.permission.DUMP
#+end_src

* properties
:PROPERTIES:
:CUSTOM_ID: 3bb71465-c2e2-4dc1-8987-6997f6d6f9a6
:END:
#+begin_src conf :tangle (zr-org-by-tangle-dir "termux.properties")
allow-external-apps = true
extra-keys = [[ESC, CTRL, ALT, LEFT, DOWN, UP, RIGHT, ENTER]]
#+end_src

* cli
:PROPERTIES:
:header-args:sh: :shebang "#!/data/data/com.termux/files/usr/bin/env bash" :mkdirp t
:tangle-dir: _tangle/bin
:END:

** screen-on-p
:PROPERTIES:
:CUSTOM_ID: 8197aa92-1e58-4ca9-a15b-37e0e981d45a
:END:
https://www.reddit.com/r/termux/comments/11e2s3j/check_if_display_is_on_or_off/

Check by exit code.
#+begin_src sh :tangle (zr-org-by-tangle-dir "screen-on-p")
/system/bin/dumpsys deviceidle | grep -q "^  mScreenOn=true$"
#+end_src

** vpn-enable-p
:PROPERTIES:
:CUSTOM_ID: 19918dc2-5be8-42f4-ac59-c22e28d92fe9
:END:

Check by exit code.
#+begin_src sh :tangle (zr-org-by-tangle-dir "vpn-enable-p")
/system/bin/dumpsys vpn_management | grep -q "^    Active vpn type: 1"
#+end_src

** vpn-enable
:PROPERTIES:
:CUSTOM_ID: c62bd644-4645-402b-b530-a17e9042c68a
:END:
#+begin_src sh :tangle (zr-org-by-tangle-dir "vpn-enable")
if [ $# -ne 1 ]; then
    echo "Usage: $0 <true|false>" >&2
    exit 1
fi

vpn-toggle () {
    termux-am start -n io.nekohasekai.sagernet/io.nekohasekai.sagernet.QuickToggleShortcut >/dev/null 2>&1
}

case "$1" in
    true)
        if ! vpn-enable-p; then
            vpn-toggle
        fi
        ;;
    false)
        if vpn-enable-p; then
            vpn-toggle
        fi
        ;;
    *)
        echo "Error: Argument must be 'true' or 'false'" >&2
        exit 1
        ;;
esac
#+end_src

** wifi-enable
:PROPERTIES:
:CUSTOM_ID: de7b47e1-bdb2-4b46-a64a-f84121416c14
:END:
#+begin_src sh :tangle (zr-org-by-tangle-dir "wifi-enable")
if [ "$1" = 'true' ]; then
    rish -c 'svc wifi enable'
else
    termux-wifi-enable $*
fi
#+end_src

** mobile-enable
:PROPERTIES:
:CUSTOM_ID: 6a1151db-438b-41d2-84c0-77c1273b6be5
:END:
#+begin_src sh :tangle (zr-org-by-tangle-dir "mobile-enable")
if [ $# -ne 1 ]; then
    echo "Usage: $0 <true|false>" >&2
    exit 1
fi

case "$1" in
    true)
        rish -c 'svc data enable'
        ;;
    false)
        rish -c 'svc data disable'
        ;;
    *)
        echo "Error: Argument must be 'true' or 'false'" >&2
        exit 1
        ;;
esac
#+end_src

** wifi-mobile-switch
:PROPERTIES:
:CUSTOM_ID: 52419187-e1b8-4716-a543-3f739a676bd2
:END:
#+begin_src sh :tangle (zr-org-by-tangle-dir "wifi-mobile-switch")
if termux-wifi-connectioninfo | grep -q '^  "supplicant_state": "UNINITIALIZED"$'; then
    wifi-enable true
    mobile-enable false
else
    mobile-enable true
    wifi-enable false
fi
#+end_src

