#+title:      termux
#+date:       [2024-12-29 Sun 17:27]
#+filetags:   :android:
#+identifier: 20241229T172716
#+property:   header-args:sh :var zr_cli="zr-cli" :shebang "#!/data/data/com.termux/files/usr/bin/env bash" :mkdirp t
#+property:   header-args:python :shebang "#!/data/data/com.termux/files/usr/bin/env python" :mkdirp t

* tangle
#+begin_src elisp
(let ((zr-local-pls (or zr-local-pls (plstore-open "termux.pls")))
      (data-dir (expand-file-name "_tangle/data")))
  (mkdir data-dir t)
  (write-region
   (json-serialize
    (plist-get (cdr (plstore-get zr-local-pls "ssid")) :data))
   nil
   (expand-file-name "ssid.json" data-dir))
  (org-babel-tangle)
  (plstore-close zr-local-pls))

(when (eq system-type 'android)
  (let ((termux-path (expand-file-name "usr/bin" zr-termux-root-directory))
        (etags-path (expand-file-name etags-program-name "~/../lib"))
        (intents-path (expand-file-name "home/bin" zr-termux-root-directory)))
    (make-symbolic-link etags-path (expand-file-name "etags" termux-path) t)
    (mkdir intents-path t)
    (dolist (bin (directory-files "_tangle/intents" t "^[^.]" t))
      (let ((name (file-name-nondirectory bin)))
        (make-symbolic-link bin (expand-file-name name intents-path) t)))
    (dolist (bin '("emacsclient"
                   "zr-cli"))
      (make-symbolic-link
       (expand-file-name bin "_tangle/bin")
       (expand-file-name bin termux-path)
       t))))
#+end_src

* permissions

** normal
#+begin_src sh
termux-setup-storage
#+end_src

** adb
#+name: grant-perm
#+begin_src sh :eval no
pm grant "$pkg" android.permission.DUMP
pm grant "$pkg" android.permission.PACKAGE_USAGE_STATS
#+end_src

#+name: perm-setup
#+begin_src elisp :var pkg="com.termux" script=grant-perm[]
(let ((shell-file-name (expand-file-name "usr/bin/rish" zr-termux-root-directory)))
  (start-process-shell-command
   "perm-setup" "perm-setup-log" (format "pkg=\"%s\"\n%s" pkg script)))
#+end_src

* properties
:PROPERTIES:
:CUSTOM_ID: 3bb71465-c2e2-4dc1-8987-6997f6d6f9a6
:tangle-dir: (if (eq 'android system-type) (expand-file-name "home/.termux" zr-termux-root-directory) "_tangle/properties")
:END:
#+begin_src conf-unix :mkdirp t :tangle (zr-org-by-tangle-dir "base.properties") :mkdirp t
volume-keys = volume
allow-external-apps = true
#+end_src

#+begin_src conf-unix :mkdirp t :tangle (zr-org-by-tangle-dir "normal.properties")
extra-keys = [[ \
  <<reload-settings-property>>
  ESC, \
  CTRL, \
  ALT, \
  LEFT, \
  DOWN, \
  UP, \
  RIGHT \
]]
#+end_src

#+begin_src conf-unix :mkdirp t :tangle (zr-org-by-tangle-dir "mini.properties")
extra-keys = [[ \
  <<reload-settings-property>>
  {macro: "CTRL d", display: C-d, popup: KEYBOARD} \
]]
#+end_src

#+name: reload-settings-property
#+begin_src conf-unix :tangle no
{macro: "zr-reload-settings\n", display: "Re", popup: KEYBOARD}, \
#+end_src

* cli
:PROPERTIES:
:tangle-dir: _tangle/bin
:header-args:sh+: :var EXTERNAL_DIR="/storage/emulated/0/Android/media/com.termux"
:END:

** emacsclient
:PROPERTIES:
:CUSTOM_ID: 4bf09652-8c4c-44ad-96bf-7335f0efe5b5
:END:
#+begin_src sh :tangle (zr-org-by-tangle-dir "emacsclient") :var EMACS_SOCKET_NAME=(expand-file-name server-name server-socket-dir) emacsclient=(symbol-value 'emacsclient-program-name)
set -euo pipefail

cleanup() {
  local exit_code=$?
  popd > /dev/null
  if [ $? -ne 0 ]; then
    echo "Warn: cannot return original_dir."
    exit $exit_code
  fi
}

trap cleanup EXIT

pushd "/data/data/org.gnu.emacs/lib" > /dev/null

export EMACS_SOCKET_NAME
"./$emacsclient" "$@"
#+end_src





** zr-cli
:PROPERTIES:
:CUSTOM_ID: cd695924-23b2-4407-886a-6a8c96138465
:END:
#+header: :var RISH_SCRIPT_DIR="/storage/emulated/0/Android/media/com.termux/bin"
#+begin_src sh :tangle (zr-org-by-tangle-dir "zr-cli") :var SCRIPT_DIR=(expand-file-name "_tangle/bin")
SCRIPT_DIRS=()
SCRIPT_DIRS+=("$SCRIPT_DIR")
SCRIPT_DIRS+=("$EXTERNAL_DIR/bin")

# 显示帮助信息（列出所有可用脚本）
show_help() {
  echo "Usage: $0 <script-name> [args...]"
  echo "       $0 --help"
  echo ""
  echo "Available scripts in configured directories:"
  echo "------------------------------------------"
  
  # 从所有目录收集可执行脚本并去重
  declare -A scripts
  for dir in "${SCRIPT_DIRS[@]}"; do
    [[ -d "$dir" ]] || continue
    while IFS= read -r -d $'\0' script; do
      scripts["$(basename "$script")"]=1
    done < <(find "$dir" -maxdepth 1 -type f -print0)
  done

  # 按名称排序输出
  printf "%s\n" "${!scripts[@]}" | sort
  exit 0
}

# 查找脚本路径
find_script() {
  local script_name="$1"
  for dir in "${SCRIPT_DIRS[@]}"; do
    local script_path="${dir}/${script_name}"
    if [[ -f "$script_path" ]]; then
      echo "$script_path"
      return 0
    fi
  done
  return 1
}

if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
  show_help
fi

if [ $# -eq 0 ]; then
  show_help
  exit 1
fi

script_name="$1"
shift

script_path=$(find_script "$script_name")

if [[ -z "$script_path" ]]; then
  echo "Error: Script '$script_name' not found in configured directories" >&2
  echo "Use '$0 --help' to list available scripts" >&2
  exit 2
fi

if [[ "$(dirname $script_path)" == "$EXTERNAL_DIR/bin" ]]; then
  rish "$script_path" "$@"
else
  exec "$script_path" "$@"
fi
#+end_src

** wlan-ip
:PROPERTIES:
:CUSTOM_ID: f44b656d-5d54-46f8-be45-ffb559d35333
:END:
#+begin_src sh :tangle (zr-org-by-tangle-dir "wlan-ip")
ifconfig 2>/dev/null | awk '/^wlan0: /{flag=1} flag && /inet /{print $2; exit}'
#+end_src
** wifi-manage
:PROPERTIES:
:CUSTOM_ID: 34639262-73f0-4ab5-bfda-f1567abe017f
:END:
#+header: :var jobs_running_dir=(expand-file-name "home/running_jobs" zr-termux-root-directory)
#+header: :var data_source_dir=(expand-file-name "_tangle/data")
#+begin_src sh :tangle (zr-org-by-tangle-dir "wifi-manage")
wifi_job_id=999
wifi_data_file="$data_source_dir/ssid.json"

function get-ssid-location() {
  local cur_ssid=$(termux-wifi-connectioninfo | jq -r .ssid)
  if [ "$cur_ssid" = '<unknown ssid>' ]; then
    return 1
  else
    local exp=".[\"$cur_ssid\"].location"
    jq -er "$exp" "$wifi_data_file"
  fi
}

function near_known_wifi_p() {
  grep -Fxf <(termux-wifi-scaninfo | jq -r '.[].ssid') <(jq -r 'keys[]' "$wifi_data_file")
}

function try-remove-wifi() {
  if near_known_wifi_p; then
    rish -c "cmd wifi remove-suggestion \"$1\""
    termux-job-scheduler --cancel --job-id $wifi_job_id
  fi
}

function try-connect-wifi() {
  local cur_state
  cur_state=$(termux-wifi-connectioninfo | jq -r .supplicant_state)
  case $cur_state in
    COMPLETED)
      try-remove-wifi "$1"
      ;;
    DISCONNECTED)
      local script_name="remove-metered-wifi.sh"
      local job_script="$jobs_running_dir/$script_name"
      "$zr_cli" job-script-generate "wifi_name=$1" "$script_name" > "$job_script"
      chmod u+x "$job_script"
      termux-job-scheduler --job-id "$wifi_job_id" --period-ms "$((1000 * 60 * 15))" --battery-not-low 0 -s "$job_script"
      rish -c "cmd wifi add-suggestion \"$1\" wpa2 ${@:2}"
      ;;
    *)
      ;;
  esac
}

case "$1" in
  connect)
    try-connect-wifi "${@:2}"
    ;;
  remove)
    try-remove-wifi "$2"
    ;;
  location)
    get-ssid-location
    ;;
  known-p)
    near_known_wifi_p
    ;;
  *)
    echo "Wrong argument."
    ;;
esac
#+end_src

** job-script-generate
:PROPERTIES:
:CUSTOM_ID: ee0414ff-ad03-462c-bec9-5136f8b8a093
:END:
#+header: :var jobs_source_dir=(expand-file-name "_tangle/jobs")
#+begin_src sh :tangle (zr-org-by-tangle-dir "job-script-generate")
if [ $# -lt 1 ]; then
  echo "Usage: $0 [key=value ...] [-- command...] filename" >&2
  exit 1
fi

echo "#!/data/data/com.termux/files/usr/bin/bash"
echo

for (( i=1; i<=$#-1; i++ )); do
  if [[ "${!i}" == *=* ]]; then
    printf "%q\n" "${!i}"
  elif [ "${!i}" = "--" ]; then
    printf "%q " "${@:$i+1}"
    printf "\n"
    exit 0
  else
    echo "Warning: Ignoring invalid argument '${!i}'" >&2
  fi
done

filename="$jobs_source_dir/${@: -1}"

if [ ! -f "$filename" ]; then
  filename="${@: -1}"
fi

printf ". %q\n" "$filename"
#+end_src

** audio-manage
#+begin_src sh
function headphone-enable-p() {
  if /system/bin/dumpsys audio 2>/dev/null | grep -q '^  mBluetoothName=null$'; then
    return 1
  else
    return 0
  fi
}
#+end_src

** screen-on-p
:PROPERTIES:
:CUSTOM_ID: 8197aa92-1e58-4ca9-a15b-37e0e981d45a
:END:
https://www.reddit.com/r/termux/comments/11e2s3j/check_if_display_is_on_or_off/

Check by exit code.
#+begin_src sh :tangle (zr-org-by-tangle-dir "screen-on-p")
/system/bin/dumpsys deviceidle | grep -q "^  mScreenOn=true$"
#+end_src

** vpn-enable-p
:PROPERTIES:
:CUSTOM_ID: 19918dc2-5be8-42f4-ac59-c22e28d92fe9
:END:

Check by exit code.
#+begin_src sh :tangle (zr-org-by-tangle-dir "vpn-enable-p")
/system/bin/dumpsys vpn_management | grep -q "^    Active vpn type: 1"
#+end_src

** vpn-enable
:PROPERTIES:
:CUSTOM_ID: c62bd644-4645-402b-b530-a17e9042c68a
:END:
#+begin_src sh :tangle (zr-org-by-tangle-dir "vpn-enable")
if [ $# -ne 1 ]; then
    echo "Usage: $0 <true|false>" >&2
    exit 1
fi

vpn-toggle () {
    termux-am start -n io.nekohasekai.sagernet/io.nekohasekai.sagernet.QuickToggleShortcut >/dev/null 2>&1
}

case "$1" in
    true)
        if ! "$zr_cli" vpn-enable-p; then
            vpn-toggle
        fi
        ;;
    false)
        if "$zr_cli" vpn-enable-p; then
            vpn-toggle
        fi
        ;;
    *)
        echo "Error: Argument must be 'true' or 'false'" >&2
        exit 1
        ;;
esac
#+end_src

** tailscale-enable
:PROPERTIES:
:CUSTOM_ID: 2fa215c1-0152-4103-9817-f000fd990a68
:END:
#+begin_src sh :tangle (zr-org-by-tangle-dir "tailscale-enable")
function tailscale-broadcast() {
  termux-am broadcast -n com.tailscale.ipn/.IPNReceiver -a com.tailscale.ipn.$1
}

function tailscale-stat() {
  local content
  content=$(termux-notification-list | jq -r '.[] | select(.packageName == "com.tailscale.ipn") | .content')
  if [ "$content" = "Connected" ]; then
    return 0
  else
    return 1
  fi
}

case "$1" in
  true)
    tailscale-broadcast "CONNECT_VPN"
    ;;
  false)
    tailscale-broadcast "DISCONNECT_VPN"
    ;;
  stat)
    tailscale-stat
    ;;
  toggle)
    if tailscale-stat; then
      action="DISCONNECT_VPN"
    else
      action="CONNECT_VPN"
    fi
    tailscale-broadcast $action
    ;;
  *)
    echo "Wrong argument."
    ;;
esac
#+end_src

** wifi-enable
:PROPERTIES:
:CUSTOM_ID: de7b47e1-bdb2-4b46-a64a-f84121416c14
:END:
#+begin_src sh :tangle (zr-org-by-tangle-dir "wifi-enable")
if [ "$1" = 'true' ]; then
    rish -c 'svc wifi enable'
else
    termux-wifi-enable $*
fi
#+end_src

** mobile-enable
:PROPERTIES:
:CUSTOM_ID: 6a1151db-438b-41d2-84c0-77c1273b6be5
:END:
#+begin_src sh :tangle (zr-org-by-tangle-dir "mobile-enable")
if [ $# -ne 1 ]; then
    echo "Usage: $0 <true|false>" >&2
    exit 1
fi

case "$1" in
    true)
        rish -c 'svc data enable'
        ;;
    false)
        rish -c 'svc data disable'
        ;;
    *)
        echo "Error: Argument must be 'true' or 'false'" >&2
        exit 1
        ;;
esac
#+end_src

** fdroid
:PROPERTIES:
:header-args:sh+: :var CACHE_DIR=(expand-file-name "adb-wrapper-cache" temporary-file-directory)
:header-args:sh+: :var ADB_DIR=(zr-org-by-tangle-dir "")
:CUSTOM_ID: 74e5e824-18ac-4bc7-b930-554bc658fdcf
:END:

#+begin_src sh :tangle (zr-org-by-tangle-dir "fdroid")
args=()
clean_cache=false

# Loop through all provided arguments.
for arg in "$@"; do
  if [[ "$arg" == "--clean-cache" ]]; then
    # If --clean-cache is found, set a flag but don't add it to the args for fdroidcl.
    clean_cache=true
  else
    # Add all other arguments to the list for fdroidcl.
    args+=("$arg")
  fi
done

# --- Cache Cleaning ---
if [ "$clean_cache" = true ]; then
  echo "Cleaning cache directory: $CACHE_DIR"
  rm -rf "$CACHE_DIR"
fi

# --- ENV Modification ---
export PATH="$ADB_DIR:$PATH"
export https_proxy="socks5h://127.0.0.1:10807"

# --- Execute fdroidcl ---
# Execute the real fdroidcl command, passing along the filtered arguments.
exec fdroidcl "${args[@]}"
#+end_src

#+begin_src sh :tangle (zr-org-by-tangle-dir "adb")
CACHE_DIR="/data/data/com.termux/files/usr/tmp/adb-wrapper-cache"
CACHE_TTL=$((60 * 5)) # Cache time-to-live in seconds
APK_TARGET_DIR="$EXTERNAL_DIR/apks"

declare -A WHITELIST
WHITELIST['dumpsys package packages']=1
WHITELIST['dumpsys activity']=1

# Function to handle logging
log() {
  # echo "adb-wrapper: $@" >> /data/data/com.termux/files/usr/tmp/adb-wrapper.log
}

# Ensure cache directory exists
mkdir -p "$CACHE_DIR"

# --- Main Script ---

# Clean up log file on start
# echo "" > /data/data/com.termux/files/usr/tmp/adb-wrapper.log
log "Wrapper started"
log "Arguments: $@"

# Listen on port 5037 in the background to simulate adb server
if ! nc -z 127.0.0.1 5037; then
  log "Starting listener on port 5037"
  nc -l -p 5037 > /dev/null 2>&1 &
fi

# --- Command Handling ---

case "$1" in
  "start-server")
    log "Handling start-server"
    exit 0
    ;;
  "devices")
    log "Handling devices -l"
    CACHE_FILE="$CACHE_DIR/devices"
    if [ -f "$CACHE_FILE" ] && [ $(($(date +%s) - $(date +%s -r "$CACHE_FILE"))) -lt $CACHE_TTL ]; then
      log "Returning cached devices output"
      cat "$CACHE_FILE"
      exit 0
    fi
    log "Fetching new devices output"
    serial=$(rish -c 'getprop ro.serialno' | tr -d '[:space:]')
    {
      echo "List of devices attached"
      printf "% -22s device product:generic model:generic device:generic\n" "$serial"
    } > "$CACHE_FILE"
    cat "$CACHE_FILE"
    exit 0
    ;;
  "-s")
    log "Ignoring -s $2"
    shift 2
    ;;
esac

# Handle remaining commands
case "$1" in
  "install")
    shift
    log "Handling install (no cache) with args: $@"
    
    args=("$@")
    apk_path="${args[-1]}"
    
    apk_filename=$(basename "$apk_path")
    new_apk_path="$APK_TARGET_DIR/$apk_filename"
    tmp_apk_path="/data/local/tmp/$apk_filename"
    
    if [[ -L "$apk_path" ]]; then
      if [[ ! -e "$apk_path" ]]; then
        rm -f "$apk_path"{,-etag}
      fi
    else
      log "Creating symlink from '$new_apk_path' to '$apk_path'"
      mkdir -p "$APK_TARGET_DIR"
      mv "$apk_path" "$new_apk_path"
      ln -s "$new_apk_path" "$apk_path"
    fi
    # Replace original path with the tmp path for the install command
    args[-1]="$tmp_apk_path"
    
    log "install (no cache) with args: ${args[@]}"
    # All arguments except the last one
    install_options=("${args[@]:0:${#args[@]}-1}")
    # The last argument is the path, which we need to quote for the remote shell
    install_path_arg="'${args[-1]}'"
    
    # Construct the full command for rish
    remote_cmd="cp -f '$new_apk_path' '$tmp_apk_path' && pm install ${install_options[@]} $install_path_arg && rm -f '$tmp_apk_path'"
    log "Executing remote command: $remote_cmd"
    rish -c "$remote_cmd"
    if [ $? -eq 0 ]; then
      echo "Success"
    fi
    exit $?
    ;;
  "uninstall")
    # This command is whitelisted and will not be cached
    cmd_name="$1"
    shift
    log "Handling $cmd_name (no cache) with args: $@"
    rish -c "pm $cmd_name $@"
    if [ $? -eq 0 ]; then
      echo "Success"
    fi
    exit $?
    ;;
  "shell")
    shift
    cmd="$*"
    log "Handling shell with command: $cmd"
    
    # Whitelist certain commands from caching
    if [[ -v WHITELIST["$cmd"] ]]; then
      log "Executing whitelisted command (no cache): $cmd"
      eval "/system/bin/$cmd"
      exit ${PIPESTATUS[0]}
    fi
    
    # Generate a cache key for the command
    CACHE_KEY=$(echo -n "$cmd" | md5sum | awk '{print $1}')
    CACHE_FILE="$CACHE_DIR/$CACHE_KEY"
    
    # Check for a recent cached file
    if [ -f "$CACHE_FILE" ] && [ $(($(date +%s) - $(date +%s -r "$CACHE_FILE"))) -lt $CACHE_TTL ]; then
      log "Returning cached output for: $cmd"
      cat "$CACHE_FILE"
      exit 0
    fi
    
    # Execute the command and cache the output
    log "Executing and caching: $cmd"
    rish -c "$cmd" > "$CACHE_FILE"
    cat "$CACHE_FILE"
    exit ${PIPESTATUS[0]}
    ;;
  ,*)
    log "Unknown command: $@"
    echo "Unknown command: $@" >&2
    exit 1
    ;;
esac
#+end_src

** wifi-mobile-switch
:PROPERTIES:
:CUSTOM_ID: 52419187-e1b8-4716-a543-3f739a676bd2
:END:
#+begin_src sh :tangle (zr-org-by-tangle-dir "wifi-mobile-switch")
if termux-wifi-connectioninfo | grep -q '^  "supplicant_state": "UNINITIALIZED"$'; then
    "$zr_cli" wifi-enable true
    "$zr_cli" mobile-enable false
else
    "$zr_cli" mobile-enable true
    "$zr_cli" wifi-enable false
fi
#+end_src

** recent-apps
:PROPERTIES:
:CUSTOM_ID: 12768000-6d66-47cd-b2a4-b2694e9c485d
:END:
#+begin_src sh :tangle (zr-org-by-tangle-dir "recent-apps")
/system/bin/dumpsys activity recents | awk -F '[ :}]' '/^  \* Recent #[[:digit:]]+:.+type=standard A=/{print $11}'
#+end_src

** kill-latest-app
:PROPERTIES:
:CUSTOM_ID: bb284853-b6aa-4e30-abe0-f0f187924df3
:END:
#+begin_src sh :tangle (zr-org-by-tangle-dir "kill-latest-app")
app=$("$zr_cli" recent-apps | head -1)

termux-toast "Killing ${app}"

rish -c "am stop-app '${app}'"
#+end_src

** feedme-fetch-and-run
:PROPERTIES:
:CUSTOM_ID: 8204b57e-cf95-4e2d-9444-e2452f9bd859
:END:
#+begin_src sh :tangle (zr-org-by-tangle-dir "feedme-fetch-and-run")
function run-feedme() {
  termux-am start com.seazon.feedme
}

if "$zr_cli" tailscale-enable stat; then
  run-feedme
else
  "$zr_cli" tailscale-enable true
  run-feedme
fi
#+end_src

** try-cmd
:PROPERTIES:
:CUSTOM_ID: da264674-2058-4b93-b4b3-7c98aab763c4
:END:
#+begin_src sh :tangle (zr-org-by-tangle-dir "try-cmd")
# 全局配置
VERSION="1.0.0"
DEFAULT_TIMEOUT=10
DEFAULT_MAX_RETRIES=3
DEFAULT_BACKOFF_FACTOR=1
MAX_WAIT_TIME=300  # 最大等待时间(秒)

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 显示帮助信息
show_help() {
  cat <<EOF
命令重试脚本 v${VERSION}

用法: ${0##*/} [选项] -- 命令 [参数...]
选项:
  -t, --timeout SECONDS     单次超时时间（默认: ${DEFAULT_TIMEOUT}s）
  -r, --max-retries NUM     最大重试次数（默认: ${DEFAULT_MAX_RETRIES}）
  -b, --backoff FACTOR      退避因子（默认: ${DEFAULT_BACKOFF_FACTOR}，0表示禁用）
  -q, --quiet              安静模式，减少输出
  -v, --version            显示版本信息
  -h, --help               显示此帮助信息

退避算法: 等待时间 = FACTOR * (2^(重试次数-1))，最大 ${MAX_WAIT_TIME} 秒

示例:
  ${0##*/} -t 5 -r 2 -- curl -s http://example.com
  ${0##*/} -b 2 -- ./unstable_script.sh
EOF
exit 0
}

# 初始化变量
timeout=$DEFAULT_TIMEOUT
max_retries=$DEFAULT_MAX_RETRIES
backoff_factor=$DEFAULT_BACKOFF_FACTOR
quiet_mode=false
command=()

# 解析命令行参数
while [[ $# -gt 0 ]]; do
  case "$1" in
    -t|--timeout)
      timeout=$2
      shift 2
      ;;
    -r|--max-retries)
      max_retries=$2
      shift 2
      ;;
    -b|--backoff)
      backoff_factor=$2
      shift 2
      ;;
    -q|--quiet)
      quiet_mode=true
      shift
      ;;
    -v|--version)
      echo "v${VERSION}"
      exit 0
      ;;
    -h|--help)
      show_help
      ;;
    --)
      shift
      command=("$@")
      break
      ;;
    *)
      echo -e "${RED}错误: 未知参数 '$1'${NC}" >&2
      show_help
      exit 1
      ;;
  esac
done

# 参数验证函数
validate_number() {
  local value=$1 name=$2 min=$3
  if ! [[ "$value" =~ ^[0-9]+$ ]] || [[ $value -lt $min ]]; then
    echo -e "${RED}错误: ${name}必须是不小于${min}的整数${NC}" >&2
    exit 1
  fi
}

# 验证参数
validate_number "$timeout" "超时时间" 1
validate_number "$max_retries" "最大重试次数" 0
validate_number "$backoff_factor" "退避因子" 0

# 检查命令是否为空
if [[ ${#command[@]} -eq 0 ]]; then
  echo -e "${RED}错误: 必须指定要执行的命令${NC}" >&2
  show_help
  exit 1
fi

# 日志函数
log() {
  $quiet_mode && return
  echo -e "[$(date '+%Y-%m-%d %T')] $*"
}

# 执行命令函数
try_command() {
  log "${BLUE}执行: ${command[*]} (超时: ${timeout}s)${NC}"
  timeout "$timeout" "${command[@]}"
}

# 计算等待时间
calculate_wait_time() {
  local attempt=$1
  if [[ $backoff_factor -eq 0 ]]; then
    echo 0
    return
  fi

  local wait_time=$(( backoff_factor * (1 << (attempt-1)) ))
  (( wait_time > MAX_WAIT_TIME )) && wait_time=$MAX_WAIT_TIME
  echo $wait_time
}

# 主执行流程
retry_count=0
last_exit_code=0

while [[ $retry_count -le $max_retries ]]; do
  if [[ $retry_count -gt 0 ]]; then
    wait_time=$(calculate_wait_time $retry_count)
    if [[ $wait_time -gt 0 ]]; then
      log "${YELLOW}等待 ${wait_time}s 后重试...${NC}"
      sleep $wait_time
    fi
  fi

  if try_command; then
    log "${GREEN}命令执行成功${NC}"
    exit 0
  else
    last_exit_code=$?

    if [[ $last_exit_code -eq 124 ]]; then
      ((retry_count++))
      if [[ $retry_count -le $max_retries ]]; then
        log "${YELLOW}命令超时，将进行第 ${retry_count}/${max_retries} 次重试${NC}"
      fi
    else
      log "${RED}命令执行失败，退出码: ${last_exit_code}${NC}"
      break
    fi
  fi
done

log "${RED}达到最大重试次数 (${max_retries})，命令最终失败${NC}"
exit $last_exit_code
#+end_src




** stay-on-while-plugged-in
:PROPERTIES:
:CUSTOM_ID: 4d1338f0-9c67-4023-9d35-549bde1756c7
:END:
#+begin_src sh :tangle (zr-org-by-tangle-dir "stay-on-while-plugged-in")
case "$1" in
  true)
    rish -c 'settings put global stay_on_while_plugged_in 3'
    ;;
  false)
    rish -c 'settings put global stay_on_while_plugged_in 0'
    ;;
  stat)
    rish -c 'settings get global stay_on_while_plugged_in'
    ;;
  *)
    echo "Wrong argument."
    ;;
esac
#+end_src
** daemon-manager
:PROPERTIES:
:CUSTOM_ID: 5ff6ccd4-c9f5-4779-96ce-90f1cc0cfff7
:END:
#+header: :var DAEMON_DIR=(expand-file-name "_tangle/daemons")
#+begin_src sh :tangle (zr-org-by-tangle-dir "daemon") :var NOTIFICATION_GROUP="daemon"
daemon-manager() {
  local daemon_name="$1"
  local action="$2"
  local notification_id="$daemon_name-daemon"

  # Source the daemon's specific functions if they exist
  local daemon_script="$DAEMON_DIR/${daemon_name}"
  if [ -f "$daemon_script" ]; then
    source "$daemon_script"
  fi

  # Check if required functions are defined
  if ! declare -f "stat" >/dev/null || \
    ! declare -f "start" >/dev/null || \
    ! declare -f "stop" >/dev/null; then
  echo "Error: Required functions for daemon '$daemon_name' not found."
  return 1
  fi

  case "$action" in
    start)
      local stop_act="$manager_path $daemon_name stop"
      termux-notification \
        --ongoing -c "$daemon_name" -t "$daemon_name" \
        --group "$NOTIFICATION_GROUP" \
        -i "$notification_id" --priority min \
        --on-delete "$stop_act"
      stop
      start
      ;;
    stop)
      stop
      termux-notification-remove "$notification_id"
      ;;
    stat)
      stat
      ;;
    toggle)
      if stat; then
        exec "$manager_path" "$daemon_name" stop
      else
        exec "$manager_path" "$daemon_name" start
      fi
      ;;
    *)
      echo "Usage: $0 DAEMON_NAME {start|stop|stat|toggle}"
      return 1
      ;;
  esac
}

# If script is executed directly (not sourced)
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  manager_path="$(realpath $0)"
  daemon-manager "$@"
fi
#+end_src
* rish
:PROPERTIES:
:tangle-dir: (if (eq 'android system-type) "/storage/emulated/0/Android/media/com.termux/bin" "_tangle/bin")
:header-args:sh: :shebang "#!/system/bin/sh" :mkdirp t
:END:

** screen
:PROPERTIES:
:CUSTOM_ID: ef1395df-412f-46e5-a3ee-cdc29c98f2ac
:END:
#+begin_src sh :tangle (zr-org-by-tangle-dir "screen")
resolution() {
  dumpsys window displays | grep '^    init=' | tail -1 | sed -n 's/.*init=\([0-9]*x[0-9]*\).*/\1/p'
}

minip() {
  res=$(resolution)
  if [ "$res" = "512x260" ]; then
    echo 0
  else
    echo 1
  fi
}


case "$1" in
  minip)
    minip
    ;;
  resolution)
    resolution
    ;;
  ,*)
    echo "Usage: $0 {minip|resolution}"
    exit 1
    ;;
esac
#+end_src
* daemons
:PROPERTIES:
:tangle-dir: _tangle/daemons
:END:
** sshd
:PROPERTIES:
:CUSTOM_ID: 2efcfb38-22ec-4212-ac91-e0e9be2cd724
:END:
#+name: sshd-daemon
#+begin_src sh :tangle (zr-org-by-tangle-dir "sshd")
stat(){
  local pid_file="$PREFIX/var/run/sshd.pid"
  if [ -f "$pid_file" ]; then
    local pid=$(cat "$pid_file")
    if kill -0 "$pid" 2>/dev/null; then
      local proc_name="$(ps -p "$pid" -o comm=)"
      if [ "$proc_name" = 'sshd' ]; then
        return 0
      fi
    fi
  fi
  return 1
}

start(){
  sshd
  local ip="$("$zr_cli" wlan-ip)"
  termux-notification \
    --ongoing -c "IP: $ip" -t "sshd" \
    --group "$NOTIFICATION_GROUP" \
    -i "$notification_id" \
    --on-delete "$stop_act"
  termux-toast "IP: $ip"
  "$zr_cli" stay-on-while-plugged-in true
}

stop(){
  "$zr_cli" stay-on-while-plugged-in false
  pkill sshd
}
#+end_src

** rclone-rc
:PROPERTIES:
:CUSTOM_ID: 82d65056-5bbc-4956-98f0-c48baf784a6d
:END:
#+header: :var rclone_addr=(let ((auth (car (zr-net-url-get-auths zr-rclone-baseurl)))) (format "%s:%s" (plist-get auth :host) (plist-get auth :port)))
#+header: :var rclone_user=(let ((auth (car (zr-net-url-get-auths zr-rclone-baseurl)))) (plist-get auth :user))
#+header: :var rclone_pass=(let ((auth (car (zr-net-url-get-auths zr-rclone-baseurl)))) (auth-info-password auth))
#+begin_src sh :tangle (zr-org-by-tangle-dir "rclone")
stat(){
  curl "http://$rclone_addr" -m1
}

start(){
  rclone rcd --rc-serve "--rc-addr=$rclone_addr" \
    "--rc-user=$rclone_user" "--rc-pass=$rclone_pass" \
    >/dev/null 2>&1 &
  open_url="termux-open-url 'http://$rclone_user:$rclone_pass@$rclone_addr'"
  termux-notification \
    --ongoing -c "http://$rclone_addr" -t "rclone" \
    --group "$NOTIFICATION_GROUP" \
    -i "$notification_id" \
    --button1 'Open' --button1-action "$open_url" \
    --on-delete "$stop_act"
}

stop(){
  pkill rclone
}
#+end_src

** trojan-go
:PROPERTIES:
:CUSTOM_ID: 7c3fc040-7ccb-4359-9b8f-e9462501a7c0
:END:
#+header: :var config_path=(expand-file-name "../trojan-go/_tangle/config.json")
#+header: :var script_path=(expand-file-name "../cloudflarest/_tangle/trojan_go.py")
#+begin_src sh :tangle (zr-org-by-tangle-dir "trojan-go")
stat(){
  curl -m1 -xsocks5h://127.0.0.1:10809 http://127.0.0.1:1
  [ $? -eq 56 ]
}

start(){
  trojan-go -config "$config_path" >/dev/null 2>&1 &
  local ip=$(jq -r '.remote_addr' "$config_path")
  local restart="$manager_path trojan-go start"
  local refresh="$script_path | termux-toast && termux-vibrate"
  local copy="termux-clipboard-set $ip"
  termux-notification \
    --ongoing -c "Remote: $ip" -t "Trojan-go" \
    --group "$NOTIFICATION_GROUP" \
    -i "$notification_id" \
    --button1 'Re IP' --button1-action "$refresh" \
    --button2 'Restart' --button2-action "$restart" \
    --button3 'Copy' --button3-action "$copy" \
    --on-delete "$stop_act"
}

stop(){
  pkill trojan-go
}
#+end_src
* intents
:PROPERTIES:
:tangle-dir: _tangle/intents
:CUSTOM_ID: edc235ea-6d8e-4457-ad1d-0f043e2854bb
:END:

#+header: :var file_transform_tbl=(mapcar (lambda (a) (list (car a) (cdr a))) zr-rclone-file-transform-alist)
#+header: :var rclone_user=(let ((auth (car (zr-net-url-get-auths zr-rclone-baseurl)))) (plist-get auth :user))
#+header: :var playlist_path="/storage/emulated/0/Movies/mpv.m3u8"
#+begin_src python :tangle (zr-org-by-tangle-dir "termux-url-opener")
from urllib.parse import urlparse, unquote
import urllib.request
import json
import re
import base64
import sys
import subprocess

class Rclone:
  def __init__(self, url):
    """
    初始化 Rclone 参数
    :param url: urlparse 的结果
    """
    auth_str = f"{url.username}:{url.password}"
    auth_bytes = auth_str.encode("utf-8")
    auth_b64 = base64.b64encode(auth_bytes).decode("utf-8")
    self.baseurl = f'{url.scheme}://{url.hostname}:{url.port}/'
    self.headers = {
      'Authorization': f"Basic {auth_b64}",
      'Content-Type': 'application/json'
    }

  def rc(self, opt: str, data: object) -> object:
    """
    执行 rc 命令
    
    :param opt: 要执行的命令
    :return: 命令输出
    """
    req = urllib.request.Request(
      url = self.baseurl + opt,
      data = json.dumps(data).encode('utf-8'),
      headers = self.headers,
      method = 'POST'
    )

    response = urllib.request.urlopen(req)
    return json.loads(response.read().decode('utf-8'))

def mpv_play_files(files):
  """播放文件"""
  if type(files) == list:
    with open(playlist_path, 'w', encoding='utf-8') as file:
      file.write('\n'.join(files))
    data = 'file://' + playlist_path
  else:
    data = files

  subprocess.run(['am', 'start', '-a', 'android.intent.action.VIEW',
                  '-t', 'video/any', '-p', 'is.xyz.mpv.ytdl',
                  '-d', data])
  

def transform_file_path(file):
  """
  Transform file path according to file_transform_tbl.

  Args:
    file: The file path to transform

  Returns:
    The transformed file path
  """
  for transform in file_transform_tbl:
    orig, replacement = transform
    file = re.sub(orig, replacement, file)
  return file

def rclone_handler(url):
  """处理 rclone 相关链接"""
  path = unquote(url.path) if parsed.path else None
  path_parts = [part for part in path.split('/') if part] if path else []
  pattern = r'^\[(.*:)]$'
  matches = re.search(pattern, path_parts[0])
  fs = matches.group(1)
  
  rclone = Rclone(url)
  data = {
    'fs': fs,
    'remote': '/'.join(path_parts[1:]),
    'opt': {
      'recurse': True,
      'noModTime': True,
      'noMimeType': True,
      'filesOnly': True
    }
  }
  res = rclone.rc('operations/stat', data)
  if res['item'] == None:
    res = rclone.rc('operations/list', data)
    mpv_play_files([transform_file_path(fs + item['Path']) for item in res['list']])
  else:
    mpv_play_files(transform_file_path(fs + res['item']['Path']))

url = sys.argv[1]

parsed = urlparse(url)

if parsed.username == rclone_user:
  rclone_handler(parsed)
#+end_src
* jobs
:PROPERTIES:
:tangle-dir: _tangle/jobs
:END:

** remove metered wifi
:PROPERTIES:
:CUSTOM_ID: 30a0d69e-1e6b-4ddb-a2a0-8bf5cea4cb20
:END:
#+begin_src sh :tangle (zr-org-by-tangle-dir "remove-metered-wifi.sh")
"$zr_cli" try-cmd -q -- "$zr_cli" wifi-manage remove "$wifi_name"
#+end_src

* ids
#+name: notification-tbl
| name | notification-id |
|------+-----------------|
| sshd | sshd-daemon     |

#+name: select-id
#+begin_src elisp :var name="sshd" tbl=notification-tbl[]
(nth 1 (assoc name tbl))
#+end_src

#+name: select-notification-id
#+call: select-id[](tbl=notification-tbl[])[]
