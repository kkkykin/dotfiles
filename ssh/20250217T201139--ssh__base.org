#+title:      ssh
#+date:       [2025-02-17 Mon 20:11]
#+filetags:   :base:
#+identifier: 20250217T201139

* tangle
#+begin_src elisp
(let* ((zr-local-pls (plstore-open "ssh.pls"))
       (proxy (plist-get (cdr (plstore-get zr-local-pls "proxy")) :proxy))
       (proxy-fmt (cond
                   ((executable-find "ncat")
                    "ProxyCommand ncat --proxy %s --proxy-type socks5 --proxy-dns remote %%h %%p")
                   ((executable-find "nc")
                    "ProxyCommand nc -X connect -x %s %%h %%p")))
       (proxy-cmd (if (and proxy proxy-fmt) (format proxy-fmt proxy) "")))
  (plstore-close zr-local-pls)
  (org-babel-tangle))
#+end_src

* example
:PROPERTIES:
:CUSTOM_ID: f5e58b4d-428d-4730-aa4e-8cfe7a6730b0
:header-args:conf-space: :tangle (zr-org-by-tangle-dir) :var proxy-cmd=(concat proxy-cmd) :mkdirp t
:END:

If not in *Host* block, *Include* directive must go to the top of the config file (before the "body" made of *Host* blocks).

#+name: tty
#+begin_src conf :tangle no
RequestTTY yes
#+end_src

#+name: debug
#+begin_src conf-space
LogLevel DEBUG
#+end_src

#+name: vim
#+begin_src conf-space :mkdirp t :var remote="127.0.0.1:11111" local="127.0.0.1:80"
RemoteForward $remote $local
<<tty>>
RemoteCommand /usr/bin/env vim -u NORC -N --cmd "runtime plugin/netrwPlugin.vim" --cmd "source http://$remote/vim" -c terminal -c only -c startinsert
#+end_src

#+name: nvim
#+begin_src conf-space
<<tty>>
RemoteCommand /usr/bin/env nvim +te +star
#+end_src

#+name: github
#+begin_src conf-space
Host github.com
Hostname ssh.github.com
User git
Port 443
PreferredAuthentications publickey
$proxy-cmd
#+end_src

#+name: codeberg
#+begin_src conf-space
Host codeberg.org
Hostname codeberg.org
ServerAliveInterval 55
ForwardAgent yes
PreferredAuthentications publickey
$proxy-cmd
#+end_src

#+name: x11
#+begin_src conf-space
ForwardX11 yes
ForwardX11Trusted yes
#+end_src

* sshd
:PROPERTIES:
:CUSTOM_ID: 24511934-a6f2-41a1-a951-9063eb8218b2
:END:
#+header: :var sshd-port=(plist-get (cdr (plstore-get zr-local-pls "sshd")) :port)
#+begin_src conf-unix :tangle (zr-org-by-tangle-dir "sshd.conf") :mkdirp t
Port $sshd-port
PermitRootLogin no
PasswordAuthentication no
PubkeyAuthentication yes
#+end_src
